<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>X.X.Ren</title>
  
  <subtitle>个人博客</subtitle>
  <link href="https://xxren8218.github.io/atom.xml" rel="self"/>
  
  <link href="https://xxren8218.github.io/"/>
  <updated>2021-04-04T17:21:35.595Z</updated>
  <id>https://xxren8218.github.io/</id>
  
  <author>
    <name>任晓雄</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>机器学习数学基础-线性代数</title>
    <link href="https://xxren8218.github.io/20210405/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80-%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0.html"/>
    <id>https://xxren8218.github.io/20210405/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80-%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0.html</id>
    <published>2021-04-04T17:11:14.000Z</published>
    <updated>2021-04-04T17:21:35.595Z</updated>
    
    <content type="html"><![CDATA[<h2 id="线性代数复习和参考"><a href="#线性代数复习和参考" class="headerlink" title="线性代数复习和参考"></a>线性代数复习和参考</h2><h3 id="1-基础概念和符号"><a href="#1-基础概念和符号" class="headerlink" title="1.  基础概念和符号"></a>1.  基础概念和符号</h3><p>线性代数提供了一种紧凑地表示和操作线性方程组的方法。 例如，以下方程组：</p><script type="math/tex; mode=display">4x_1 − 5x_2 = −13</script><script type="math/tex; mode=display">−2x_1 + 3x_2 = 9</script><p>这是两个方程和两个变量，正如你从高中代数中所知，你可以找到 $x_1$ 和 $x_2$ 的唯一解（除非方程以某种方式退化，例如，如果第二个方程只是第一个的倍数，但在上面的情况下，实际上只有一个唯一解）。 在矩阵表示法中，我们可以更紧凑地表达：</p><script type="math/tex; mode=display">Ax= b</script><script type="math/tex; mode=display">\text { with } A=\left[\begin{array}{cc}{4} & {-5} \\ {-2} & {3}\end{array}\right], b=\left[\begin{array}{c}{-13} \\ {9}\end{array}\right]</script><p>我们可以看到，这种形式的线性方程有许多优点（比如明显地节省空间）。</p><h4 id="1-1-基本符号"><a href="#1-1-基本符号" class="headerlink" title="1.1 基本符号"></a>1.1 基本符号</h4><p>我们使用以下符号：</p><ul><li><p>$A \in \mathbb{R}^{m \times n}$，表示 $A$ 为由实数组成具有$m$行和$n$列的矩阵。</p></li><li><p>$x \in \mathbb{R}^{ n}$，表示具有$n$个元素的向量。 通常，向量$x$将表示列向量: 即，具有$n$行和$1$列的矩阵。 如果我们想要明确地表示行向量: 具有 $1$ 行和$n$列的矩阵 - 我们通常写$x^T$（这里$x^T$$x$的转置）。</p></li><li><p>$x_i$表示向量$x$的第$i$个元素</p></li></ul><script type="math/tex; mode=display">x=\left[\begin{array}{c}{x_{1}} \\ {x_{2}} \\ {\vdots} \\ {x_{n}}\end{array}\right]</script><ul><li>我们使用符号 $a_{ij}$（或$A_{ij}$,$A_{i,j}$等）来表示第 $i$ 行和第$j$列中的 $A$ 的元素：</li></ul><script type="math/tex; mode=display">A=\left[\begin{array}{cccc}{a_{11}} & {a_{12}} & {\cdots} & {a_{1 n}} \\ {a_{21}} & {a_{22}} & {\cdots} & {a_{2 n}} \\ {\vdots} & {\vdots} & {\ddots} & {\vdots} \\ {a_{m 1}} & {a_{m 2}} & {\cdots} & {a_{m n}}\end{array}\right]</script><ul><li>我们用$a^j$或者$A_{:,j}$表示矩阵$A$的第$j$列：</li></ul><script type="math/tex; mode=display">A=\left[\begin{array}{llll}{ |} & { |} & {} & { |} \\ {a^{1}} & {a^{2}} & {\cdots} & {a^{n}} \\ { |} & { |} & {} & { |}\end{array}\right]</script><ul><li>我们用$a^T_i$或者$A_{i,:}$表示矩阵$A$的第$i$行：<script type="math/tex; mode=display">A=\left[\begin{array}{c}{-a_{1}^{T}-} \\ {-a_{2}^{T}-} \\ {\vdots} \\ {-a_{m}^{T}-}\end{array}\right]</script></li></ul><ul><li>在许多情况下，将矩阵视为列向量或行向量的集合非常重要且方便。 通常，在向量而不是标量上操作在数学上（和概念上）更清晰。只要明确定义了符号，用于矩阵的列或行的表示方式并没有通用约定。</li></ul><h3 id="2-矩阵乘法"><a href="#2-矩阵乘法" class="headerlink" title="2.矩阵乘法"></a>2.矩阵乘法</h3><p>两个矩阵相乘，其中 $A \in \mathbb{R}^{m \times n}$  and $B \in \mathbb{R}^{n \times p}$ ，则：</p><script type="math/tex; mode=display">C = AB \in \mathbb{R}^{m \times p}</script><p>其中：</p><script type="math/tex; mode=display">C_{i j}=\sum_{k=1}^{n} A_{i k} B_{k j}</script><p>请注意，为了使矩阵乘积存在，$A$中的列数必须等于$B$中的行数。有很多方法可以查看矩阵乘法，我们将从检查一些特殊情况开始。</p><h4 id="2-1-向量-向量乘法"><a href="#2-1-向量-向量乘法" class="headerlink" title="2.1 向量-向量乘法"></a>2.1 向量-向量乘法</h4><p>给定两个向量$x, y \in \mathbb{R}^{n}$,$x^T y$通常称为<strong>向量内积</strong>或者<strong>点积</strong>，结果是个<strong>实数</strong>。</p><script type="math/tex; mode=display">x^{T} y \in \mathbb{R}=\left[\begin{array}{llll}{x_{1}} & {x_{2}} & {\cdots} & {x_{n}}\end{array}\right]\left[\begin{array}{c}{y_{1}} \\ {y_{2}} \\ {\vdots} \\ {y_{n}}\end{array}\right]=\sum_{i=1}^{n} x_{i} y_{i}</script><p>注意：$x^T y = y^Tx$ 始终成立。</p><p>给定向量 $x \in \mathbb{R}^{m}$, $y \in \mathbb{R}^{n}$ (他们的维度是否相同都没关系)，$xy^T \in \mathbb{R}^{m \times n}$叫做<strong>向量外积 </strong> , 当 $(xy^T)_{ij} = x_iy_j$ 的时候，它是一个矩阵。</p><script type="math/tex; mode=display">x y^{T} \in \mathbb{R}^{m \times n}=\left[\begin{array}{c}{x_{1}} \\ {x_{2}} \\ {\vdots} \\ {x_{m}}\end{array}\right]\left[\begin{array}{llll}{y_{1}} & {y_{2}} & {\cdots} & {y_{n}}\end{array}\right]=\left[\begin{array}{cccc}{x_{1} y_{1}} & {x_{1} y_{2}} & {\cdots} & {x_{1} y_{n}} \\ {x_{2} y_{1}} & {x_{2} y_{2}} & {\cdots} & {x_{2} y_{n}} \\ {\vdots} & {\vdots} & {\ddots} & {\vdots} \\ {x_{m} y_{1}} & {x_{m} y_{2}} & {\cdots} & {x_{m} y_{n}}\end{array}\right]</script><p>举一个外积如何使用的一个例子：让$1\in R^{n}$表示一个$n$维向量，其元素都等于1，此外，考虑矩阵$A \in R^{m \times n}$，其列全部等于某个向量 $x \in R^{m}$。 我们可以使用外积紧凑地表示矩阵 $A$:</p><script type="math/tex; mode=display">A=\left[\begin{array}{llll}{ |} & { |} & {} & { |} \\ {x} & {x} & {\cdots} & {x} \\ { |} & { |} & {} & { |}\end{array}\right]=\left[\begin{array}{cccc}{x_{1}} & {x_{1}} & {\cdots} & {x_{1}} \\ {x_{2}} & {x_{2}} & {\cdots} & {x_{2}} \\ {\vdots} & {\vdots} & {\ddots} & {\vdots} \\ {x_{m}} & {x_{m}} & {\cdots} & {x_{m}}\end{array}\right]=\left[\begin{array}{c}{x_{1}} \\ {x_{2}} \\ {\vdots} \\ {x_{m}}\end{array}\right]\left[\begin{array}{lll}{1} & {1} & {\cdots} & {1}\end{array}\right]=x \mathbf{1}^{T}</script><h4 id="2-2-矩阵-向量乘法"><a href="#2-2-矩阵-向量乘法" class="headerlink" title="2.2 矩阵-向量乘法"></a>2.2 矩阵-向量乘法</h4><p>给定矩阵 $A \in \mathbb{R}^{m \times n}$，向量 $x \in  \mathbb{R}^{n}$ , 它们的积是一个向量 $y = Ax \in R^{m}$。 有几种方法可以查看矩阵向量乘法，我们将依次查看它们中的每一种。</p><p>如果我们按行写$A$，那么我们可以表示$Ax$为：</p><script type="math/tex; mode=display">y=A x=\left[\begin{array}{ccc}{-} & {a_{1}^{T}} & {-} \\ {-} & {a_{2}^{T}} & {-} \\ {} & {\vdots} & {} \\ {-} & {a_{m}^{T}} & {-}\end{array}\right] x=\left[\begin{array}{c}{a_{1}^{T} x} \\ {a_{2}^{T} x} \\ {\vdots} \\ {a_{m}^{T} x}\end{array}\right]</script><p>换句话说，第$i$个$y$是$A$的第$i$行和$x$的内积，即：$y_i = y_{i}=a_{i}^{T} x$。</p><p>同样的， 可以把 $A$ 写成列的方式，则公式如下：</p><script type="math/tex; mode=display">y=A x=\left[\begin{array}{cccc}{ |} & { |} & {} & { |} \\ {a^{1}} & {a^{2}} & {\cdots} & {a^{n}} \\ { |} & { |} & {} & { |}\end{array}\right]\left[\begin{array}{c}{x_{1}} \\ {x_{2}} \\ {\vdots} \\ {x_{n}}\end{array}\right]=\left[\begin{array}{c}{ } \\ {a^{1}{ } \\ }\end{array}\right] x_{1}+\left[\begin{array}{c}{ } \\ {a^{2}{ } \\ }\end{array}\right] x_{2}+{\cdots} +\left[\begin{array}{c}{ } \\ {a^{n}{ } \\ }\end{array}\right] x_{n}</script><p>换句话说，$y$是$A$的列的线性组合，其中线性组合的系数由$x$的元素给出。</p><p>到目前为止，我们一直在右侧乘以列向量，但也可以在左侧乘以行向量。 这是写的，$y^T = x^TA$ 表示$A \in \mathbb{R}^{m \times n}$，$x \in \mathbb{R}^{m}$，$y \in \mathbb{R}^{n}$。 和以前一样，我们可以用两种可行的方式表达$y^T$，这取决于我们是否根据行或列表达$A$.</p><p>第一种情况，我们把$A$用列表示：</p><script type="math/tex; mode=display">y^{T}=x^{T} A=x^{T}\left[\begin{array}{cccc}{ |} & { |} & {} & { |} \\ {a^{1}} & {a^{2}} & {\cdots} & {a^{n}} \\ { |} & { |} & {} & { |}\end{array}\right]=\left[\begin{array}{cccc}{x^{T} a^{1}} & {x^{T} a^{2}} & {\dots} & {x^{T} a^{n}}\end{array}\right]</script><p>这表明$y^T$的第$i$个元素等于$x$和$A$的第$i$列的内积。</p><p>最后，根据行表示$A$，我们得到了向量-矩阵乘积的最终表示:</p><script type="math/tex; mode=display">y^T=x^TA=\left[\begin{array}{llll}{x_{1}} & {x_{2}} & {\cdots} & {x_{n}}\end{array}\right]\left[\begin{array}{c}{-a_{1}^{T}-} \\ {-a_{2}^{T}-} \\ {\vdots} \\ {-a_{m}^{T}-}\end{array}\right]=x_{1}\left[-a_{1}^{T}-\right]+x_{2}\left[-a_{2}^{T}-\right]+\ldots+x_{n}\left[-a_{n}^{T}-\right]</script><p>所以我们看到$y^T$是$A$的行的线性组合，其中线性组合的系数由$x$的元素给出。</p><h4 id="2-3-矩阵-矩阵乘法"><a href="#2-3-矩阵-矩阵乘法" class="headerlink" title="2.3 矩阵-矩阵乘法"></a>2.3 矩阵-矩阵乘法</h4><p>有了这些知识，我们现在可以看看四种不同的（形式不同，但结果是相同的）矩阵-矩阵乘法：也就是本节开头所定义的$C=AB$的乘法。</p><p>首先，我们可以将矩阵 - 矩阵乘法视为一组向量-向量乘积。 从定义中可以得出：最明显的观点是$C $的$( i，j )$元素等于$A$的第$i$行和$B$的的$j$列的内积。如下面的公式所示：</p><script type="math/tex; mode=display">C=A B=\left[\begin{array}{cc}{-} & {a_{1}^{T}} &{-} \\ {-} & {a_{2}^{T}} &{-}  \\ {} & {\vdots} \\ {-} & {a_{m}^{T}} &{-} \end{array}\right]\left[\begin{array}{cccc}{ |} & { |} & {} & { |} \\ {b_{1}} & {b_{2}} & {\cdots} & {b_{p}} \\ { |} & { |} & {} & { |}\end{array}\right]=\left[\begin{array}{cccc}{a_{1}^{T} b_{1}} & {a_{1}^{T} b_{2}} & {\cdots} & {a_{1}^{T} b_{p}} \\ {a_{2}^{T} b_{1}} & {a_{2}^{T} b_{2}} & {\cdots} & {a_{2}^{T} b_{p}} \\ {\vdots} & {\vdots} & {\ddots} & {\vdots} \\ {a_{m}^{T} b_{1}} & {a_{m}^{T} b_{2}} & {\cdots} & {a_{m}^{T} b_{p}}\end{array}\right]</script><p>这里的$ A \in \mathbb{R}^{m\times n}$ ，$B \in \mathbb{R}^{n \times p}$， $a_i \in \mathbb{R}^n$ ，$b^j \in \mathbb{R}^{n \times p}$， 这里的$  A \in \mathbb{R}^ {m \times n}，$ $B \in \mathbb{R}^ {n \times p} $， $a_i \in \mathbb{R} ^ n $，$ b ^ j \in \mathbb{R} ^ {n \times p} $，所以它们可以计算内积。 我们用通常用行表示$ A $而用列表示$B$。<br>或者，我们可以用列表示$ A$，用行表示$B $，这时$AB$是求外积的和。公式如下：</p><script type="math/tex; mode=display">C=A B=\left[\begin{array}{cccc}{ |} & { |} & {} & { |} \\ {a_{1}} & {a_{2}} & {\cdots} & {a_{n}} \\ { |} & { |} & {} & { |}\end{array}\right]\left[\begin{array}{c}{-}& {b_{1}^{T}}&{-} \\ {-}& {b_{2}^{T}}&{-}  \\ {\vdots} \\{-}& {b_{n}^{T}}&{-}\end{array}\right]=\sum_{i=1}^{n} a_{i} b_{i}^{T}</script><p>换句话说，$AB$等于所有的$A$的第$i$列和$B$第$i$行的外积的和。因此，在这种情况下， $a_i \in \mathbb{R}^ m $和$b_i \in \mathbb{R}^p$， 外积$a^ib_i^T$的维度是$m×p$，与$C$的维度一致。</p><p>其次，我们还可以将矩阵 - 矩阵乘法视为一组矩阵向量积。如果我们把$B$用列表示，我们可以将$C$的列视为$A$和$B$的列的矩阵向量积。公式如下：</p><script type="math/tex; mode=display">C=A B=A\left[\begin{array}{cccc}{ |} & { |} & {} & { |} \\ {b_{1}} & {b_{2}} & {\cdots} & {b_{p}} \\ { |} & { |} & {} & { |}\end{array}\right]=\left[\begin{array}{cccc}{ |} & { |} & {} & { |} \\ {A b_{1}} & {A b_{2}} & {\cdots} & {A b_{p}} \\ { |} & { |} & {} & { |}\end{array}\right]</script><p>这里$C$的第$i$列由矩阵向量乘积给出，右边的向量为$c_i = Ab_i$。 这些矩阵向量乘积可以使用前一小节中给出的两个观点来解释。<br>最后，我们有类似的观点，我们用行表示$A$，$C$的行作为$A$和$C$行之间的矩阵向量积。公式如下：</p><script type="math/tex; mode=display">C=A B=\left[\begin{array}{ccc}{-} & {a_{1}^{T}} & {-} \\ {-} & {a_{2}^{T}} & {-} \\ {} & {\vdots} & {} \\ {-} & {a_{m}^{T}} & {-}\end{array}\right]  B=\left[\begin{array}{c} {-} & {a_{1}^{T} B} & {-}\\ {-} & {a_{2}^{T} B} & {-} \\ {\vdots} \\ {-} & {a_{m}^{T} B}& {-}\end{array}\right]</script><p>这里第$i$行的$C$由左边的向量的矩阵向量乘积给出：$c_i^T = a_i^T B$</p><p>将矩阵乘法剖析到如此大的程度似乎有点过分，特别是当所有这些观点都紧跟在我们在本节开头给出的初始定义（在一行数学中）之后。 </p><p>这些不同方法的直接优势在于它们允许您<strong>在向量的级别/单位而不是标量上进行操作</strong>。 为了完全理解线性代数而不会迷失在复杂的索引操作中，关键是要用尽可能多的概念进行操作。</p><p>实际上所有的线性代数都处理某种矩阵乘法，花一些时间对这里提出的观点进行直观的理解是非常必要的。 </p><p>除此之外，了解一些更高级别的矩阵乘法的基本属性是很有必要的：</p><ul><li><p>矩阵乘法结合律: $(AB)C = A(BC)$</p></li><li><p>矩阵乘法分配律: $A(B + C) = AB + AC$</p></li><li><p>矩阵乘法通常不是可交换的; 也就是说，通常$AB \ne BA$。 （例如，假设$  A \in \mathbb{R}^ {m \times n}，$ $B \in \mathbb{R}^ {n \times p} $，如果$m$和$q$不相等，矩阵乘积$BA$甚至不存在！）</p></li></ul><p>如果您不熟悉这些属性，请花点时间自己验证它们。 例如，为了检查矩阵乘法的相关性，假设$A \in \mathbb{R}^ {m \times n}，$ $B \in \mathbb{R}^ {n \times p} $，$C \in \mathbb{R}^ {p \times q}$。 注意$AB \in \mathbb{R}^ {m \times p}$，所以$(AB)C \in \mathbb{R}^ {m \times q}$。 类似地，$BC \in \mathbb{R}^ {n \times q}$，所以$A(BC) \in \mathbb{R}^ {m \times q}$。 因此，所得矩阵的维度一致。 为了表明矩阵乘法是相关的，足以检查$(AB)C $的第$(i,j)$个元素是否等于$A(BC)$的第$(i,j)$个元素。 我们可以使用矩阵乘法的定义直接验证这一点：</p><script type="math/tex; mode=display">\begin{aligned}((A B) C)_{i j} &=\sum_{k=1}^{p}(A B)_{i k} C_{k j}=\sum_{k=1}^{p}\left(\sum_{l=1}^{n} A_{i l} B_{l k}\right) C_{k j} \\ &=\sum_{k=1}^{p}\left(\sum_{l=1}^{n} A_{i l} B_{l k} C_{k j}\right)=\sum_{l=1}^{n}\left(\sum_{k=1}^{p} A_{i l} B_{l k} C_{k j}\right) \\ &=\sum_{l=1}^{n} A_{i l}\left(\sum_{k=1}^{p} B_{l k} C_{k j}\right)=\sum_{l=1}^{n} A_{i l}(B C)_{l j}=(A(B C))_{i j} \end{aligned}</script><h3 id="3-运算和属性"><a href="#3-运算和属性" class="headerlink" title="3 运算和属性"></a>3 运算和属性</h3><p>在本节中，我们介绍矩阵和向量的几种运算和属性。 希望能够为您复习大量此类内容，这些笔记可以作为这些主题的参考。</p><h4 id="3-1-单位矩阵和对角矩阵"><a href="#3-1-单位矩阵和对角矩阵" class="headerlink" title="3.1 单位矩阵和对角矩阵"></a>3.1 单位矩阵和对角矩阵</h4><p><strong>单位矩阵</strong>,$I \in \mathbb{R}^{n \times n} $，它是一个方阵，对角线的元素是1，其余元素都是0：</p><script type="math/tex; mode=display">I_{i j}=\left\{\begin{array}{ll}{1} & {i=j} \\ {0} & {i \neq j}\end{array}\right.</script><p>对于所有$A \in \mathbb{R}^ {m \times n}$，有：</p><script type="math/tex; mode=display">AI = A = IA</script><p>注意，在某种意义上，单位矩阵的表示法是不明确的，因为它没有指定$I$的维数。通常，$I$的维数是从上下文推断出来的，以便使矩阵乘法成为可能。 例如，在上面的等式中，$AI = A$中的I是$n\times n$矩阵，而$A = IA$中的$I$是$m\times m$矩阵。</p><p>对角矩阵是一种这样的矩阵：对角线之外的元素全为0。对角阵通常表示为：$D= diag(d_1, d_2, . . . , d_n)$，其中：</p><script type="math/tex; mode=display">D_{i j}=\left\{\begin{array}{ll}{d_{i}} & {i=j} \\ {0} & {i \neq j}\end{array}\right.</script><p>很明显：单位矩阵$ I = diag(1, 1, . . . , 1)$。</p><h4 id="3-2-转置"><a href="#3-2-转置" class="headerlink" title="3.2 转置"></a>3.2 转置</h4><p>矩阵的转置是指翻转矩阵的行和列。</p><p>给定一个矩阵：</p><p>$A \in \mathbb{R}^ {m \times n}$, 它的转置为$n \times m$的矩阵$A^T \in \mathbb{R}^ {n \times m}$ ，其中的元素为：</p><script type="math/tex; mode=display">(A^T)_{ij} = A_{ji}</script><p>事实上，我们在描述行向量时已经使用了转置，因为列向量的转置自然是行向量。</p><p>转置的以下属性很容易验证：</p><ul><li>$(A^T )^T = A$</li><li>$ (AB)^T = B^T A^T$</li><li>$(A + B)^T = A^T + B^T$</li></ul><h4 id="3-3-对称矩阵"><a href="#3-3-对称矩阵" class="headerlink" title="3.3 对称矩阵"></a>3.3 对称矩阵</h4><p>如果$A =  A^T$，则矩阵$A \in \mathbb{R}^ {n \times n}$是对称矩阵。 如果$ A =  -  A^T$，它是反对称的。 很容易证明，对于任何矩阵$A \in \mathbb{R}^ {n \times n}$，矩阵$A  +  A^ T$是对称的，矩阵$A -A^T$是反对称的。 由此得出，任何方矩阵$A \in \mathbb{R}^ {n \times n}$可以表示为对称矩阵和反对称矩阵的和，所以：</p><script type="math/tex; mode=display">A=\frac{1}{2}(A+A^T)+\frac{1}{2}(A-A^T)</script><p>上面公式的右边的第一个矩阵是对称矩阵，而第二个矩阵是反对称矩阵。 事实证明，对称矩阵在实践中用到很多，它们有很多很好的属性，我们很快就会看到它们。<br>通常将大小为$n$的所有对称矩阵的集合表示为$\mathbb{S}^n$，因此$A \in \mathbb{S}^n$意味着$A$是对称的$n\times n$矩阵;</p><h4 id="3-4-矩阵的迹"><a href="#3-4-矩阵的迹" class="headerlink" title="3.4 矩阵的迹"></a>3.4 矩阵的迹</h4><p>方矩阵$A \in \mathbb{R}^ {n \times n}$的迹，表示为$\operatorname{tr} (A)$（或者只是$\operatorname{tr} A$，如果括号显然是隐含的），是矩阵中对角元素的总和：</p><script type="math/tex; mode=display">\operatorname{tr} A=\sum_{i=1}^{n} A_{i i}</script><p>如<strong>CS229</strong>讲义中所述，迹具有以下属性（如下所示）：</p><ul><li><p>对于矩阵$A \in \mathbb{R}^ {n \times n}$，则：$\operatorname{tr}A =\operatorname{tr}A^T$</p></li><li><p>对于矩阵$A,B \in \mathbb{R}^ {n \times n}$，则：$\operatorname{tr}(A + B) = \operatorname{tr}A + \operatorname{tr}B$</p></li><li><p>对于矩阵$A \in \mathbb{R}^ {n \times n}$，$ t \in \mathbb{R}$，则：$\operatorname{tr}(tA) = t\operatorname{tr}A$.</p></li><li><p>对于矩阵 $A$, $B$，$AB$ 为方阵, 则：$\operatorname{tr}AB = \operatorname{tr}BA$</p></li><li><p>对于矩阵 $A$, $B$, $C$, $ABC$为方阵, 则：$\operatorname{tr}ABC = \operatorname{tr}BCA=\operatorname{tr}CAB$, 同理，更多矩阵的积也是有这个性质。</p></li></ul><p>作为如何证明这些属性的示例，我们将考虑上面给出的第四个属性。 假设$A \in \mathbb{R}^ {m \times n}$和$B \in \mathbb{R}^ {n \times m}$（因此$AB \in \mathbb{R}^ {m \times m}$是方阵）。 观察到$BA \in \mathbb{R}^ {n \times n}$也是一个方阵，因此对它们进行迹的运算是有意义的。 要证明$\operatorname{tr}AB = \operatorname{tr}BA$，请注意：</p><script type="math/tex; mode=display">\begin{aligned} \operatorname{tr} A B &=\sum_{i=1}^{m}(A B)_{i i}=\sum_{i=1}^{m}\left(\sum_{j=1}^{n} A_{i j} B_{j i}\right) \\ &=\sum_{i=1}^{m} \sum_{j=1}^{n} A_{i j} B_{j i}=\sum_{j=1}^{n} \sum_{i=1}^{m} B_{j i} A_{i j} \\ &=\sum_{j=1}^{n}\left(\sum_{i=1}^{m} B_{j i} A_{i j}\right)=\sum_{j=1}^{n}(B A)_{j j}=\operatorname{tr} B A \end{aligned}</script><p>这里，第一个和最后两个等式使用迹运算符和矩阵乘法的定义，重点在第四个等式，使用标量乘法的可交换性来反转每个乘积中的项的顺序，以及标量加法的可交换性和相关性，以便重新排列求和的顺序。</p><h4 id="3-5-范数"><a href="#3-5-范数" class="headerlink" title="3.5 范数"></a>3.5 范数</h4><p>向量的范数$|x|$是非正式度量的向量的“长度” 。 例如，我们有常用的欧几里德或$\ell_{2}$范数，</p><script type="math/tex; mode=display">\|x\|_{2}=\sqrt{\sum_{i=1}^{n} x_{i}^{2}}</script><p>注意：$|x|_{2}^{2}=x^{T} x$</p><p>更正式地，范数是满足4个属性的函数（$f : \mathbb{R}^{n} \rightarrow \mathbb{R}$）：</p><ol><li>对于所有的 $x \in \mathbb{R}^ {n}$, $f(x) \geq 0 $(非负).</li><li>当且仅当$x = 0$ 时，$f(x) = 0$ (明确性).</li><li>对于所有$x \in \mathbb{R}^ {n}$,$t\in \mathbb{R}$，则 $f(tx) = \left| t \right|f(x)$ (正齐次性).</li><li>对于所有 $x,y \in \mathbb{R}^ {n}$, $f(x + y) \leq f(x) + f(y)$ (三角不等式)</li></ol><p>其他范数的例子是$\ell_1$范数:</p><script type="math/tex; mode=display">\|x\|_{1}=\sum_{i=1}^{n}\left|x_{i}\right|</script><p>和$\ell_{\infty }$范数：</p><script type="math/tex; mode=display">\|x\|_{\infty}=\max _{i}\left|x_{i}\right|</script><p>事实上，到目前为止所提出的所有三个范数都是$\ell_p$范数族的例子，它们由实数$p \geq 1$参数化，并定义为：</p><script type="math/tex; mode=display">\|x\|_{p}=\left(\sum_{i=1}^{n}\left|x_{i}\right|^{p}\right)^{1 / p}</script><p>也可以为矩阵定义范数，例如<strong>Frobenius</strong>范数:</p><script type="math/tex; mode=display">\|A\|_{F}=\sqrt{\sum_{i=1}^{m} \sum_{j=1}^{n} A_{i j}^{2}}=\sqrt{\operatorname{tr}\left(A^{T} A\right)}</script><p>许多其他更多的范数，但它们超出了这个复习材料的范围。</p><h4 id="3-6-线性相关性和秩"><a href="#3-6-线性相关性和秩" class="headerlink" title="3.6 线性相关性和秩"></a>3.6 线性相关性和秩</h4><p>一组向量${x_1,x_2, \cdots x_n} \in \mathbb{R}$， 如果没有向量可以表示为其余向量的线性组合，则称称该向量是线性无相关的。 相反，如果属于该组的一个向量可以表示为其余向量的线性组合，则称该向量是线性相关的。 也就是说，如果：</p><script type="math/tex; mode=display">x_{n}=\sum_{i=1}^{n-1} \alpha_{i} x_{i}</script><p>对于某些标量值$\alpha_1,\cdots \alpha_n-1 \in \mathbb{R}$，要么向量$x_1,x_2, \cdots x_n$是线性相关的; 否则，向量是线性无关的。 例如，向量：</p><script type="math/tex; mode=display">x_{1}=\left[\begin{array}{l}{1} \\ {2} \\ {3}\end{array}\right] \quad x_{2}=\left[\begin{array}{c}{4} \\ {1} \\ {5}\end{array}\right] \quad x_{3}=\left[\begin{array}{c}{2} \\ {-3} \\ {-1}\end{array}\right]</script><p>是线性相关的，因为：$x_3=-2x_1+x_2$。</p><p>矩阵$A  \in \mathbb{R}^{m \times n}$的<strong>列秩</strong>是构成线性无关集合的$A$的最大列子集的大小。 由于术语的多样性，这通常简称为$A$的线性无关列的数量。同样，行秩是构成线性无关集合的$A$的最大行数。 对于任何矩阵$A  \in \mathbb{R}^{m \times n}$，事实证明$A$的列秩等于$A$的行秩（尽管我们不会证明这一点），因此两个量统称为$A$的<strong>秩</strong>，用 $\text{rank}(A)$表示。 以下是秩的一些基本属性：</p><ul><li>对于  $A  \in \mathbb{R}^{m \times n}$，$\text{rank}(A) \leq min(m, n)$，如果$ \text(A) = \text{min} (m, n)$，则： $A$ 被称作<strong>满秩</strong>。</li><li>对于  $A  \in \mathbb{R}^{m \times n}$， $\text{rank}(A) = \text{rank}(A^T)$</li><li>对于  $A  \in \mathbb{R}^{m \times n}$,$B  \in \mathbb{R}^{n \times p}$ ,$\text{rank}(AB) \leq \text{min} ( \text{rank}(A), \text{rank}(B))$</li><li>对于  $A,B \in \mathbb{R}^{m \times n}$，$\text{rank}(A + B) \leq \text{rank}(A) + \text{rank}(B)$</li></ul><h4 id="3-7-方阵的逆"><a href="#3-7-方阵的逆" class="headerlink" title="3.7 方阵的逆"></a>3.7 方阵的逆</h4><p>方阵$A  \in \mathbb{R}^{n \times n}$的倒数表示为$A^{-1}$，并且是这样的独特矩阵:</p><script type="math/tex; mode=display">A^{-1}A=I=AA^{-1}</script><p>请注意，并非所有矩阵都具有逆。 例如，非方形矩阵根据定义没有逆。 然而，对于一些方形矩阵$A$，可能仍然存在$A^{-1}$可能不存在的情况。 特别是，如果$A^{-1}$存在，我们说$A$是<strong>可逆</strong>的或<strong>非奇异</strong>的，否则就是<strong>不可逆</strong>或<strong>奇异</strong>的。<br>为了使方阵A具有逆$A^{-1}$，则$A$必须是满秩。 我们很快就会发现，除了满秩之外，还有许多其它的充分必要条件。<br>以下是逆的属性; 假设$A,B  \in \mathbb{R}^{n \times n}$，而且是非奇异的：</p><ul><li>$(A^{-1})^{-1} = A$</li><li>$(AB)^{-1} = B^{-1}A^{-1}$</li><li>$(A^{-1})^{T} =(A^{T})^{-1} $因此，该矩阵通常表示为$A^{-T}$。<br>作为如何使用逆的示例，考虑线性方程组，$Ax = b$，其中$A  \in \mathbb{R}^{n \times n}$，$x,b\in \mathbb{R}$， 如果$A$是非奇异的（即可逆的），那么$x = A^{-1}b$。 （如果$A  \in \mathbb{R}^{m \times n}$不是方阵，这公式还有用吗？）</li></ul><h4 id="3-8-正交阵"><a href="#3-8-正交阵" class="headerlink" title="3.8 正交阵"></a>3.8 正交阵</h4><p>如果 $x^Ty=0$，则两个向量$x,y\in \mathbb{R}^{n}$ 是<strong>正交</strong>的。如果$|x|_2=1$，则向量$x\in \mathbb{R}^{n}$ 被归一化。如果一个方阵$U\in \mathbb{R}^{n \times n}$的所有列彼此正交并被归一化（这些列然后被称为正交），则方阵$U$是正交阵（注意在讨论向量时的意义不一样）。</p><p>它可以从正交性和正态性的定义中得出:</p><script type="math/tex; mode=display">U^ TU = I = U U^T</script><p>换句话说，正交矩阵的逆是其转置。 注意，如果$U$不是方阵 :即，$U\in \mathbb{R}^{m \times n}$，$n &lt;m$  ，但其列仍然是正交的，则$U^TU = I$，但是$UU^T \neq I$。我们通常只使用术语”正交”来描述先前的情况 ，其中$U$是方阵。<br>正交矩阵的另一个好的特性是在具有正交矩阵的向量上操作不会改变其欧几里德范数，即:</p><script type="math/tex; mode=display">\|U x\|_{2}=\|x\|_{2}</script><p>对于任何 $x\in \mathbb{R}$ , $U\in \mathbb{R}^{n}$是正交的。</p><h4 id="3-9-矩阵的值域和零空间"><a href="#3-9-矩阵的值域和零空间" class="headerlink" title="3.9 矩阵的值域和零空间"></a>3.9 矩阵的值域和零空间</h4><p>一组向量$\{x_{1}, \ldots x_{n}\}$是可以表示为$\{x_{1}, \ldots x_{n}\}$的线性组合的所有向量的集合。 即：</p><script type="math/tex; mode=display">\operatorname{span}\left(\left\{x_{1}, \ldots x_{n}\right\}\right)=\left\{v : v=\sum_{i=1}^{n} \alpha_{i} x_{i}, \quad \alpha_{i} \in \mathbb{R}\right\}</script><p>可以证明，如果$\{x_{1}, \ldots x_{n}\}$是一组$n$个线性无关的向量，其中每个$x_i \in \mathbb{R}^{n}$，则$\text{span}(\{x_{1}, \ldots x_{n}\})=\mathbb{R}^{n}$。 换句话说，任何向量$v\in \mathbb{R}^{n}$都可以写成$x_1$到$x_n$的线性组合。</p><p>向量$y\in \mathbb{R}^{m}$投影到$\{x_{1}, \ldots x_{n}\}$（这里我们假设$x_i \in \mathbb{R}^{m}$）得到向量$v \in \operatorname{span}(\{x_{1}, \ldots, x_{n}\})$，由欧几里德范数$|v  -  y|_2$可以得知，这样$v$尽可能接近$y$。</p><p>我们将投影表示为$\operatorname{Proj}\left(y ;\left\{x_{1}, \ldots x_{n}\right\}\right)$，并且可以将其正式定义为:</p><script type="math/tex; mode=display">\operatorname{Proj}\left(y ;\left\{x_{1}, \ldots x_{n}\right\}\right)=\operatorname{argmin}_{v \in \operatorname{span}\left(\left\{x_{1}, \ldots, x_{n}\right\}\right)}\|y-v\|_{2}</script><p>矩阵$A\in \mathbb{R}^{m \times n}$的值域（有时也称为列空间），表示为$\mathcal{R}(A)$，是$A$列的跨度。换句话说，</p><script type="math/tex; mode=display">\mathcal{R}(A)=\left\{v \in \mathbb{R}^{m} : v=A x, x \in \mathbb{R}^{n}\right\}</script><p>做一些技术性的假设（即$A$是满秩且$n &lt;m$），向量$y \in \mathbb{R}^{m}$到$A$的范围的投影由下式给出:</p><script type="math/tex; mode=display">\operatorname{Proj}(y ; A)=\operatorname{argmin}_{v \in \mathcal{R}(A)}\|v-y\|_{2}=A\left(A^{T} A\right)^{-1} A^{T} y</script><p>这个最后的方程应该看起来非常熟悉，因为它几乎与我们在课程中（我们将很快再次得出）得到的公式：用于参数的最小二乘估计一样。 看一下投影的定义，显而易见，这实际上是我们在最小二乘问题中最小化的目标（除了范数的平方这里有点不一样，这不会影响找到最优解），所以这些问题自然是非常相关的。 </p><p>当$A$只包含一列时，$a \in \mathbb{R}^{m}$，这给出了向量投影到一条线上的特殊情况：</p><script type="math/tex; mode=display">\operatorname{Proj}(y ; a)=\frac{a a^{T}}{a^{T} a} y</script><p>一个矩阵$A\in \mathbb{R}^{m \times n}$的零空间 $\mathcal{N}(A)$ 是所有乘以$A$时等于0向量的集合，即：</p><script type="math/tex; mode=display">\mathcal{N}(A)=\left\{x \in \mathbb{R}^{n} : A x=0\right\}</script><p>注意，$\mathcal{R}(A)$中的向量的大小为$m$，而 $\mathcal{N}(A)$ 中的向量的大小为$n$，因此$\mathcal{R}(A^T)$和 $\mathcal{N}(A)$ 中的向量的大小均为$\mathbb{R}^{n}$。 事实上，还有很多例子。 证明：</p><script type="math/tex; mode=display">\left\{w : w=u+v, u \in \mathcal{R}\left(A^{T}\right), v \in \mathcal{N}(A)\right\}=\mathbb{R}^{n} \text { and } \mathcal{R}\left(A^{T}\right) \cap \mathcal{N}(A)=\{\mathbf{0}\}</script><p>换句话说，$\mathcal{R}(A^T)$和 $\mathcal{N}(A)$ 是不相交的子集，它们一起跨越$\mathbb{R}^{n}$的整个空间。 这种类型的集合称为<strong>正交补</strong>，我们用$\mathcal{R}(A^T)= \mathcal{N}(A)^{\perp}$表示。</p><h4 id="3-10-行列式"><a href="#3-10-行列式" class="headerlink" title="3.10 行列式"></a>3.10 行列式</h4><p>一个方阵$A  \in \mathbb{R}^{n \times n}$的行列式是函数$\text {det}$：$\mathbb{R}^{n \times n} \rightarrow \mathbb{R}^{n} $，并且表示为$\left| A \right|$。 或者$\text{det} A$（有点像迹运算符，我们通常省略括号）。 从代数的角度来说，我们可以写出一个关于$A$行列式的显式公式。 因此，我们首先提供行列式的几何解释，然后探讨它的一些特定的代数性质。</p><p>给定一个矩阵：</p><script type="math/tex; mode=display">\left[\begin{array}{cccc}{-} & {a_{1}^{T}}  & {-} \\ {-} & {a_{2}^{T}} & {-} \\ {} & {\vdots} & {} \\  {-} & {a_{n}^{T}} & {-}\end{array}\right]</script><p>考虑通过采用$A$行向量$a_{1}, \ldots a_{n}\in  \mathbb{R}^{n}$的所有可能线性组合形成的点$S \subset \mathbb{R}^{n}$的集合，其中线性组合的系数都在0和1之间; 也就是说，集合$S$是$\text{span}(\{a_{1}, \ldots a_{n}\})$受到系数$a_{1}, \ldots a_{n}$的限制的线性组合，$\alpha_1, \cdots ,\alpha_n$满足$0 \leq \alpha_{i} \leq 1, i=1, \ldots, n$。从形式上看，</p><script type="math/tex; mode=display">S=\left\{v \in \mathbb{R}^{n} : v=\sum_{i=1}^{n} \alpha_{i} a_{i} \text { where } 0 \leq \alpha_{i} \leq 1, i=1, \ldots, n\right\}</script><p>事实证明，$A$的行列式的绝对值是对集合$S$的“体积”的度量。</p><p>比方说：一个$2 \times2$的矩阵(4)：</p><script type="math/tex; mode=display">A=\left[\begin{array}{ll}{1} & {3} \\ {3} & {2}\end{array}\right]</script><p>它的矩阵的行是：</p><script type="math/tex; mode=display">a_{1}=\left[\begin{array}{l}{1} \\ {3}\end{array}\right] \quad a_{2}=\left[\begin{array}{l}{3} \\ {2}\end{array}\right]</script><p>对应于这些行对应的集合$S$如图1所示。对于二维矩阵，$S$通常具有平行四边形的形状。 在我们的例子中，行列式的值是$\left| A \right| = -7$（可以使用本节后面显示的公式计算），因此平行四边形的面积为7。（请自己验证！）</p><p>在三维中，集合$S$对应于一个称为平行六面体的对象（一个有倾斜边的三维框，这样每个面都有一个平行四边形）。行定义$S$的$3×3$矩阵S的行列式的绝对值给出了平行六面体的三维体积。在更高的维度中，集合$S$是一个称为$n$维平行切的对象。</p><p><img src="images/fig1.png" alt=""></p><p>图1：（4）中给出的$2×2$矩阵$A$的行列式的图示。 这里，$a_1$和$a_2$是对应于$A$行的向量，并且集合$S$对应于阴影区域（即，平行四边形）。 这个行列式的绝对值，$\left| \text{det} A \right| = 7$，即平行四边形的面积。</p><p>在代数上，行列式满足以下三个属性（所有其他属性都遵循这些属性，包括通用公式）：</p><ol><li><p>恒等式的行列式为1, $\left| I \right|= 1$（几何上，单位超立方体的体积为1）。</p></li><li><p>给定一个矩阵 $A  \in \mathbb{R}^{n \times n}$, 如果我们将$A$中的一行乘上一个标量$t  \in \mathbb{R}$，那么新矩阵的行列式是$t\left| A \right|$</p><script type="math/tex; mode=display">\left|\left[\begin{array}{ccc}{-} & {t a_{1}^{T}} & {-} \\ {-} & {a_{2}^{T}} & {-} \\ {} & {\vdots} & {} \\ {} & {a_{m}^{T}} & {-}\end{array}\right]\right|=t|A|</script><p>几何上，将集合$S$的一个边乘以系数$t$，体积也会增加一个系数$t$。</p></li><li><p>如果我们交换任意两行在$a_i^T$和$a_j^T$，那么新矩阵的行列式是$-\left| A \right|$，例如：</p><script type="math/tex; mode=display">\left|\left[\begin{array}{ccc}{-} & {a_{2}^{T}} & {-} \\ {-} & {a_{1}^{T}} & {-} \\ {} & {\vdots} & {} \\ {-} & {a_{m}^{T}} & {-}\end{array}\right]\right|=-|A|</script><p>你一定很奇怪，满足上述三个属性的函数的存在并不多。事实上，这样的函数确实存在，而且是唯一的（我们在这里不再证明了）。</p></li></ol><p>从上述三个属性中得出的几个属性包括：</p><ul><li>对于 $A  \in \mathbb{R}^{n \times n}$, $\left| A \right| = \left| A^T \right|$</li><li>对于 $A,B \in \mathbb{R}^{n \times n}$, $\left| AB \right|= \left| A \right|\left| B \right|$</li><li>对于 $A  \in \mathbb{R}^{n \times n}$, 有且只有当$A$是奇异的（比如不可逆） ，则：$\left| A \right|= 0$</li><li>对于 $A  \in \mathbb{R}^{n \times n}$ 同时，$A$为非奇异的，则：$\left| A ^{−1}\right| = 1/\left| A \right|$</li></ul><p>在给出行列式的一般定义之前，我们定义，对于$A  \in \mathbb{R}^{n \times n}$，$A_{\backslash i, \backslash j}\in \mathbb{R}^{(n-1) \times (n-1)}$是由于删除第$i$行和第$j$列而产生的矩阵。 行列式的一般（递归）公式是：</p><script type="math/tex; mode=display">\begin{aligned}|A| &=\sum_{i=1}^{n}(-1)^{i+j} a_{i j}\left|A_{\backslash i, \backslash j}\right| \quad(\text { for any } j \in 1, \ldots, n) \\ &=\sum_{j=1}^{n}(-1)^{i+j} a_{i j}\left|A_{\backslash i, \backslash j}\right| \quad(\text { for any } i \in 1, \ldots, n) \end{aligned}</script><p>对于 $A  \in \mathbb{R}^{1 \times 1}$，初始情况为$\left| A \right|= a_{11}$。如果我们把这个公式完全展开为 $A  \in \mathbb{R}^{n \times n}$，就等于$n!$（$n$阶乘）不同的项。因此，对于大于$3×3$的矩阵，我们几乎没有明确地写出完整的行列式方程。然而，$3×3$大小的矩阵的行列式方程是相当常见的，建议好好地了解它们：</p><script type="math/tex; mode=display">\left|\left[a_{11}\right]\right|=a_{11}</script><script type="math/tex; mode=display">\left|\left[\begin{array}{ll}{a_{11}} & {a_{12}} \\ {a_{21}} & {a_{22}}\end{array}\right]\right|=a_{11} a_{22}-a_{12} a_{21}</script><script type="math/tex; mode=display">\left|\left[\begin{array}{l}{a_{11}} & {a_{12}} & {a_{13}} \\ {a_{21}} & {a_{22}} & {a_{23}} \\ {a_{31}} & {a_{32}} & {a_{33}}\end{array}\right]\right|=\quad \begin{array}{c}{a_{11} a_{22} a_{33}+a_{12} a_{23} a_{31}+a_{13} a_{21} a_{32}} \\\quad \quad {-a_{11} a_{23} a_{32}-a_{12} a_{21} a_{33}-a_{13} a_{22} a_{31}} \\ {}\end{array}</script><p>矩阵$A  \in \mathbb{R}^{n \times n}$的经典伴随矩阵（通常称为伴随矩阵）表示为$\operatorname{adj}(A)$，并定义为：</p><script type="math/tex; mode=display">\operatorname{adj}(A) \in \mathbb{R}^{n \times n}, \quad(\operatorname{adj}(A))_{i j}=(-1)^{i+j}\left|A_{\backslash j, \backslash i}\right|</script><p>（注意索引$A_{\backslash j, \backslash i}$中的变化）。可以看出，对于任何非奇异$A  \in \mathbb{R}^{n \times n}$，</p><script type="math/tex; mode=display">A^{-1}=\frac{1}{|A|} \operatorname{adj}(A)</script><p>虽然这是一个很好的“显式”的逆矩阵公式，但我们应该注意，从数字上讲，有很多更有效的方法来计算逆矩阵。</p><h4 id="3-11-二次型和半正定矩阵"><a href="#3-11-二次型和半正定矩阵" class="headerlink" title="3.11 二次型和半正定矩阵"></a>3.11 二次型和半正定矩阵</h4><p>给定方矩阵$A  \in \mathbb{R}^{n \times n}$和向量$x \in \mathbb{R}^{n}$，标量值$x^T Ax$被称为二次型。 写得清楚些，我们可以看到：</p><script type="math/tex; mode=display">x^{T} A x=\sum_{i=1}^{n} x_{i}(A x)_{i}=\sum_{i=1}^{n} x_{i}\left(\sum_{j=1}^{n} A_{i j} x_{j}\right)=\sum_{i=1}^{n} \sum_{j=1}^{n} A_{i j} x_{i} x_{j}</script><p>注意：</p><script type="math/tex; mode=display">x^{T} A x=\left(x^{T} A x\right)^{T}=x^{T} A^{T} x=x^{T}\left(\frac{1}{2} A+\frac{1}{2} A^{T}\right) x</script><p>第一个等号的是因为是标量的转置与自身相等，而第二个等号是因为是我们平均两个本身相等的量。 由此，我们可以得出结论，只有$A$的对称部分有助于形成二次型。 出于这个原因，我们经常隐含地假设以二次型出现的矩阵是对称阵。<br>我们给出以下定义：</p><ul><li><p>对于所有非零向量$x \in \mathbb{R}^n$，$x^TAx&gt;0$，对称阵$A \in \mathbb{S}^n$为<strong>正定</strong>（<strong>positive definite,PD</strong>）。这通常表示为$A\succ0$（或$A&gt;0$），并且通常将所有正定矩阵的集合表示为$\mathbb{S}_{++}^n$。</p></li><li><p>对于所有向量$x^TAx\geq 0$，对称矩阵$A \in \mathbb{S}^n$是<strong>半正定</strong>(<strong>positive semidefinite ,PSD</strong>)。 这写为（或$A \succeq 0$仅$A≥0$），并且所有半正定矩阵的集合通常表示为$\mathbb{S}_+^n$。</p></li><li><p>同样，对称矩阵$A \in \mathbb{S}^n$是<strong>负定</strong>（<strong>negative definite,ND</strong>），如果对于所有非零$x \in \mathbb{R}^n$，则$x^TAx &lt;0$表示为$A\prec0$（或$A &lt;0$）。</p></li><li><p>类似地，对称矩阵$A \in \mathbb{S}^n$是<strong>半负定</strong>(<strong>negative semidefinite,NSD</strong>），如果对于所有$x \in \mathbb{R}^n$，则$x^TAx \leq 0$表示为$A\preceq 0$（或$A≤0$）。</p></li><li><p>最后，对称矩阵$A \in \mathbb{S}^n$是<strong>不定</strong>的，如果它既不是正半定也不是负半定，即，如果存在$x_1,x_2 \in \mathbb{R}^n$，那么$x_1^TAx_1&gt;0$且$x_2^TAx_2&lt;0$。</p></li></ul><p>很明显，如果$A$是正定的，那么$−A$是负定的，反之亦然。同样，如果$A$是半正定的，那么$−A$是是半负定的，反之亦然。如果果$A$是不定的，那么$−A$是也是不定的。</p><p>正定矩阵和负定矩阵的一个重要性质是它们总是满秩，因此是可逆的。为了了解这是为什么，假设某个矩阵$A \in \mathbb{S}^n$不是满秩。然后，假设$A$的第$j$列可以表示为其他$n-1$列的线性组合：</p><script type="math/tex; mode=display">a_{j}=\sum_{i \neq j} x_{i} a_{i}</script><p>对于某些$x_1,\cdots x_{j-1},x_{j + 1} ,\cdots ,x_n\in \mathbb{R}$。设$x_j = -1$，则：</p><script type="math/tex; mode=display">Ax=\sum_{i \neq j} x_{i} a_{i}=0</script><p>但这意味着对于某些非零向量$x$，$x^T Ax = 0$，因此$A$必须既不是正定也不是负定。如果$A$是正定或负定，则必须是满秩。<br>最后，有一种类型的正定矩阵经常出现，因此值得特别提及。 给定矩阵$A  \in \mathbb{R}^{m \times n}$（不一定是对称或偶数平方），矩阵$G = A^T A$（有时称为<strong>Gram矩阵</strong>）总是半正定的。 此外，如果$m\geq n$（同时为了方便起见，我们假设$A$是满秩），则$G = A^T A$是正定的。</p><h4 id="3-12-特征值和特征向量"><a href="#3-12-特征值和特征向量" class="headerlink" title="3.12 特征值和特征向量"></a>3.12 特征值和特征向量</h4><p>给定一个方阵$A \in\mathbb{R}^{n\times n}$，我们认为在以下条件下，$\lambda \in\mathbb{C}$是$A$的<strong>特征值</strong>，$x\in\mathbb{C}^n$是相应的<strong>特征向量</strong>：</p><script type="math/tex; mode=display">Ax=\lambda x,x \ne 0</script><p>直观地说，这个定义意味着将$A$乘以向量$x$会得到一个新的向量，该向量指向与$x$相同的方向，但按系数$\lambda$缩放。值得注意的是，对于任何特征向量$x\in\mathbb{C}^n$和标量$t\in\mathbb{C}$，$A(cx)=cAx=c\lambda x=\lambda(cx)$，$cx$也是一个特征向量。因此，当我们讨论与$\lambda$相关的<strong>特征向量</strong>时，我们通常假设特征向量被标准化为长度为1（这仍然会造成一些歧义，因为$x$和$−x$都是特征向量，但我们必须接受这一点）。</p><p>我们可以重写上面的等式来说明$(\lambda,x)$是$A$的特征值和特征向量的组合：</p><script type="math/tex; mode=display">(\lambda I-A)x=0,x \ne 0</script><p>但是$(\lambda I-A)x=0$只有当$(\lambda I-A)$有一个非空零空间时，同时$(\lambda I-A)$是奇异的，$x$才具有非零解，即：</p><script type="math/tex; mode=display">|(\lambda I-A)|=0</script><p>现在，我们可以使用行列式的先前定义将表达式$|(\lambda I-A)|$扩展为$\lambda$中的（非常大的）多项式，其中，$\lambda$的度为$n$。它通常被称为矩阵$A$的特征多项式。</p><p>然后我们找到这个特征多项式的$n$（可能是复数）根，并用$\lambda_1,\cdots,\lambda_n$表示。这些都是矩阵$A$的特征值，但我们注意到它们可能不明显。为了找到特征值$\lambda_i$对应的特征向量，我们只需解线性方程$(\lambda I-A)x=0$，因为$(\lambda I-A)$是奇异的，所以保证有一个非零解（但也可能有多个或无穷多个解）。</p><p>应该注意的是，这不是实际用于数值计算特征值和特征向量的方法（记住行列式的完全展开式有$n!$项），这是一个数学上的争议。</p><p>以下是特征值和特征向量的属性（所有假设在$A \in\mathbb{R}^{n\times n}$具有特征值$\lambda_1,\cdots,\lambda_n$的前提下）：</p><ul><li><p>$A$的迹等于其特征值之和</p><script type="math/tex; mode=display">\operatorname{tr} A=\sum_{i=1}^{n} \lambda_{i}</script></li><li><p>$A$的行列式等于其特征值的乘积</p><script type="math/tex; mode=display">|A|=\prod_{i=1}^{n} \lambda_{i}</script></li><li><p>$A$的秩等于$A$的非零特征值的个数</p></li><li><p>假设$A$非奇异，其特征值为$\lambda$和特征向量为$x$。那么$1/\lambda$是具有相关特征向量$x$的$A^{-1}$的特征值，即$A^{-1}x=(1/\lambda)x$。（要证明这一点，取特征向量方程，$Ax=\lambda x$，两边都左乘$A^{-1}$）</p></li><li><p>对角阵的特征值$d=diag(d_1，\cdots,d_n)$实际上就是对角元素$d_1，\cdots,d_n$</p></li></ul><h4 id="3-13-对称矩阵的特征值和特征向量"><a href="#3-13-对称矩阵的特征值和特征向量" class="headerlink" title="3.13 对称矩阵的特征值和特征向量"></a>3.13 对称矩阵的特征值和特征向量</h4><p>通常情况下，一般的方阵的特征值和特征向量的结构可以很细微地表示出来。<br>值得庆幸的是，在机器学习的大多数场景下，处理对称实矩阵就足够了，其处理的对称实矩阵的特征值和特征向量具有显着的特性。</p><p>在本节中，我们假设$A$是实对称矩阵, 具有以下属性：</p><ol><li><p>$A$的所有特征值都是实数。 我们用用$\lambda_1,\cdots,\lambda_n$表示。</p></li><li><p>存在一组特征向量$u_1，\cdots u_n$，对于所有$i$，$u_i$是具有特征值$\lambda_{i}$和$b$的特征向量。$u_1，\cdots u_n$是单位向量并且彼此正交。</p></li></ol><p>设$U$是包含$u_i$作为列的正交矩阵：</p><script type="math/tex; mode=display">U=\left[\begin{array}{cccc}{ |} & { |} & {} & { |} \\ {u_{1}} & {u_{2}} & {\cdots} & {u_{n}} \\ { |} & { |} & {} & { |}\end{array}\right]</script><p>设$\Lambda= diag(\lambda_1,\cdots,\lambda_n)$是包含$\lambda_1,\cdots,\lambda_n$作为对角线上的元素的对角矩阵。 使用2.3节的方程（2）中的矩阵 - 矩阵向量乘法的方法，我们可以验证：</p><script type="math/tex; mode=display">A U=\left[\begin{array}{cccc}{ |} & { |} & {} & { |} \\ {A u_{1}} & {A u_{2}} & {\cdots} & {A u_{n}} \\ { |} & { |} & {} & { |}\end{array}\right]=\left[\begin{array}{ccc}{ |} & { |} & { |} & { |}\\ {\lambda_{1} u_{1}} & {\lambda_{2} u_{2}} & {\cdots} & {\lambda_{n} u_{n}} \\ { |} & { |} & {|} & { |}\end{array}\right]=U \operatorname{diag}\left(\lambda_{1}, \ldots, \lambda_{n}\right)=U \Lambda</script><p>考虑到正交矩阵$U$满足$UU^T=I$，利用上面的方程，我们得到：</p><script type="math/tex; mode=display">A=AUU^T=U\Lambda U^T</script><p>这种$A$的新的表示形式为$U\Lambda U^T$，通常称为矩阵$A$的对角化。术语对角化是这样来的：通过这种表示，我们通常可以有效地将对称矩阵$A$视为对角矩阵 , 这更容易理解。关于由特征向量$U$定义的基础， 我们将通过几个例子详细说明。</p><p><strong>背景知识</strong>：代表另一个基的向量。</p><p>任何正交矩阵$U=\left[\begin{array}{cccc}{ |} &amp; { |} &amp; {} &amp; { |} \ {u_{1}} &amp; {u_{2}} &amp; {\cdots} &amp; {u_{n}} \ { |} &amp; { |} &amp; {} &amp; { |}\end{array}\right]$定义了一个新的属于$\mathbb {R}^{n}$的基（坐标系），意义如下：对于任何向量$x \in\mathbb{R}^{n}$都可以表示为$u_1，\cdots u_n$的线性组合，其系数为$x_1,\cdots x_n$：</p><script type="math/tex; mode=display">x=\hat x_1u_1+\cdots +\cdots \hat x_nu_n=U\hat x</script><p>在第二个等式中，我们使用矩阵和向量相乘的方法。 实际上，这种$\hat x$是唯一存在的:</p><script type="math/tex; mode=display">x=U \hat{x} \Leftrightarrow U^{T} x=\hat{x}</script><p>换句话说，向量$\hat x=U^Tx$可以作为向量$x$的另一种表示，与$U$定义的基有关。</p><p><strong>“对角化”矩阵向量乘法</strong>。 通过上面的设置，我们将看到左乘矩阵$A$可以被视为左乘以对角矩阵关于特征向量的基。 假设$x$是一个向量，$\hat x$表示$U$的基。设$z=Ax$为矩阵向量积。现在让我们计算关于$U$的基$z$：<br>然后，再利用$UU^T=U^T=I$和方程$A=AUU^T=U\Lambda U^T$，我们得到：</p><script type="math/tex; mode=display">\hat{z}=U^{T} z=U^{T} A x=U^{T} U \Lambda U^{T} x=\Lambda \hat{x}=\left[\begin{array}{c}{\lambda_{1} \hat{x}_{1}} \\ {\lambda_{2} \hat{x}_{2}} \\ {\vdots} \\ {\lambda_{n} \hat{x}_{n}}\end{array}\right]</script><p>我们可以看到，原始空间中的左乘矩阵$A$等于左乘对角矩阵$\Lambda$相对于新的基，即仅将每个坐标缩放相应的特征值。<br>在新的基上，矩阵多次相乘也变得简单多了。例如，假设$q=AAAx$。根据$A$的元素导出$q$的分析形式，使用原始的基可能是一场噩梦，但使用新的基就容易多了：</p><script type="math/tex; mode=display">\hat{q}=U^{T} q=U^{T} AAA x=U^{T} U \Lambda U^{T} U \Lambda U^{T} U \Lambda U^{T} x=\Lambda^{3} \hat{x}=\left[\begin{array}{c}{\lambda_{1}^{3} \hat{x}_{1}} \\ {\lambda_{2}^{3} \hat{x}_{2}} \\ {\vdots} \\ {\lambda_{n}^{3} \hat{x}_{n}}\end{array}\right]</script><p><strong>“对角化”二次型</strong>。作为直接的推论，二次型$x^TAx$也可以在新的基上简化。</p><script type="math/tex; mode=display">x^{T} A x=x^{T} U \Lambda U^{T} x=\hat{x} \Lambda \hat{x}=\sum_{i=1}^{n} \lambda_{i} \hat{x}_{i}^{2}</script><p>(回想一下，在旧的表示法中，$x^{T} A x=\sum_{i=1, j=1}^{n} x_{i} x_{j} A_{i j}$涉及一个$n^2$项的和，而不是上面等式中的$n$项。)利用这个观点，我们还可以证明矩阵$A$的正定性完全取决于其特征值的符号：</p><ol><li>如果所有的$\lambda_i&gt;0$，则矩阵$A$正定的，因为对于任意的$\hat x \ne 0$,$x^{T} A x=\sum_{i=1}^{n} \lambda_{i} \hat{x}_{i}^{2}&gt;0$</li><li>如果所有的$\lambda_i\geq 0$，则矩阵$A$是为正半定，因为对于任意的$\hat x $,$x^{T} A x=\sum_{i=1}^{n} \lambda_{i} \hat{x}_{i}^{2} \geq 0$</li><li>同样，如果所有$\lambda_i&lt;0$或$\lambda_i\leq 0$，则矩阵$A$分别为负定或半负定。</li><li>最后，如果$A$同时具有正特征值和负特征值，比如λ$\lambda_i&gt;0$和$\lambda_j<0$，那么它是不定的。这是因为如果我们让$\hat x$满足$\hat x_i=1$和$\hat x_k=0$，同时所有的$k\ne i$，那么$x^{T} A x=\sum_{i=1}^{n} \lambda_{i} \hat{x}_{i}^{2}>0$ ,我们让$\hat x$满足$\hat x_i=1$和$\hat x_k=0$，同时所有的$k\ne i$，那么$x^{T} A x=\sum_{i=1}^{n} \lambda_{i} \hat{x}_{i}^{2}&lt;0$ </li></ol><p>特征值和特征向量经常出现的应用是最大化矩阵的某些函数。特别是对于矩阵$A \in \mathbb{S}^{n}$，考虑以下最大化问题：</p><script type="math/tex; mode=display">\max _{x \in \mathbb{R}^{n}} \ x^{T} A x=\sum_{i=1}^{n} \lambda_{i} \hat{x}_{i}^{2} \quad \text { subject to }\|x\|_{2}^{2}=1</script><p>也就是说，我们要找到（范数1）的向量，它使二次型最大化。假设特征值的阶数为$\lambda_1 \geq \lambda _2 \geq \cdots \lambda_n$，此优化问题的最优值为$\lambda_1$，且与$\lambda_1$对应的任何特征向量$u_1$都是最大值之一。（如果$\lambda_1 &gt; \lambda_2$，那么有一个与特征值$\lambda_1$对应的唯一特征向量，它是上面那个优化问题的唯一最大值。）<br>我们可以通过使用对角化技术来证明这一点：注意，通过公式$|U x|_{2}=|x|_{2}$推出$|x|_{2}=|\hat{x}|_{2}$，并利用公式：</p><p>$x^{T} A x=x^{T} U \Lambda U^{T} x=\hat{x} \Lambda \hat{x}=\sum_{i=1}^{n} \lambda_{i} \hat{x}_{i}^{2}$，我们可以将上面那个优化问题改写为：</p><script type="math/tex; mode=display">\max _{\hat{x} \in \mathbb{R}^{n}}\ \hat{x}^{T} \Lambda \hat{x}=\sum_{i=1}^{n} \lambda_{i} \hat{x}_{i}^{2} \quad \text { subject to }\|\hat{x}\|_{2}^{2}=1</script><p>然后，我们得到目标的上界为$\lambda_1$：</p><script type="math/tex; mode=display">\hat{x}^{T} \Lambda \hat{x}=\sum_{i=1}^{n} \lambda_{i} \hat{x}_{i}^{2} \leq \sum_{i=1}^{n} \lambda_{1} \hat{x}_{i}^{2}=\lambda_{1}</script><p>此外，设置$\hat{x}=\left[\begin{array}{c}{1} \ {0} \ {\vdots} \ {0}\end{array}\right]$可让上述等式成立，这与设置$x=u_1$相对应。</p><h3 id="4-矩阵微积分"><a href="#4-矩阵微积分" class="headerlink" title="4.矩阵微积分"></a>4.矩阵微积分</h3><p>虽然前面章节中的主题通常包含在线性代数的标准课程中，但似乎很少涉及（我们将广泛使用）的一个主题是微积分扩展到向量设置展。尽管我们使用的所有实际微积分都是相对微不足道的，但是符号通常会使事情看起来比实际困难得多。 在本节中，我们将介绍矩阵微积分的一些基本定义，并提供一些示例。</p><h4 id="4-1-梯度"><a href="#4-1-梯度" class="headerlink" title="4.1 梯度"></a>4.1 梯度</h4><p>假设$f: \mathbb{R}^{m \times n} \rightarrow \mathbb{R}$是将维度为$m \times n$的矩阵$A\in \mathbb{R}^{m \times n}$作为输入并返回实数值的函数。 然后$f$的梯度（相对于$A\in \mathbb{R}^{m \times n}$）是偏导数矩阵，定义如下：</p><script type="math/tex; mode=display">\nabla_{A} f(A) \in \mathbb{R}^{m \times n}=\left[\begin{array}{cccc}{\frac{\partial f(A)}{\partial A_{11}}} & {\frac{\partial f(A)}{\partial A_{12}}} & {\cdots} & {\frac{\partial f(A)}{\partial A_{1n}}} \\ {\frac{\partial f(A)}{\partial A_{21}}} & {\frac{\partial f(A)}{\partial A_{22}}} & {\cdots} & {\frac{\partial f(A)}{\partial A_{2 n}}} \\ {\vdots} & {\vdots} & {\ddots} & {\vdots} \\ {\frac{\partial f(A)}{\partial A_{m 1}}} & {\frac{\partial f(A)}{\partial A_{m 2}}} & {\cdots} & {\frac{\partial f(A)}{\partial A_{m n}}}\end{array}\right]</script><p>即，$m \times n$矩阵:</p><script type="math/tex; mode=display">\left(\nabla_{A} f(A)\right)_{i j}=\frac{\partial f(A)}{\partial A_{i j}}</script><p>请注意，$\nabla_{A} f(A) $的维度始终与$A$的维度相同。特殊情况，如果$A$只是向量$A\in \mathbb{R}^{n}$，则</p><script type="math/tex; mode=display">\nabla_{x} f(x)=\left[\begin{array}{c}{\frac{\partial f(x)}{\partial x_{1}}} \\ {\frac{\partial f(x)}{\partial x_{2}}} \\ {\vdots} \\ {\frac{\partial f(x)}{\partial x_{n}}}\end{array}\right]</script><p>重要的是要记住，只有当函数是实值时，即如果函数返回标量值，才定义函数的梯度。例如，$A\in \mathbb{R}^{m \times n}$相对于$x$，我们不能取$Ax$的梯度，因为这个量是向量值。<br>它直接从偏导数的等价性质得出：</p><ul><li><p>$\nabla_{x}(f(x)+g(x))=\nabla_{x} f(x)+\nabla_{x} g(x)$</p></li><li><p>对于$t \in \mathbb{R}$ ，$\nabla_{x}(t f(x))=t \nabla_{x} f(x)$</p></li></ul><p>原则上，梯度是偏导数对多变量函数的自然延伸。然而，在实践中，由于符号的原因，使用梯度有时是很困难的。例如，假设$A\in \mathbb{R}^{m \times n}$是一个固定系数矩阵，假设$b\in \mathbb{R}^{m}$是一个固定系数向量。设$f: \mathbb{R}^{m \times n} \rightarrow \mathbb{R}$为$f(z)=z^Tz$定义的函数，因此$\nabla_{z}f(z)=2z$。但现在考虑表达式，</p><script type="math/tex; mode=display">\nabla f(Ax)</script><p>该表达式应该如何解释？ 至少有两种可能性：<br>1.在第一个解释中，回想起$\nabla_{z}f(z)=2z$。 在这里，我们将$\nabla f(Ax)$解释为评估点$Ax$处的梯度，因此:</p><script type="math/tex; mode=display">\nabla f(A x)=2(A x)=2 A x \in \mathbb{R}^{m}</script><p>2.在第二种解释中，我们将数量$f(Ax)$视为输入变量$x$的函数。 更正式地说，设$g(x) =f(Ax)$。 然后在这个解释中:</p><script type="math/tex; mode=display">\nabla f(A x)=\nabla_{x} g(x) \in \mathbb{R}^{n}</script><p>在这里，我们可以看到这两种解释确实不同。 一种解释产生$m$维向量作为结果，而另一种解释产生$n$维向量作为结果！ 我们怎么解决这个问题？</p><p>这里，关键是要明确我们要区分的变量。<br>在第一种情况下，我们将函数$f$与其参数$z$进行区分，然后替换参数$Ax$。<br>在第二种情况下，我们将复合函数$g(x)=f(Ax)$直接与$x$进行微分。</p><p>我们将第一种情况表示为$\nabla zf(Ax)$，第二种情况表示为$\nabla xf(Ax)$。</p><p>保持符号清晰是非常重要的，以后完成课程作业时候你就会发现。</p><h4 id="4-2-黑塞矩阵"><a href="#4-2-黑塞矩阵" class="headerlink" title="4.2 黑塞矩阵"></a>4.2 黑塞矩阵</h4><p>假设$f: \mathbb{R}^{n} \rightarrow \mathbb{R}$是一个函数，它接受$\mathbb{R}^{n}$中的向量并返回实数。那么关于$x$的<strong>黑塞矩阵</strong>（也有翻译作海森矩阵），写做：$\nabla_x ^2 f(A x)$，或者简单地说，$H$是$n \times n$矩阵的偏导数：</p><script type="math/tex; mode=display">\nabla_{x}^{2} f(x) \in \mathbb{R}^{n \times n}=\left[\begin{array}{cccc}{\frac{\partial^{2} f(x)}{\partial x_{1}^{2}}} & {\frac{\partial^{2} f(x)}{\partial x_{1} \partial x_{2}}} & {\cdots} & {\frac{\partial^{2} f(x)}{\partial x_{1} \partial x_{n}}} \\ {\frac{\partial^{2} f(x)}{\partial x_{2} \partial x_{1}}} & {\frac{\partial^{2} f(x)}{\partial x_{2}^{2}}} & {\cdots} & {\frac{\partial^{2} f(x)}{\partial x_{2} \partial x_{n}}} \\ {\vdots} & {\vdots} & {\ddots} & {\vdots} \\ {\frac{\partial^{2} f(x)}{\partial x_{n} \partial x_{1}}} & {\frac{\partial^{2} f(x)}{\partial x_{n} \partial x_{2}}} & {\cdots} & {\frac{\partial^{2} f(x)}{\partial x_{n}^{2}}}\end{array}\right]</script><p>换句话说，$\nabla_{x}^{2} f(x) \in \mathbb{R}^{n \times n}$，其：</p><script type="math/tex; mode=display">\left(\nabla_{x}^{2} f(x)\right)_{i j}=\frac{\partial^{2} f(x)}{\partial x_{i} \partial x_{j}}</script><p>注意：黑塞矩阵通常是对称阵：</p><script type="math/tex; mode=display">\frac{\partial^{2} f(x)}{\partial x_{i} \partial x_{j}}=\frac{\partial^{2} f(x)}{\partial x_{j} \partial x_{i}}</script><p>与梯度相似，只有当$f(x)$为实值时才定义黑塞矩阵。</p><p>很自然地认为梯度与向量函数的一阶导数的相似，而黑塞矩阵与二阶导数的相似（我们使用的符号也暗示了这种关系）。 这种直觉通常是正确的，但需要记住以下几个注意事项。<br>首先，对于一个变量$f: \mathbb{R} \rightarrow \mathbb{R}$的实值函数，它的基本定义：二阶导数是一阶导数的导数，即：</p><script type="math/tex; mode=display">\frac{\partial^{2} f(x)}{\partial x^{2}}=\frac{\partial}{\partial x} \frac{\partial}{\partial x} f(x)</script><p>然而，对于向量的函数，函数的梯度是一个向量，我们不能取向量的梯度，即:</p><script type="math/tex; mode=display">\nabla_{x} \nabla_{x} f(x)=\nabla_{x}\left[\begin{array}{c}{\frac{\partial f(x)}{\partial x_{1}}} \\ {\frac{\partial f(x)}{\partial x_{2}}} \\ {\vdots} \\ {\frac{\partial f(x)}{\partial x_{n}}}\end{array}\right]</script><p>上面这个表达式没有意义。 因此，黑塞矩阵不是梯度的梯度。 然而，下面这种情况却这几乎是正确的：如果我们看一下梯度$\left(\nabla_{x} f(x)\right)_{i}=\partial f(x) / \partial x_{i}$的第$i$个元素，并取关于于$x$的梯度我们得到：</p><script type="math/tex; mode=display">\nabla_{x} \frac{\partial f(x)}{\partial x_{i}}=\left[\begin{array}{c}{\frac{\partial^{2} f(x)}{\partial x_{i} \partial x_{1}}} \\ {\frac{\partial^{2} f(x)}{\partial x_{2} \partial x_{2}}} \\ {\vdots} \\ {\frac{\partial f(x)}{\partial x_{i} \partial x_{n}}}\end{array}\right]</script><p>这是黑塞矩阵第$i$行（列）,所以：</p><script type="math/tex; mode=display">\nabla_{x}^{2} f(x)=\left[\nabla_{x}\left(\nabla_{x} f(x)\right)_{1} \quad \nabla_{x}\left(\nabla_{x} f(x)\right)_{2} \quad \cdots \quad \nabla_{x}\left(\nabla_{x} f(x)\right)_{n}\right]</script><p>简单地说：我们可以说由于：$\nabla_{x}^{2} f(x)=\nabla_{x}\left(\nabla_{x} f(x)\right)^{T}$，只要我们理解，这实际上是取$\nabla_{x} f(x)$的每个元素的梯度，而不是整个向量的梯度。</p><p>最后，请注意，虽然我们可以对矩阵$A\in \mathbb{R}^{n}$取梯度，但对于这门课，我们只考虑对向量$x \in \mathbb{R}^{n}$取黑塞矩阵。<br>这会方便很多（事实上，我们所做的任何计算都不要求我们找到关于矩阵的黑森方程），因为关于矩阵的黑塞方程就必须对矩阵所有元素求偏导数$\partial^{2} f(A) /\left(\partial A_{i j} \partial A_{k \ell}\right)$，将其表示为矩阵相当麻烦。</p><h4 id="4-3-二次函数和线性函数的梯度和黑塞矩阵"><a href="#4-3-二次函数和线性函数的梯度和黑塞矩阵" class="headerlink" title="4.3 二次函数和线性函数的梯度和黑塞矩阵"></a>4.3 二次函数和线性函数的梯度和黑塞矩阵</h4><p>现在让我们尝试确定几个简单函数的梯度和黑塞矩阵。 应该注意的是，这里给出的所有梯度都是<strong>CS229</strong>讲义中给出的梯度的特殊情况。</p><p>对于$x \in \mathbb{R}^{n}$, 设$f(x)=b^Tx$  的某些已知向量$b \in \mathbb{R}^{n}$ ，则：</p><script type="math/tex; mode=display">f(x)=\sum_{i=1}^{n} b_{i} x_{i}</script><p>所以：</p><script type="math/tex; mode=display">\frac{\partial f(x)}{\partial x_{k}}=\frac{\partial}{\partial x_{k}} \sum_{i=1}^{n} b_{i} x_{i}=b_{k}</script><p>由此我们可以很容易地看出$\nabla_{x} b^{T} x=b$。 这应该与单变量微积分中的类似情况进行比较，其中$\partial /(\partial x) a x=a$。<br>现在考虑$A\in \mathbb{S}^{n}$的二次函数$f(x)=x^TAx$。 记住这一点：</p><script type="math/tex; mode=display">f(x)=\sum_{i=1}^{n} \sum_{j=1}^{n} A_{i j} x_{i} x_{j}</script><p>为了取偏导数，我们将分别考虑包括$x_k$和$x_2^k$因子的项：</p><script type="math/tex; mode=display">\begin{aligned} \frac{\partial f(x)}{\partial x_{k}} &=\frac{\partial}{\partial x_{k}} \sum_{i=1}^{n} \sum_{j=1}^{n} A_{i j} x_{i} x_{j} \\ &=\frac{\partial}{\partial x_{k}}\left[\sum_{i \neq k} \sum_{j \neq k} A_{i j} x_{i} x_{j}+\sum_{i \neq k} A_{i k} x_{i} x_{k}+\sum_{j \neq k} A_{k j} x_{k} x_{j}+A_{k k} x_{k}^{2}\right] \\ &=\sum_{i \neq k} A_{i k} x_{i}+\sum_{j \neq k} A_{k j} x_{j}+2 A_{k k} x_{k} \\ &=\sum_{i=1}^{n} A_{i k} x_{i}+\sum_{j=1}^{n} A_{k j} x_{j}=2 \sum_{i=1}^{n} A_{k i} x_{i} \end{aligned}</script><p>最后一个等式，是因为$A$是对称的（我们可以安全地假设，因为它以二次形式出现）。 注意，$\nabla_{x} f(x)$的第$k$个元素是$A$和$x$的第$k$行的内积。 因此，$\nabla_{x} x^{T} A x=2 A x$。 同样，这应该提醒你单变量微积分中的类似事实，即$\partial /(\partial x) a x^{2}=2 a x$。</p><p>最后，让我们来看看二次函数$f(x)=x^TAx$黑塞矩阵（显然，线性函数$b^Tx$的黑塞矩阵为零）。在这种情况下:</p><script type="math/tex; mode=display">\frac{\partial^{2} f(x)}{\partial x_{k} \partial x_{\ell}}=\frac{\partial}{\partial x_{k}}\left[\frac{\partial f(x)}{\partial x_{\ell}}\right]=\frac{\partial}{\partial x_{k}}\left[2 \sum_{i=1}^{n} A_{\ell i} x_{i}\right]=2 A_{\ell k}=2 A_{k \ell}</script><p>因此，应该很清楚$\nabla_{x}^2 x^{T} A x=2 A$，这应该是完全可以理解的（同样类似于$\partial^2 /(\partial x^2) a x^{2}=2a$的单变量事实）。</p><p>简要概括起来：</p><ul><li><p>$\nabla_{x} b^{T} x=b$ </p></li><li><p>$\nabla_{x} x^{T} A x=2 A x$ (如果$A$是对称阵)</p></li><li><p>$\nabla_{x}^2 x^{T} A x=2 A $  (如果$A$是对称阵)</p></li></ul><h4 id="4-4-最小二乘法"><a href="#4-4-最小二乘法" class="headerlink" title="4.4 最小二乘法"></a>4.4 最小二乘法</h4><p>让我们应用上一节中得到的方程来推导最小二乘方程。假设我们得到矩阵$A\in \mathbb{R}^{m \times n}$（为了简单起见，我们假设$A$是满秩）和向量$b\in \mathbb{R}^{m}$，从而使$b \notin \mathcal{R}(A)$。在这种情况下，我们将无法找到向量$x\in \mathbb{R}^{n}$，由于$Ax = b$，因此我们想要找到一个向量$x$，使得$Ax$尽可能接近 $b$，用欧几里德范数的平方$|A x-b|_{2}^{2} $来衡量。</p><p>使用公式$|x|^{2}=x^Tx$，我们可以得到：</p><script type="math/tex; mode=display">\begin{aligned}\|A x-b\|_{2}^{2} &=(A x-b)^{T}(A x-b) \\ &=x^{T} A^{T} A x-2 b^{T} A x+b^{T} b \end{aligned}</script><p>根据$x$的梯度，并利用上一节中推导的性质：</p><script type="math/tex; mode=display">\begin{aligned} \nabla_{x}\left(x^{T} A^{T} A x-2 b^{T} A x+b^{T} b\right) &=\nabla_{x} x^{T} A^{T} A x-\nabla_{x} 2 b^{T} A x+\nabla_{x} b^{T} b \\ &=2 A^{T} A x-2 A^{T} b \end{aligned}</script><p>将最后一个表达式设置为零，然后解出$x$，得到了正规方程：</p><script type="math/tex; mode=display">x = (A^TA)^{-1}A^Tb</script><p>这和我们在课堂上得到的相同。</p><h4 id="4-5-行列式的梯度"><a href="#4-5-行列式的梯度" class="headerlink" title="4.5 行列式的梯度"></a>4.5 行列式的梯度</h4><p>现在让我们考虑一种情况，我们找到一个函数相对于矩阵的梯度，也就是说，对于$A\in \mathbb{R}^{n \times n}$，我们要找到$\nabla_{A}|A|$。回想一下我们对行列式的讨论：</p><script type="math/tex; mode=display">|A|=\sum_{i=1}^{n}(-1)^{i+j} A_{i j}\left|A_{\backslash i, \backslash j}\right| \quad(\text { for any } j \in 1, \ldots, n)</script><p>所以：</p><script type="math/tex; mode=display">\frac{\partial}{\partial A_{k \ell}}|A|=\frac{\partial}{\partial A_{k \ell}} \sum_{i=1}^{n}(-1)^{i+j} A_{i j}\left|A_{\backslash i, \backslash j}\right|=(-1)^{k+\ell}\left|A_{\backslash k,\backslash \ell}\right|=(\operatorname{adj}(A))_{\ell k}</script><p>从这里可以知道，它直接从伴随矩阵的性质得出：</p><script type="math/tex; mode=display">\nabla_{A}|A|=(\operatorname{adj}(A))^{T}=|A| A^{-T}</script><p>现在我们来考虑函数$f : \mathbb{S}_{++}^{n} \rightarrow \mathbb{R}$，$f(A)=\log |A|$。注意，我们必须将$f$的域限制为正定矩阵，因为这确保了$|A|&gt;0$，因此$|A|$的对数是实数。在这种情况下，我们可以使用链式法则（没什么奇怪的，只是单变量演算中的普通链式法则）来看看：</p><script type="math/tex; mode=display">\frac{\partial \log |A|}{\partial A_{i j}}=\frac{\partial \log |A|}{\partial|A|} \frac{\partial|A|}{\partial A_{i j}}=\frac{1}{|A|} \frac{\partial|A|}{\partial A_{i j}}</script><p>从这一点可以明显看出：</p><script type="math/tex; mode=display">\nabla_{A} \log |A|=\frac{1}{|A|} \nabla_{A}|A|=A^{-1}</script><p>我们可以在最后一个表达式中删除转置，因为$A$是对称的。注意与单值情况的相似性，其中$\partial /(\partial x) \log x=1 / x$。</p><h4 id="4-6-特征值优化"><a href="#4-6-特征值优化" class="headerlink" title="4.6 特征值优化"></a>4.6 特征值优化</h4><p>最后，我们使用矩阵演算以直接导致特征值/特征向量分析的方式求解优化问题。 考虑以下等式约束优化问题：</p><script type="math/tex; mode=display">\max _{x \in \mathbb{R}^{n}} x^{T} A x \quad \text { subject to }\|x\|_{2}^{2}=1</script><p>对于对称矩阵$A\in \mathbb{S}^{n}$。求解等式约束优化问题的标准方法是采用<strong>拉格朗日</strong>形式，一种包含等式约束的目标函数，在这种情况下，拉格朗日函数可由以下公式给出：</p><script type="math/tex; mode=display">\mathcal{L}(x, \lambda)=x^{T} A x-\lambda x^{T} x</script><p>其中，$\lambda $被称为与等式约束关联的拉格朗日乘子。可以确定，要使$x^<em>$成为问题的最佳点，拉格朗日的梯度必须在$x^</em>$处为零（这不是唯一的条件，但它是必需的）。也就是说，</p><script type="math/tex; mode=display">\nabla_{x} \mathcal{L}(x, \lambda)=\nabla_{x}\left(x^{T} A x-\lambda x^{T} x\right)=2 A^{T} x-2 \lambda x=0</script><p>请注意，这只是线性方程$Ax =\lambda x$。 这表明假设$x^T x = 1$，可能最大化（或最小化）$x^T Ax$的唯一点是$A$的特征向量。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;线性代数复习和参考&quot;&gt;&lt;a href=&quot;#线性代数复习和参考&quot; class=&quot;headerlink&quot; title=&quot;线性代数复习和参考&quot;&gt;&lt;/a&gt;线性代数复习和参考&lt;/h2&gt;&lt;h3 id=&quot;1-基础概念和符号&quot;&gt;&lt;a href=&quot;#1-基础概念和符号&quot; class</summary>
      
    
    
    
    <category term="机器学习" scheme="https://xxren8218.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="机器学习数学基础" scheme="https://xxren8218.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>函数进阶</title>
    <link href="https://xxren8218.github.io/20210305/%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6.html"/>
    <id>https://xxren8218.github.io/20210305/%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6.html</id>
    <published>2021-03-05T12:29:09.000Z</published>
    <updated>2021-03-05T12:30:03.128Z</updated>
    
    <content type="html"><![CDATA[<h1 id="函数进阶"><a href="#函数进阶" class="headerlink" title="函数进阶"></a>函数进阶</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>函数参数和返回值的作用</li><li>函数的返回值 进阶</li><li>函数的参数 进阶</li><li>递归函数</li></ul><h2 id="01-函数参数和返回值的作用"><a href="#01-函数参数和返回值的作用" class="headerlink" title="01. 函数参数和返回值的作用"></a>01. 函数参数和返回值的作用</h2><p>函数根据 <strong>有没有参数</strong> 以及 <strong>有没有返回值</strong>，可以 <strong>相互组合</strong>，一共有 <strong>4 种</strong> 组合形式</p><ol><li>无参数，无返回值</li><li>无参数，有返回值</li><li>有参数，无返回值</li><li>有参数，有返回值</li></ol><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/001_%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E5%92%8C%E8%BF%94%E5%9B%9E%E5%80%BC.png" alt=""></p><blockquote><p>定义函数时，<strong>是否接收参数，或者是否返回结果</strong>，是根据 <strong>实际的功能需求</strong> 来决定的！</p></blockquote><ol><li>如果函数 <strong>内部处理的数据不确定</strong>，就可以将外界的数据以参数传递到函数内部</li><li>如果希望一个函数 <strong>执行完成后，向外界汇报执行结果</strong>，就可以增加函数的返回值</li></ol><h3 id="1-1-无参数，无返回值"><a href="#1-1-无参数，无返回值" class="headerlink" title="1.1 无参数，无返回值"></a>1.1 无参数，无返回值</h3><p>此类函数，不接收参数，也没有返回值，应用场景如下：</p><ol><li><strong>只是单纯地做一件事情</strong>，例如 <strong>显示菜单</strong></li><li>在函数内部 <strong>针对全局变量进行操作</strong>，例如：<strong>新建名片</strong>，最终结果 <strong>记录在全局变量</strong> 中</li></ol><blockquote><p>注意：</p></blockquote><ul><li>如果全局变量的数据类型是一个 <strong>可变类型</strong>，在函数内部可以使用 <strong>方法</strong> 修改全局变量的内容 —— <strong>变量的引用不会改变</strong></li><li>在函数内部，<strong>使用赋值语句</strong> 才会 <strong>修改变量的引用</strong></li></ul><h3 id="1-2-无参数，有返回值"><a href="#1-2-无参数，有返回值" class="headerlink" title="1.2 无参数，有返回值"></a>1.2 无参数，有返回值</h3><p>此类函数，不接收参数，但是有返回值，应用场景如下：</p><ul><li>采集数据，例如 <strong>温度计</strong>，返回结果就是当前的温度，而不需要传递任何的参数</li></ul><h3 id="1-3-有参数，无返回值"><a href="#1-3-有参数，无返回值" class="headerlink" title="1.3 有参数，无返回值"></a>1.3 有参数，无返回值</h3><p>此类函数，接收参数，没有返回值，应用场景如下：</p><ul><li>函数内部的代码保持不变，针对 <strong>不同的参数 处理 不同的数据</strong></li><li>例如 <strong>名片管理系统</strong> 针对 <strong>找到的名片</strong> 做 <strong>修改</strong>、<strong>删除</strong> 操作</li></ul><h3 id="1-4-有参数，有返回值"><a href="#1-4-有参数，有返回值" class="headerlink" title="1.4 有参数，有返回值"></a>1.4 有参数，有返回值</h3><p>此类函数，接收参数，同时有返回值，应用场景如下：</p><ul><li>函数内部的代码保持不变，针对 <strong>不同的参数 处理 不同的数据</strong>，并且 <strong>返回期望的处理结果</strong></li><li>例如 <strong>名片管理系统</strong> 使用 <strong>字典默认值</strong> 和 <strong>提示信息</strong> 提示用户输入内容<ul><li>如果输入，返回输入内容</li><li>如果没有输入，返回字典默认值</li></ul></li></ul><h2 id="02-函数的返回值-进阶"><a href="#02-函数的返回值-进阶" class="headerlink" title="02. 函数的返回值 进阶"></a>02. 函数的返回值 进阶</h2><ul><li>在程序开发中，有时候，会希望 <strong>一个函数执行结束后，告诉调用者一个结果</strong>，以便调用者针对具体的结果做后续的处理</li><li><strong>返回值</strong> 是函数 <strong>完成工作</strong>后，<strong>最后</strong> 给调用者的 <strong>一个结果</strong></li><li>在函数中使用 <code>return</code> 关键字可以返回结果</li><li>调用函数一方，可以 <strong>使用变量</strong> 来 <strong>接收</strong> 函数的返回结果</li></ul><blockquote><p>问题：一个函数执行后能否返回多个结果？</p></blockquote><h3 id="示例-——-温度和湿度测量"><a href="#示例-——-温度和湿度测量" class="headerlink" title="示例 —— 温度和湿度测量"></a>示例 —— 温度和湿度测量</h3><ul><li>假设要开发一个函数能够同时返回当前的温度和湿度</li><li><strong>先完成返回温度</strong>的功能如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">measure</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;返回当前的温度&quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    print(<span class="string">&quot;开始测量...&quot;</span>)</span><br><span class="line">    temp = <span class="number">39</span></span><br><span class="line">    print(<span class="string">&quot;测量结束...&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> temp</span><br><span class="line"></span><br><span class="line">result = measure()</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><ul><li>在利用 <strong>元组</strong> 在返回温度的同时，也能够返回 <strong>湿度</strong></li><li>改造如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">measure</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;返回当前的温度&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;开始测量...&quot;</span>)</span><br><span class="line">    temp = <span class="number">39</span></span><br><span class="line">    wetness = <span class="number">10</span></span><br><span class="line">    print(<span class="string">&quot;测量结束...&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (temp, wetness)</span><br></pre></td></tr></table></figure><blockquote><p>提示：如果一个函数返回的是元组，括号可以省略</p></blockquote><p><strong>技巧</strong> </p><ul><li>在 <code>Python</code> 中，可以 <strong>将一个元组</strong> 使用 <strong>赋值语句</strong> 同时赋值给 <strong>多个变量</strong></li><li>注意：变量的数量需要和元组中的元素数量保持一致</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = temp, wetness = measure()</span><br></pre></td></tr></table></figure><h3 id="面试题-——-交换两个数字"><a href="#面试题-——-交换两个数字" class="headerlink" title="面试题 —— 交换两个数字"></a>面试题 —— 交换两个数字</h3><p><strong>题目要求</strong></p><ol><li>有两个整数变量 <code>a = 6</code>, <code>b = 100</code></li><li>不使用其他变量，<strong>交换两个变量的值</strong></li></ol><h4 id="解法-1-——-使用其他变量"><a href="#解法-1-——-使用其他变量" class="headerlink" title="解法 1 —— 使用其他变量"></a>解法 1 —— 使用其他变量</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解法 1 - 使用临时变量</span></span><br><span class="line">c = b</span><br><span class="line">b = a</span><br><span class="line">a = c</span><br></pre></td></tr></table></figure><h4 id="解法-2-——-不使用临时变量"><a href="#解法-2-——-不使用临时变量" class="headerlink" title="解法 2 —— 不使用临时变量"></a>解法 2 —— 不使用临时变量</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解法 2 - 不使用临时变量</span></span><br><span class="line">a = a + b</span><br><span class="line">b = a - b</span><br><span class="line">a = a - b</span><br></pre></td></tr></table></figure><h4 id="解法-3-——-Python-专有，利用元组"><a href="#解法-3-——-Python-专有，利用元组" class="headerlink" title="解法 3 —— Python 专有，利用元组"></a>解法 3 —— Python 专有，利用元组</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a, b = b, a</span><br></pre></td></tr></table></figure><h2 id="03-函数的参数-进阶"><a href="#03-函数的参数-进阶" class="headerlink" title="03. 函数的参数 进阶"></a>03. 函数的参数 进阶</h2><h3 id="3-1-不可变和可变的参数"><a href="#3-1-不可变和可变的参数" class="headerlink" title="3.1. 不可变和可变的参数"></a>3.1. 不可变和可变的参数</h3><blockquote><p>问题 1：在函数内部，针对参数使用 <strong>赋值语句</strong>，会不会影响调用函数时传递的 <strong>实参变量</strong>？ —— 不会！</p></blockquote><ul><li>无论传递的参数是 <strong>可变</strong> 还是 <strong>不可变</strong> <ul><li>只要 <strong>针对参数</strong> 使用 <strong>赋值语句</strong>，会在 <strong>函数内部</strong> 修改 <strong>局部变量的引用</strong>，<strong>不会影响到 外部变量的引用</strong></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span>(<span class="params">num, num_list</span>):</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;函数内部&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 赋值语句</span></span><br><span class="line">    num = <span class="number">200</span></span><br><span class="line">    num_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">    print(num)</span><br><span class="line">    print(num_list)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;函数代码完成&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gl_num = <span class="number">99</span></span><br><span class="line">gl_list = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">demo(gl_num, gl_list)</span><br><span class="line">print(gl_num)</span><br><span class="line">print(gl_list)</span><br><span class="line">    </span><br></pre></td></tr></table></figure><blockquote><p>问题 2：如果传递的参数是 <strong>可变类型</strong>，在函数内部，使用 <strong>方法</strong> 修改了数据的内容，<strong>同样会影响到外部的数据</strong></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mutable</span>(<span class="params">num_list</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># num_list = [1, 2, 3]</span></span><br><span class="line">    num_list.extend([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">    </span><br><span class="line">    print(num_list)</span><br><span class="line"></span><br><span class="line">gl_list = [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">mutable(gl_list)</span><br><span class="line">print(gl_list)</span><br></pre></td></tr></table></figure><h4 id="面试题-——"><a href="#面试题-——" class="headerlink" title="面试题 —— +="></a>面试题 —— <code>+=</code></h4><ul><li>在 <code>python</code> 中，列表变量调用 <code>+=</code> 本质上是在执行列表变量的 <code>extend</code> 方法，不会修改变量的引用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span>(<span class="params">num, num_list</span>):</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;函数内部代码&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># num = num + num</span></span><br><span class="line">    num += num</span><br><span class="line">    <span class="comment"># num_list.extend(num_list) 由于是调用方法，所以不会修改变量的引用</span></span><br><span class="line">    <span class="comment"># 函数执行结束后，外部数据同样会发生变化</span></span><br><span class="line">    num_list += num_list</span><br><span class="line"></span><br><span class="line">    print(num)</span><br><span class="line">    print(num_list)</span><br><span class="line">    print(<span class="string">&quot;函数代码完成&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gl_num = <span class="number">9</span></span><br><span class="line">gl_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">demo(gl_num, gl_list)</span><br><span class="line">print(gl_num)</span><br><span class="line">print(gl_list)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-2-缺省参数"><a href="#3-2-缺省参数" class="headerlink" title="3.2 缺省参数"></a>3.2 缺省参数</h3><ul><li>定义函数时，可以给 <strong>某个参数</strong> 指定一个<strong>默认值</strong>，具有默认值的参数就叫做 <strong>缺省参数</strong></li><li>调用函数时，如果没有传入 <strong>缺省参数</strong> 的值，则在函数内部使用定义函数时指定的 <strong>参数默认值</strong></li><li>函数的缺省参数，<strong>将常见的值设置为参数的缺省值</strong>，从而 <strong>简化函数的调用</strong></li><li>例如：对列表排序的方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">gl_num_list = [<span class="number">6</span>, <span class="number">3</span>, <span class="number">9</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认就是升序排序，因为这种应用需求更多</span></span><br><span class="line">gl_num_list.sort()</span><br><span class="line">print(gl_num_list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只有当需要降序排序时，才需要传递 `reverse` 参数</span></span><br><span class="line">gl_num_list.sort(reverse=<span class="literal">True</span>)</span><br><span class="line">print(gl_num_list)</span><br></pre></td></tr></table></figure><h4 id="指定函数的缺省参数"><a href="#指定函数的缺省参数" class="headerlink" title="指定函数的缺省参数"></a>指定函数的缺省参数</h4><ul><li>在参数后使用赋值语句，可以指定参数的缺省值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_info</span>(<span class="params">name, gender=<span class="literal">True</span></span>):</span></span><br><span class="line"></span><br><span class="line">    gender_text = <span class="string">&quot;男生&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> gender:</span><br><span class="line">        gender_text = <span class="string">&quot;女生&quot;</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;%s 是 %s&quot;</span> % (name, gender_text))</span><br></pre></td></tr></table></figure><p><strong>提示</strong></p><ol><li>缺省参数，需要使用 <strong>最常见的值</strong> 作为默认值！</li><li>如果一个参数的值 <strong>不能确定</strong>，则不应该设置默认值，具体的数值在调用函数时，由外界传递！</li></ol><h4 id="缺省参数的注意事项"><a href="#缺省参数的注意事项" class="headerlink" title="缺省参数的注意事项"></a>缺省参数的注意事项</h4><h5 id="1-缺省参数的定义位置"><a href="#1-缺省参数的定义位置" class="headerlink" title="1) 缺省参数的定义位置"></a>1) 缺省参数的定义位置</h5><ul><li><strong>必须保证</strong> <strong>带有默认值的缺省参数</strong> <strong>在参数列表末尾</strong></li><li>所以，以下定义是错误的！</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_info</span>(<span class="params">name, gender=<span class="literal">True</span>, title</span>):</span></span><br></pre></td></tr></table></figure><h5 id="2-调用带有多个缺省参数的函数"><a href="#2-调用带有多个缺省参数的函数" class="headerlink" title="2) 调用带有多个缺省参数的函数"></a>2) 调用带有多个缺省参数的函数</h5><ul><li>在 <strong>调用函数时</strong>，如果有 <strong>多个缺省参数</strong>，<strong>需要指定参数名</strong>，这样解释器才能够知道参数的对应关系！</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_info</span>(<span class="params">name, title=<span class="string">&quot;&quot;</span>, gender=<span class="literal">True</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param title: 职位</span></span><br><span class="line"><span class="string">    :param name: 班上同学的姓名</span></span><br><span class="line"><span class="string">    :param gender: True 男生 False 女生</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    gender_text = <span class="string">&quot;男生&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> gender:</span><br><span class="line">        gender_text = <span class="string">&quot;女生&quot;</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;%s%s 是 %s&quot;</span> % (title, name, gender_text))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提示：在指定缺省参数的默认值时，应该使用最常见的值作为默认值！</span></span><br><span class="line">print_info(<span class="string">&quot;小明&quot;</span>)</span><br><span class="line">print_info(<span class="string">&quot;老王&quot;</span>, title=<span class="string">&quot;班长&quot;</span>)</span><br><span class="line">print_info(<span class="string">&quot;小美&quot;</span>, gender=<span class="literal">False</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-3-多值参数（知道）"><a href="#3-3-多值参数（知道）" class="headerlink" title="3.3 多值参数（知道）"></a>3.3 多值参数（知道）</h3><h4 id="定义支持多值参数的函数"><a href="#定义支持多值参数的函数" class="headerlink" title="定义支持多值参数的函数"></a>定义支持多值参数的函数</h4><ul><li>有时可能需要 <strong>一个函数</strong> 能够处理的参数 <strong>个数</strong> 是不确定的，这个时候，就可以使用 <strong>多值参数</strong></li><li><code>python</code> 中有 <strong>两种</strong> 多值参数：<ul><li>参数名前增加 <strong>一个</strong> <code>*</code> 可以接收 <strong>元组</strong></li><li>参数名前增加 <strong>两个</strong> <code>*</code> 可以接收 <strong>字典</strong></li></ul></li><li><p>一般在给多值参数命名时，<strong>习惯</strong>使用以下两个名字</p><ul><li><code>*args</code> —— 存放 <strong>元组</strong> 参数，前面有一个 <code>*</code></li><li><code>**kwargs</code> —— 存放 <strong>字典</strong> 参数，前面有两个 <code>*</code></li></ul></li><li><p><code>args</code> 是 <code>arguments</code> 的缩写，有变量的含义</p></li><li><code>kw</code> 是 <code>keyword</code> 的缩写，<code>kwargs</code> 可以记忆 <strong>键值对参数</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span>(<span class="params">num, *args, **kwargs</span>):</span></span><br><span class="line"></span><br><span class="line">    print(num)</span><br><span class="line">    print(args)</span><br><span class="line">    print(kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">demo(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, name=<span class="string">&quot;小明&quot;</span>, age=<span class="number">18</span>, gender=<span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>提示：<strong>多值参数</strong> 的应用会经常出现在网络上一些大牛开发的框架中，知道多值参数，<strong>有利于我们能够读懂大牛的代码</strong></p></blockquote><h4 id="多值参数案例-——-计算任意多个数字的和"><a href="#多值参数案例-——-计算任意多个数字的和" class="headerlink" title="多值参数案例 —— 计算任意多个数字的和"></a>多值参数案例 —— 计算任意多个数字的和</h4><p><strong>需求</strong></p><ol><li>定义一个函数 <code>sum_numbers</code>，可以接收的 <strong>任意多个整数</strong></li><li>功能要求：将传递的 <strong>所有数字累加</strong> 并且返回累加结果</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_numbers</span>(<span class="params">*args</span>):</span></span><br><span class="line"></span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 遍历 args 元组顺序求和</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> args:</span><br><span class="line">        num += n</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> num</span><br><span class="line"></span><br><span class="line">print(sum_numbers(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))</span><br></pre></td></tr></table></figure><h4 id="元组和字典的拆包（知道）"><a href="#元组和字典的拆包（知道）" class="headerlink" title="元组和字典的拆包（知道）"></a>元组和字典的拆包（知道）</h4><ul><li>在调用带有多值参数的函数时，如果希望：<ul><li>将一个 <strong>元组变量</strong>，直接传递给 <code>args</code></li><li>将一个 <strong>字典变量</strong>，直接传递给 <code>kwargs</code></li></ul></li><li>就可以使用 <strong>拆包</strong>，简化参数的传递，<strong>拆包</strong> 的方式是：<ul><li>在 <strong>元组变量前</strong>，增加 <strong>一个</strong> <code>*</code></li><li>在 <strong>字典变量前</strong>，增加 <strong>两个</strong> <code>*</code></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line"></span><br><span class="line">    print(args)</span><br><span class="line">    print(kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要将一个元组变量/字典变量传递给函数对应的参数</span></span><br><span class="line">gl_nums = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">gl_xiaoming = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;小明&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">18</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 会把 num_tuple 和 xiaoming 作为元组传递个 args</span></span><br><span class="line"><span class="comment"># demo(gl_nums, gl_xiaoming)</span></span><br><span class="line">demo(*gl_nums, **gl_xiaoming)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="04-函数的递归"><a href="#04-函数的递归" class="headerlink" title="04. 函数的递归"></a>04. 函数的递归</h2><blockquote><p>函数调用自身的 <strong>编程技巧</strong> 称为递归</p></blockquote><h3 id="4-1-递归函数的特点"><a href="#4-1-递归函数的特点" class="headerlink" title="4.1 递归函数的特点"></a>4.1 递归函数的特点</h3><p><strong>特点</strong></p><ul><li><strong>一个函数</strong> <strong>内部</strong> <strong>调用自己</strong><ul><li>函数内部可以调用其他函数，当然在函数内部也可以调用自己</li></ul></li></ul><p><strong>代码特点</strong></p><ol><li>函数内部的 <strong>代码</strong> 是相同的，只是针对 <strong>参数</strong> 不同，<strong>处理的结果不同</strong></li><li>当 <strong>参数满足一个条件</strong> 时，函数不再执行<ul><li><strong>这个非常重要</strong>，通常被称为递归的出口，否则 <strong>会出现死循环</strong>！</li></ul></li></ol><p>示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_numbers</span>(<span class="params">num</span>):</span></span><br><span class="line"></span><br><span class="line">    print(num)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 递归的出口很重要，否则会出现死循环</span></span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    sum_numbers(num - <span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">sum_numbers(<span class="number">3</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/002_%E9%80%92%E5%BD%92%E8%B0%83%E7%94%A8%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt=""></p><h3 id="4-2-递归案例-——-计算数字累加"><a href="#4-2-递归案例-——-计算数字累加" class="headerlink" title="4.2 递归案例 —— 计算数字累加"></a>4.2 递归案例 —— 计算数字累加</h3><p><strong>需求</strong></p><ol><li>定义一个函数 <code>sum_numbers</code></li><li>能够接收一个 <code>num</code> 的整数参数</li><li>计算 1 + 2 + … num 的结果</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_numbers</span>(<span class="params">num</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 假设 sum_numbers 能够完成 num - 1 的累加</span></span><br><span class="line">    temp = sum_numbers(num - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 函数内部的核心算法就是 两个数字的相加</span></span><br><span class="line">    <span class="keyword">return</span> num + temp</span><br><span class="line"></span><br><span class="line">print(sum_numbers(<span class="number">2</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/002_%E9%80%92%E5%BD%92%E8%B0%83%E7%94%A8%E7%A4%BA%E6%84%8F%E5%9B%BEI.png" alt=""></p><blockquote><p>提示：递归是一个 <strong>编程技巧</strong>，初次接触递归会感觉有些吃力！在处理 <strong>不确定的循环条件时</strong>，格外的有用，例如：<strong>遍历整个文件目录的结构</strong></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;函数进阶&quot;&gt;&lt;a href=&quot;#函数进阶&quot; class=&quot;headerlink&quot; title=&quot;函数进阶&quot;&gt;&lt;/a&gt;函数进阶&lt;/h1&gt;&lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h</summary>
      
    
    
    
    <category term="python" scheme="https://xxren8218.github.io/categories/python/"/>
    
    
    <category term="python基础" scheme="https://xxren8218.github.io/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>变量进阶</title>
    <link href="https://xxren8218.github.io/20210305/%E5%8F%98%E9%87%8F%E8%BF%9B%E9%98%B6.html"/>
    <id>https://xxren8218.github.io/20210305/%E5%8F%98%E9%87%8F%E8%BF%9B%E9%98%B6.html</id>
    <published>2021-03-05T12:26:02.000Z</published>
    <updated>2021-03-05T12:26:18.120Z</updated>
    
    <content type="html"><![CDATA[<h1 id="变量进阶（理解）"><a href="#变量进阶（理解）" class="headerlink" title="变量进阶（理解）"></a>变量进阶（理解）</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>变量的引用</li><li>可变和不可变类型</li><li>局部变量和全局变量</li></ul><h2 id="01-变量的引用"><a href="#01-变量的引用" class="headerlink" title="01. 变量的引用"></a>01. 变量的引用</h2><blockquote><ul><li>变量 和 数据 都是保存在 <strong>内存</strong> 中的</li><li>在 <code>Python</code> 中 <strong>函数 的 参数传递</strong> 以及 <strong>返回值</strong> 都是靠 <strong>引用</strong> 传递的</li></ul></blockquote><h3 id="1-1-引用的概念"><a href="#1-1-引用的概念" class="headerlink" title="1.1 引用的概念"></a>1.1 引用的概念</h3><p>在 <code>Python</code> 中</p><ul><li><strong>变量</strong> 和 <strong>数据</strong> 是分开存储的</li><li><strong>数据</strong> 保存在内存中的一个位置</li><li><strong>变量</strong> 中保存着数据在内存中的地址</li><li><strong>变量</strong> 中 <strong>记录数据的地址</strong>，就叫做 <strong>引用</strong></li><li>使用 <code>id()</code> 函数可以查看变量中保存数据所在的 <strong>内存地址</strong></li></ul><blockquote><p>注意：如果变量已经被定义，当给一个变量赋值的时候，本质上是 <strong>修改了数据的引用</strong></p><ul><li>变量 <strong>不再</strong> 对之前的数据引用</li><li>变量 <strong>改为</strong> 对新赋值的数据引用</li></ul></blockquote><h3 id="1-2-变量引用-的示例"><a href="#1-2-变量引用-的示例" class="headerlink" title="1.2 变量引用 的示例"></a>1.2 <code>变量引用</code> 的示例</h3><p>在 <code>Python</code> 中，变量的名字类似于 <strong>便签纸</strong> 贴在 <strong>数据</strong> 上</p><ul><li>定义一个整数变量 <code>a</code>，并且赋值为 <code>1</code></li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">代码</th><th style="text-align:center">图示</th></tr></thead><tbody><tr><td style="text-align:center">a = 1</td><td style="text-align:center"><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/004_a1tag.png" alt=""></td></tr></tbody></table></div><ul><li>将变量 <code>a</code> 赋值为 <code>2</code></li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">代码</th><th style="text-align:center">图示</th></tr></thead><tbody><tr><td style="text-align:center">a = 2</td><td style="text-align:center"><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/005_a2tag.png" alt=""></td></tr></tbody></table></div><ul><li>定义一个整数变量 <code>b</code>，并且将变量 <code>a</code> 的值赋值给 <code>b</code></li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">代码</th><th style="text-align:center">图示</th></tr></thead><tbody><tr><td style="text-align:center">b = a</td><td style="text-align:center"><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/006_ab2tag.png" alt=""></td></tr></tbody></table></div><blockquote><p>变量 <code>b</code> 是第 2 个贴在数字 <code>2</code> 上的标签</p></blockquote><h3 id="1-3-函数的参数和返回值的传递"><a href="#1-3-函数的参数和返回值的传递" class="headerlink" title="1.3 函数的参数和返回值的传递"></a>1.3 函数的参数和返回值的传递</h3><p>在 <code>Python</code> 中，函数的 <strong>实参</strong>/<strong>返回值</strong> 都是是靠 <strong>引用</strong> 来传递来的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">num</span>):</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br><span class="line">    print(<span class="string">&quot;%d 在函数内的内存地址是 %x&quot;</span> % (num, <span class="built_in">id</span>(num)))</span><br><span class="line"></span><br><span class="line">    result = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;返回值 %d 在内存中的地址是 %x&quot;</span> % (result, <span class="built_in">id</span>(result)))</span><br><span class="line">    print(<span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>  result</span><br><span class="line"></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">print(<span class="string">&quot;调用函数前 内存地址是 %x&quot;</span> % <span class="built_in">id</span>(a))</span><br><span class="line"></span><br><span class="line">r = test(a)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;调用函数后 实参内存地址是 %x&quot;</span> % <span class="built_in">id</span>(a))</span><br><span class="line">print(<span class="string">&quot;调用函数后 返回值内存地址是 %x&quot;</span> % <span class="built_in">id</span>(r))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="02-可变和不可变类型"><a href="#02-可变和不可变类型" class="headerlink" title="02. 可变和不可变类型"></a>02. 可变和不可变类型</h2><ul><li><p><strong>不可变类型</strong>，内存中的数据不允许被修改：</p><ul><li>数字类型 <code>int</code>, <code>bool</code>, <code>float</code>, <code>complex</code>, <code>long(2.x)</code></li><li>字符串 <code>str</code></li><li>元组 <code>tuple</code></li></ul></li><li><p><strong>可变类型</strong>，内存中的数据可以被修改：</p><ul><li>列表 <code>list</code></li><li>字典 <code>dict</code></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">a = <span class="string">&quot;hello&quot;</span></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">a = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">demo_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;定义列表后的内存地址 %d&quot;</span> % <span class="built_in">id</span>(demo_list))</span><br><span class="line"></span><br><span class="line">demo_list.append(<span class="number">999</span>)</span><br><span class="line">demo_list.pop(<span class="number">0</span>)</span><br><span class="line">demo_list.remove(<span class="number">2</span>)</span><br><span class="line">demo_list[<span class="number">0</span>] = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;修改数据后的内存地址 %d&quot;</span> % <span class="built_in">id</span>(demo_list))</span><br><span class="line"></span><br><span class="line">demo_dict = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;小明&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;定义字典后的内存地址 %d&quot;</span> % <span class="built_in">id</span>(demo_dict))</span><br><span class="line"></span><br><span class="line">demo_dict[<span class="string">&quot;age&quot;</span>] = <span class="number">18</span></span><br><span class="line">demo_dict.pop(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">demo_dict[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;老王&quot;</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;修改数据后的内存地址 %d&quot;</span> % <span class="built_in">id</span>(demo_dict))</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>注意：字典的 <code>key</code> <strong>只能使用不可变类型的数据</strong></p></blockquote><p><strong>注意</strong></p><ol><li><strong>可变类型</strong>的数据变化，是通过 <strong>方法</strong> 来实现的</li><li>如果给一个可变类型的变量，赋值了一个新的数据，<strong>引用会修改</strong><ul><li>变量 <strong>不再</strong> 对之前的数据引用</li><li>变量 <strong>改为</strong> 对新赋值的数据引用</li></ul></li></ol><h3 id="哈希-hash"><a href="#哈希-hash" class="headerlink" title="哈希 (hash)"></a>哈希 <code>(hash)</code></h3><ul><li><code>Python</code> 中内置有一个名字叫做 <code>hash(o)</code> 的函数<ul><li>接收一个 <strong>不可变类型</strong> 的数据作为 <strong>参数</strong></li><li><strong>返回</strong> 结果是一个 <strong>整数</strong></li></ul></li><li><code>哈希</code> 是一种 <strong>算法</strong>，其作用就是提取数据的 <strong>特征码（指纹）</strong><ul><li><strong>相同的内容</strong> 得到 <strong>相同的结果</strong></li><li><strong>不同的内容</strong> 得到 <strong>不同的结果</strong></li></ul></li><li>在 <code>Python</code> 中，设置字典的 <strong>键值对</strong> 时，会首先对 <code>key</code> 进行 <code>hash</code> 已决定如何在内存中保存字典的数据，以方便 <strong>后续</strong> 对字典的操作：<strong>增、删、改、查</strong><ul><li>键值对的 <code>key</code> 必须是不可变类型数据</li><li>键值对的 <code>value</code> 可以是任意类型的数据</li></ul></li></ul><h2 id="03-局部变量和全局变量"><a href="#03-局部变量和全局变量" class="headerlink" title="03. 局部变量和全局变量"></a>03. 局部变量和全局变量</h2><ul><li><strong>局部变量</strong> 是在 <strong>函数内部</strong> 定义的变量，<strong>只能在函数内部使用</strong></li><li><strong>全局变量</strong> 是在 <strong>函数外部定义</strong> 的变量（没有定义在某一个函数内），<strong>所有函数</strong> 内部 <strong>都可以使用这个变量</strong></li></ul><blockquote><p>提示：在其他的开发语言中，大多 <strong>不推荐使用全局变量</strong> —— 可变范围太大，导致程序不好维护！</p></blockquote><h3 id="3-1-局部变量"><a href="#3-1-局部变量" class="headerlink" title="3.1 局部变量"></a>3.1 局部变量</h3><ul><li><strong>局部变量</strong> 是在 <strong>函数内部</strong> 定义的变量，<strong>只能在函数内部使用</strong></li><li>函数执行结束后，<strong>函数内部的局部变量，会被系统回收</strong></li><li>不同的函数，可以定义相同的名字的局部变量，但是 <strong>彼此之间</strong> 不会产生影响</li></ul><h4 id="局部变量的作用"><a href="#局部变量的作用" class="headerlink" title="局部变量的作用"></a>局部变量的作用</h4><ul><li>在函数内部使用，<strong>临时</strong> 保存 <strong>函数内部需要使用的数据</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo1</span>():</span></span><br><span class="line"></span><br><span class="line">    num = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    print(num)</span><br><span class="line"></span><br><span class="line">    num = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;修改后 %d&quot;</span> % num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo2</span>():</span></span><br><span class="line"></span><br><span class="line">    num = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">    print(num)</span><br><span class="line"></span><br><span class="line">demo1()</span><br><span class="line">demo2()</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;over&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="局部变量的生命周期"><a href="#局部变量的生命周期" class="headerlink" title="局部变量的生命周期"></a>局部变量的生命周期</h4><ul><li>所谓 <strong>生命周期</strong> 就是变量从 <strong>被创建</strong> 到 <strong>被系统回收</strong> 的过程</li><li><strong>局部变量</strong> 在 <strong>函数执行时</strong> 才会被创建</li><li><strong>函数执行结束后</strong> 局部变量 <strong>被系统回收</strong></li><li><strong>局部变量在生命周期</strong> 内，可以用来存储 <strong>函数内部临时使用到的数据</strong></li></ul><h3 id="3-2-全局变量"><a href="#3-2-全局变量" class="headerlink" title="3.2 全局变量"></a>3.2 全局变量</h3><ul><li><strong>全局变量</strong> 是在 <strong>函数外部定义</strong> 的变量，所有函数内部都可以使用这个变量</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个全局变量</span></span><br><span class="line">num = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo1</span>():</span></span><br><span class="line"></span><br><span class="line">    print(num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo2</span>():</span></span><br><span class="line"></span><br><span class="line">    print(num)</span><br><span class="line"></span><br><span class="line">demo1()</span><br><span class="line">demo2()</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;over&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：函数执行时，<strong>需要处理变量时</strong> 会：</p><ol><li><strong>首先</strong> 查找 <strong>函数内部</strong> 是否存在 <strong>指定名称 的局部变量</strong>，<strong>如果有，直接使用</strong></li><li>如果没有，查找 <strong>函数外部</strong> 是否存在 <strong>指定名称 的全局变量</strong>，<strong>如果有，直接使用</strong></li><li>如果还没有，程序报错！</li></ol><h4 id="1-函数不能直接修改-全局变量的引用"><a href="#1-函数不能直接修改-全局变量的引用" class="headerlink" title="1) 函数不能直接修改 全局变量的引用"></a>1) 函数不能直接修改 <code>全局变量的引用</code></h4><ul><li><strong>全局变量</strong> 是在 <strong>函数外部定义</strong> 的变量（没有定义在某一个函数内），<strong>所有函数</strong> 内部 <strong>都可以使用这个变量</strong></li></ul><blockquote><p>提示：在其他的开发语言中，大多 <strong>不推荐使用全局变量</strong> —— 可变范围太大，导致程序不好维护！</p></blockquote><ul><li>在函数内部，可以 <strong>通过全局变量的引用获取对应的数据</strong></li><li>但是，<strong>不允许直接修改全局变量的引用</strong> —— 使用赋值语句修改全局变量的值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo1</span>():</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;demo1&quot;</span> + <span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 只是定义了一个局部变量，不会修改到全局变量，只是变量名相同而已</span></span><br><span class="line">    num = <span class="number">100</span></span><br><span class="line">    print(num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo2</span>():</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;demo2&quot;</span> + <span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br><span class="line">    print(num)</span><br><span class="line"></span><br><span class="line">demo1()</span><br><span class="line">demo2()</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;over&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>注意：只是在函数内部定义了一个局部变量而已，只是变量名相同 —— 在函数内部不能直接修改全局变量的值</p></blockquote><h4 id="2-在函数内部修改全局变量的值"><a href="#2-在函数内部修改全局变量的值" class="headerlink" title="2) 在函数内部修改全局变量的值"></a>2) 在函数内部修改全局变量的值</h4><ul><li>如果在函数中需要修改全局变量，需要使用 <code>global</code> 进行声明</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo1</span>():</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;demo1&quot;</span> + <span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># global 关键字，告诉 Python 解释器 num 是一个全局变量</span></span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    <span class="comment"># 只是定义了一个局部变量，不会修改到全局变量，只是变量名相同而已</span></span><br><span class="line">    num = <span class="number">100</span></span><br><span class="line">    print(num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo2</span>():</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;demo2&quot;</span> + <span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br><span class="line">    print(num)</span><br><span class="line"></span><br><span class="line">demo1()</span><br><span class="line">demo2()</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;over&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-全局变量定义的位置"><a href="#3-全局变量定义的位置" class="headerlink" title="3) 全局变量定义的位置"></a>3) 全局变量定义的位置</h4><ul><li>为了保证所有的函数都能够正确使用到全局变量，应该 <strong>将全局变量定义在其他函数的上方</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span>():</span></span><br><span class="line">    print(<span class="string">&quot;%d&quot;</span> % a)</span><br><span class="line">    print(<span class="string">&quot;%d&quot;</span> % b)</span><br><span class="line">    print(<span class="string">&quot;%d&quot;</span> % c)</span><br><span class="line"></span><br><span class="line">b = <span class="number">20</span></span><br><span class="line">demo()</span><br><span class="line">c = <span class="number">30</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><ul><li>由于全局变量 c，是在调用函数之后，才定义的，在执行函数时，变量还没有定义，所以程序会报错！</li></ul><p><strong>代码结构示意图如下</strong></p><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/001_%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%84%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt=""></p><h4 id="4-全局变量命名的建议"><a href="#4-全局变量命名的建议" class="headerlink" title="4) 全局变量命名的建议"></a>4) 全局变量命名的建议</h4><ul><li>为了避免局部变量和全局变量出现混淆，在定义全局变量时，有些公司会有一些开发要求，例如：</li><li>全局变量名前应该增加 <code>g_</code> 或者 <code>gl_</code> 的前缀</li></ul><blockquote><p>提示：具体的要求格式，各公司要求可能会有些差异</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;变量进阶（理解）&quot;&gt;&lt;a href=&quot;#变量进阶（理解）&quot; class=&quot;headerlink&quot; title=&quot;变量进阶（理解）&quot;&gt;&lt;/a&gt;变量进阶（理解）&lt;/h1&gt;&lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="python" scheme="https://xxren8218.github.io/categories/python/"/>
    
    
    <category term="python基础" scheme="https://xxren8218.github.io/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>综合应用--名片管理系统</title>
    <link href="https://xxren8218.github.io/20210305/%E7%BB%BC%E5%90%88%E5%BA%94%E7%94%A8-%E5%90%8D%E7%89%87%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F.html"/>
    <id>https://xxren8218.github.io/20210305/%E7%BB%BC%E5%90%88%E5%BA%94%E7%94%A8-%E5%90%8D%E7%89%87%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F.html</id>
    <published>2021-03-05T12:20:08.000Z</published>
    <updated>2021-03-05T12:20:24.542Z</updated>
    
    <content type="html"><![CDATA[<h1 id="综合应用-——-名片管理系统"><a href="#综合应用-——-名片管理系统" class="headerlink" title="综合应用 —— 名片管理系统"></a>综合应用 —— 名片管理系统</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>综合应用已经学习过的知识点：</p><ul><li><strong>变量</strong></li><li><strong>流程控制</strong></li><li><strong>函数</strong></li><li><strong>模块</strong></li></ul><p>开发 <strong>名片管理系统</strong></p><h2 id="系统需求"><a href="#系统需求" class="headerlink" title="系统需求"></a>系统需求</h2><ul><li><ol><li>程序启动，显示名片管理系统欢迎界面，并显示功能菜单</li></ol></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">**************************************************</span><br><span class="line">欢迎使用【名片管理系统】V1.0</span><br><span class="line"></span><br><span class="line">1. 新建名片</span><br><span class="line">2. 显示全部</span><br><span class="line">3. 查询名片</span><br><span class="line"></span><br><span class="line">0. 退出系统</span><br><span class="line">**************************************************</span><br></pre></td></tr></table></figure><ul><li><ol><li>用户用数字选择不同的功能</li></ol></li><li><ol><li>根据功能选择，执行不同的功能</li></ol></li><li><ol><li>用户名片需要记录用户的 <strong>姓名</strong>、<strong>电话</strong>、<strong>QQ</strong>、<strong>邮件</strong></li></ol></li><li><ol><li>如果查询到指定的名片，用户可以选择 <strong>修改</strong> 或者 <strong>删除</strong> 名片</li></ol></li></ul><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li>框架搭建</li><li>新增名片</li><li>显示所有名片</li><li>查询名片</li><li>查询成功后修改、删除名片</li><li>让 Python 程序能够直接运行</li></ol><h2 id="01-框架搭建"><a href="#01-框架搭建" class="headerlink" title="01. 框架搭建"></a>01. 框架搭建</h2><p><strong>目标</strong></p><ul><li>搭建名片管理系统 <strong>框架结构</strong><ol><li><strong>准备文件</strong>，确定文件名，保证能够 <strong>在需要的位置</strong> 编写代码</li><li>编写 <strong>主运行循环</strong>，实现基本的 <strong>用户输入和判断</strong></li></ol></li></ul><h3 id="1-1-文件准备"><a href="#1-1-文件准备" class="headerlink" title="1.1 文件准备"></a>1.1 文件准备</h3><ol><li>新建 <code>cards_main.py</code> 保存 <strong>主程序功能代码</strong><ul><li>程序的入口</li><li>每一次启动名片管理系统都通过 <code>main</code> 这个文件启动 </li></ul></li><li>新建 <code>cards_tools.py</code> 保存 <strong>所有名片功能函数</strong><ul><li>将对名片的 <strong>新增</strong>、<strong>查询</strong>、<strong>修改</strong>、<strong>删除</strong> 等功能封装在不同的函数中</li></ul></li></ol><h3 id="1-2-编写主运行循环"><a href="#1-2-编写主运行循环" class="headerlink" title="1.2 编写主运行循环"></a>1.2 编写主运行循环</h3><ul><li>在 <code>cards_main</code> 中添加一个 <strong>无限循环</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># TODO(小明) 显示系统菜单</span></span><br><span class="line"></span><br><span class="line">    action = <span class="built_in">input</span>(<span class="string">&quot;请选择操作功能：&quot;</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;您选择的操作是：%s&quot;</span> % action)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 根据用户输入决定后续的操作</span></span><br><span class="line">    <span class="keyword">if</span> action <span class="keyword">in</span> [<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>]:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">elif</span> action == <span class="string">&quot;0&quot;</span>:</span><br><span class="line">        print(<span class="string">&quot;欢迎再次使用【名片管理系统】&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&quot;输入错误，请重新输入&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="字符串判断"><a href="#字符串判断" class="headerlink" title="字符串判断"></a>字符串判断</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> action <span class="keyword">in</span> [<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>]:</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> action == <span class="string">&quot;1&quot;</span> <span class="keyword">or</span> action == <span class="string">&quot;2&quot;</span> <span class="keyword">or</span> action == <span class="string">&quot;3&quot;</span>:</span><br></pre></td></tr></table></figure><ol><li>使用 <code>in</code> 针对 <strong>列表</strong> 判断，避免使用 <code>or</code> 拼接复杂的逻辑条件</li><li>没有使用 <code>int</code> 转换用户输入，可以避免 <strong>一旦用户输入的不是数字</strong>，导致程序运行出错</li></ol><h4 id="pass"><a href="#pass" class="headerlink" title="pass"></a>pass</h4><ul><li><code>pass</code> 就是一个空语句，不做任何事情，一般用做占位语句</li><li>是为了保持程序结构的完整性</li></ul><h4 id="无限循环"><a href="#无限循环" class="headerlink" title="无限循环"></a>无限循环</h4><ul><li>在开发软件时，如果 <strong>不希望程序执行后</strong> 立即退出</li><li>可以在程序中增加一个 <strong>无限循环</strong></li><li><strong>由用户来决定</strong> 退出程序的时机</li></ul><h4 id="TODO-注释"><a href="#TODO-注释" class="headerlink" title="TODO 注释"></a>TODO 注释</h4><ul><li>在 <code>#</code> 后跟上 <code>TODO</code>，用于标记需要去做的工作</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># TODO(作者/邮件) 显示系统菜单</span></span><br></pre></td></tr></table></figure><h3 id="1-3-在-cards-tools-中增加四个新函数"><a href="#1-3-在-cards-tools-中增加四个新函数" class="headerlink" title="1.3 在 cards_tools 中增加四个新函数"></a>1.3 在 <code>cards_tools</code> 中增加四个新函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_menu</span>():</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;显示菜单</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new_card</span>():</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;新建名片</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    print(<span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br><span class="line">    print(<span class="string">&quot;功能：新建名片&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_all</span>():</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;显示全部</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    print(<span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br><span class="line">    print(<span class="string">&quot;功能：显示全部&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search_card</span>():</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;搜索名片</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    print(<span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br><span class="line">    print(<span class="string">&quot;功能：搜索名片&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-4-导入模块"><a href="#1-4-导入模块" class="headerlink" title="1.4 导入模块"></a>1.4 导入模块</h3><ul><li>在 <code>cards_main.py</code> 中使用 <code>import</code> 导入 <code>cards_tools</code> 模块</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cards_tools</span><br></pre></td></tr></table></figure><ul><li>修改 <code>while</code> 循环的代码如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cards_tools</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"></span><br><span class="line">    cards_tools.show_menu()</span><br><span class="line"></span><br><span class="line">    action = <span class="built_in">input</span>(<span class="string">&quot;请选择操作功能：&quot;</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;您选择的操作是：%s&quot;</span> % action)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 根据用户输入决定后续的操作</span></span><br><span class="line">    <span class="keyword">if</span> action <span class="keyword">in</span> [<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>]:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> action == <span class="string">&quot;1&quot;</span>:</span><br><span class="line">            cards_tools.new_card()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> action == <span class="string">&quot;2&quot;</span>:</span><br><span class="line">            cards_tools.show_all()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> action == <span class="string">&quot;3&quot;</span>:</span><br><span class="line">            cards_tools.search_card()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> action == <span class="string">&quot;0&quot;</span>:</span><br><span class="line">        print(<span class="string">&quot;欢迎再次使用【名片管理系统】&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&quot;输入错误，请重新输入：&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>至此：<code>cards_main</code> 中的所有代码全部开发完毕！</p></blockquote><h3 id="1-5-完成-show-menu-函数"><a href="#1-5-完成-show-menu-函数" class="headerlink" title="1.5 完成 show_menu 函数"></a>1.5 完成 <code>show_menu</code> 函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_menu</span>():</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;显示菜单</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    print(<span class="string">&quot;*&quot;</span> * <span class="number">50</span>)</span><br><span class="line">    print(<span class="string">&quot;欢迎使用【菜单管理系统】V1.0&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;1. 新建名片&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;2. 显示全部&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;3. 查询名片&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;0. 退出系统&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;*&quot;</span> * <span class="number">50</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="02-保存名片数据的结构"><a href="#02-保存名片数据的结构" class="headerlink" title="02. 保存名片数据的结构"></a>02. 保存名片数据的结构</h2><p><strong>程序就是用来处理数据的，而变量就是用来存储数据的</strong></p><ul><li>使用 <strong>字典</strong> 记录 <strong>每一张名片</strong> 的详细信息</li><li>使用 <strong>列表</strong> 统一记录所有的 <strong>名片字典</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/001_%E5%90%8D%E7%89%87%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%85%A8%E5%B1%80%E5%88%97%E8%A1%A8.png" alt=""></p><h3 id="定义名片列表变量"><a href="#定义名片列表变量" class="headerlink" title="定义名片列表变量"></a>定义名片列表变量</h3><ul><li>在 <code>cards_tools</code> 文件的顶部增加一个 <strong>列表变量</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 所有名片记录的列表</span></span><br><span class="line">card_list = []</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><ol><li><strong>所有名片相关操作</strong>，都需要使用这个列表，所以应该 <strong>定义在程序的顶部</strong></li><li><strong>程序刚运行时，没有数据</strong>，所以是 <strong>空列表</strong></li></ol><h2 id="03-新增名片"><a href="#03-新增名片" class="headerlink" title="03. 新增名片"></a>03. 新增名片</h2><h3 id="3-1-功能分析"><a href="#3-1-功能分析" class="headerlink" title="3.1 功能分析"></a>3.1 功能分析</h3><ol><li>提示用户依次输入名片信息</li><li>将名片信息保存到一个字典</li><li>将字典添加到名片列表</li><li>提示名片添加完成</li></ol><h3 id="3-2-实现-new-card-方法"><a href="#3-2-实现-new-card-方法" class="headerlink" title="3.2 实现 new_card 方法"></a>3.2 实现 new_card 方法</h3><ul><li>根据步骤实现代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new_card</span>():</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;新建名片</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    print(<span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br><span class="line">    print(<span class="string">&quot;功能：新建名片&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1. 提示用户输入名片信息</span></span><br><span class="line">    name = <span class="built_in">input</span>(<span class="string">&quot;请输入姓名：&quot;</span>)</span><br><span class="line">    phone = <span class="built_in">input</span>(<span class="string">&quot;请输入电话：&quot;</span>)</span><br><span class="line">    qq = <span class="built_in">input</span>(<span class="string">&quot;请输入 QQ 号码：&quot;</span>)</span><br><span class="line">    email = <span class="built_in">input</span>(<span class="string">&quot;请输入邮箱：&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 将用户信息保存到一个字典</span></span><br><span class="line">    card_dict = &#123;<span class="string">&quot;name&quot;</span>: name,</span><br><span class="line">                 <span class="string">&quot;phone&quot;</span>: phone,</span><br><span class="line">                 <span class="string">&quot;qq&quot;</span>: qq,</span><br><span class="line">                 <span class="string">&quot;email&quot;</span>: email&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. 将用户字典添加到名片列表</span></span><br><span class="line">    card_list.append(card_dict)</span><br><span class="line"></span><br><span class="line">    print(card_list)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 4. 提示添加成功信息</span></span><br><span class="line">    print(<span class="string">&quot;成功添加 %s 的名片&quot;</span> % card_dict[<span class="string">&quot;name&quot;</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>技巧：在 <code>PyCharm</code> 中，可以使用 <code>SHIFT + F6</code> 统一修改变量名</p></blockquote><h2 id="04-显示所有名片"><a href="#04-显示所有名片" class="headerlink" title="04. 显示所有名片"></a>04. 显示所有名片</h2><h3 id="4-1-功能分析"><a href="#4-1-功能分析" class="headerlink" title="4.1 功能分析"></a>4.1 功能分析</h3><ul><li>循环遍历名片列表，顺序显示每一个字典的信息</li></ul><h3 id="4-2-基础代码实现"><a href="#4-2-基础代码实现" class="headerlink" title="4.2 基础代码实现"></a>4.2 基础代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_all</span>():</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;显示全部</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    print(<span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br><span class="line">    print(<span class="string">&quot;功能：显示全部&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> card_dict <span class="keyword">in</span> card_list:</span><br><span class="line"></span><br><span class="line">        print(card_dict)</span><br><span class="line">        </span><br></pre></td></tr></table></figure><ul><li>显示效果不好！</li></ul><h3 id="4-3-增加标题和使用-t-显示"><a href="#4-3-增加标题和使用-t-显示" class="headerlink" title="4.3 增加标题和使用 \t 显示"></a>4.3 增加标题和使用 <code>\t</code> 显示</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_all</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;显示全部</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    print(<span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br><span class="line">    print(<span class="string">&quot;功能：显示全部&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打印表头</span></span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> [<span class="string">&quot;姓名&quot;</span>, <span class="string">&quot;电话&quot;</span>, <span class="string">&quot;QQ&quot;</span>, <span class="string">&quot;邮箱&quot;</span>]:</span><br><span class="line">        print(name, end=<span class="string">&quot;\t\t&quot;</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打印分隔线</span></span><br><span class="line">    print(<span class="string">&quot;=&quot;</span> * <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> card_dict <span class="keyword">in</span> card_list:</span><br><span class="line"></span><br><span class="line">        print(<span class="string">&quot;%s\t\t%s\t\t%s\t\t%s&quot;</span> % (card_dict[<span class="string">&quot;name&quot;</span>],</span><br><span class="line">                                        card_dict[<span class="string">&quot;phone&quot;</span>],</span><br><span class="line">                                        card_dict[<span class="string">&quot;qq&quot;</span>],</span><br><span class="line">                                        card_dict[<span class="string">&quot;email&quot;</span>]))</span><br></pre></td></tr></table></figure><h3 id="4-4-增加没有名片记录判断"><a href="#4-4-增加没有名片记录判断" class="headerlink" title="4.4 增加没有名片记录判断"></a>4.4 增加没有名片记录判断</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_all</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;显示全部</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    print(<span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br><span class="line">    print(<span class="string">&quot;功能：显示全部&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1. 判断是否有名片记录</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(card_list) == <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">&quot;提示：没有任何名片记录&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><ul><li>在函数中使用 <code>return</code> 表示返回</li><li>如果在 <code>return</code> 后没有跟任何内容，只是表示该函数执行到此就不再执行后续的代码</li></ul><h2 id="05-查询名片"><a href="#05-查询名片" class="headerlink" title="05. 查询名片"></a>05. 查询名片</h2><h3 id="5-1-功能分析"><a href="#5-1-功能分析" class="headerlink" title="5.1 功能分析"></a>5.1 功能分析</h3><ol><li>提示用户要搜索的姓名</li><li>根据用户输入的姓名遍历列表</li><li>搜索到指定的名片后，再执行后续的操作</li></ol><h3 id="5-2-代码实现"><a href="#5-2-代码实现" class="headerlink" title="5.2 代码实现"></a>5.2 代码实现</h3><ul><li>查询功能实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search_card</span>():</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;搜索名片</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    print(<span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br><span class="line">    print(<span class="string">&quot;功能：搜索名片&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1. 提示要搜索的姓名</span></span><br><span class="line">    find_name = <span class="built_in">input</span>(<span class="string">&quot;请输入要搜索的姓名：&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 遍历字典</span></span><br><span class="line">    <span class="keyword">for</span> card_dict <span class="keyword">in</span> card_list:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> card_dict[<span class="string">&quot;name&quot;</span>] == find_name:</span><br><span class="line"></span><br><span class="line">            print(<span class="string">&quot;姓名\t\t\t电话\t\t\tQQ\t\t\t邮箱&quot;</span>)</span><br><span class="line">            print(<span class="string">&quot;-&quot;</span> * <span class="number">40</span>)</span><br><span class="line">            </span><br><span class="line">            print(<span class="string">&quot;%s\t\t\t%s\t\t\t%s\t\t\t%s&quot;</span> % (</span><br><span class="line">                card_dict[<span class="string">&quot;name&quot;</span>],</span><br><span class="line">                card_dict[<span class="string">&quot;phone&quot;</span>],</span><br><span class="line">                card_dict[<span class="string">&quot;qq&quot;</span>],</span><br><span class="line">                card_dict[<span class="string">&quot;email&quot;</span>]))</span><br><span class="line"></span><br><span class="line">            print(<span class="string">&quot;-&quot;</span> * <span class="number">40</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># TODO(小明) 针对找到的字典进行后续操作：修改/删除</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&quot;没有找到 %s&quot;</span> % find_name)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>增加名片操作函数：<strong>修改</strong>/<strong>删除</strong>/<strong>返回主菜单</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deal_card</span>(<span class="params">find_dict</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;操作搜索到的名片字典</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param find_dict:找到的名片字典</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    print(find_dict)</span><br><span class="line"></span><br><span class="line">    action_str = <span class="built_in">input</span>(<span class="string">&quot;请选择要执行的操作 &quot;</span></span><br><span class="line">                       <span class="string">&quot;[1] 修改 [2] 删除 [0] 返回上级菜单&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> action == <span class="string">&quot;1&quot;</span>:</span><br><span class="line">        print(<span class="string">&quot;修改&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> action == <span class="string">&quot;2&quot;</span>:</span><br><span class="line">        print(<span class="string">&quot;删除&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="06-修改和删除"><a href="#06-修改和删除" class="headerlink" title="06. 修改和删除"></a>06. 修改和删除</h2><h3 id="6-1-查询成功后删除名片"><a href="#6-1-查询成功后删除名片" class="headerlink" title="6.1 查询成功后删除名片"></a>6.1 查询成功后删除名片</h3><ul><li>由于找到的字典记录已经在列表中保存</li><li>要删除名片记录，只需要把列表中对应的字典删除即可</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">elif</span> action == <span class="string">&quot;2&quot;</span>:</span><br><span class="line">    card_list.remove(find_dict)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;删除成功&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="6-2-修改名片"><a href="#6-2-修改名片" class="headerlink" title="6.2 修改名片"></a>6.2 修改名片</h3><ul><li>由于找到的字典记录已经在列表中保存</li><li>要修改名片记录，只需要把列表中对应的字典中每一个键值对的数据修改即可</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> action == <span class="string">&quot;1&quot;</span>:</span><br><span class="line"></span><br><span class="line">    find_dict[<span class="string">&quot;name&quot;</span>] = <span class="built_in">input</span>(<span class="string">&quot;请输入姓名：&quot;</span>)</span><br><span class="line">    find_dict[<span class="string">&quot;phone&quot;</span>] = <span class="built_in">input</span>(<span class="string">&quot;请输入电话：&quot;</span>)</span><br><span class="line">    find_dict[<span class="string">&quot;qq&quot;</span>] = <span class="built_in">input</span>(<span class="string">&quot;请输入QQ：&quot;</span>)</span><br><span class="line">    find_dict[<span class="string">&quot;email&quot;</span>] = <span class="built_in">input</span>(<span class="string">&quot;请输入邮件：&quot;</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;%s 的名片修改成功&quot;</span> % find_dict[<span class="string">&quot;name&quot;</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="修改名片细化"><a href="#修改名片细化" class="headerlink" title="修改名片细化"></a>修改名片细化</h4><ul><li><strong>如果用户在使用时，某些名片内容并不想修改</strong>，应该如何做呢？—— 既然系统提供的 <code>input</code> 函数不能满足需求，那么就新定义一个函数 <code>input_card_info</code> 对系统的 <code>input</code> 函数进行扩展</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">input_card_info</span>(<span class="params">dict_value, tip_message</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;输入名片信息</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param dict_value: 字典原有值</span></span><br><span class="line"><span class="string">    :param tip_message: 输入提示信息</span></span><br><span class="line"><span class="string">    :return: 如果输入，返回输入内容，否则返回字典原有值</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 1. 提示用户输入内容</span></span><br><span class="line">    result_str = <span class="built_in">input</span>(tip_message)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 针对用户的输入进行判断，如果用户输入了内容，直接返回结果</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(result_str) &gt; <span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result_str</span><br><span class="line">    <span class="comment"># 3. 如果用户没有输入内容，返回 `字典中原有的值`</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dict_value</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="07-LINUX-上的-Shebang-符号"><a href="#07-LINUX-上的-Shebang-符号" class="headerlink" title="07. LINUX 上的 Shebang 符号(#!)"></a>07. LINUX 上的 <code>Shebang</code> 符号(<code>#!</code>)</h2><ul><li><code>#!</code>这个符号叫做 <code>Shebang</code> 或者 <code>Sha-bang</code></li><li><code>Shebang</code> 通常在 <code>Unix</code> 系统脚本的中 <strong>第一行开头</strong> 使用</li><li>指明 <strong>执行这个脚本文件</strong> 的 <strong>解释程序</strong></li></ul><h3 id="使用-Shebang-的步骤"><a href="#使用-Shebang-的步骤" class="headerlink" title="使用 Shebang 的步骤"></a>使用 Shebang 的步骤</h3><ul><li><ol><li>使用 <code>which</code> 查询 <code>python3</code> 解释器所在路径</li></ol></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">which</span> python3</span><br></pre></td></tr></table></figure><ul><li><ol><li>修改要运行的 <strong>主 python 文件</strong>，在第一行增加以下内容</li></ol></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/python3</span></span><br></pre></td></tr></table></figure><ul><li><ol><li>修改 <strong>主 python 文件</strong> 的文件权限，增加执行权限</li></ol></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ chmod +x cards_main.py</span><br></pre></td></tr></table></figure><ul><li><ol><li>在需要时执行程序即可</li></ol></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./cards_main.py</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;综合应用-——-名片管理系统&quot;&gt;&lt;a href=&quot;#综合应用-——-名片管理系统&quot; class=&quot;headerlink&quot; title=&quot;综合应用 —— 名片管理系统&quot;&gt;&lt;/a&gt;综合应用 —— 名片管理系统&lt;/h1&gt;&lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot;</summary>
      
    
    
    
    <category term="python" scheme="https://xxren8218.github.io/categories/python/"/>
    
    
    <category term="python基础" scheme="https://xxren8218.github.io/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>高级变量类型</title>
    <link href="https://xxren8218.github.io/20210305/%E9%AB%98%E7%BA%A7%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B.html"/>
    <id>https://xxren8218.github.io/20210305/%E9%AB%98%E7%BA%A7%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B.html</id>
    <published>2021-03-05T12:17:20.000Z</published>
    <updated>2021-03-05T12:17:36.209Z</updated>
    
    <content type="html"><![CDATA[<h1 id="高级变量类型"><a href="#高级变量类型" class="headerlink" title="高级变量类型"></a>高级变量类型</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>列表</li><li>元组</li><li>字典</li><li>字符串</li><li>公共方法</li><li>变量高级</li></ul><h3 id="知识点回顾"><a href="#知识点回顾" class="headerlink" title="知识点回顾"></a>知识点回顾</h3><ul><li>Python 中数据类型可以分为 <strong>数字型</strong> 和 <strong>非数字型</strong></li><li>数字型<ul><li>整型 (<code>int</code>)</li><li>浮点型（<code>float</code>）</li><li>布尔型（<code>bool</code>） <ul><li>真 <code>True</code> <code>非 0 数</code> —— <strong>非零即真</strong></li><li>假 <code>False</code> <code>0</code></li></ul></li><li>复数型 (<code>complex</code>)<ul><li>主要用于科学计算，例如：平面场问题、波动问题、电感电容等问题</li></ul></li></ul></li><li><p>非数字型</p><ul><li>字符串</li><li>列表</li><li>元组</li><li>字典</li></ul></li><li><p>在 <code>Python</code> 中，所有 <strong>非数字型变量</strong> 都支持以下特点：</p><ol><li>都是一个 <strong>序列</strong> <code>sequence</code>，也可以理解为 <strong>容器</strong></li><li><strong>取值</strong> <code>[]</code></li><li><strong>遍历</strong> <code>for in</code></li><li><strong>计算长度</strong>、<strong>最大/最小值</strong>、<strong>比较</strong>、<strong>删除</strong></li><li><strong>链接</strong> <code>+</code> 和 <strong>重复</strong> <code>*</code></li><li><strong>切片</strong></li></ol></li></ul><h2 id="01-列表"><a href="#01-列表" class="headerlink" title="01. 列表"></a>01. 列表</h2><h3 id="1-1-列表的定义"><a href="#1-1-列表的定义" class="headerlink" title="1.1 列表的定义"></a>1.1 列表的定义</h3><ul><li><code>List</code>（列表） 是 <code>Python</code> 中使用 <strong>最频繁</strong> 的数据类型，在其他语言中通常叫做 <strong>数组</strong></li><li>专门用于存储 <strong>一串 信息</strong></li><li>列表用 <code>[]</code> 定义，<strong>数据</strong> 之间使用 <code>,</code> 分隔</li><li>列表的 <strong>索引</strong> 从 <code>0</code> 开始<ul><li><strong>索引</strong> 就是数据在 <strong>列表</strong> 中的位置编号，<strong>索引</strong> 又可以被称为 <strong>下标</strong></li></ul></li></ul><blockquote><p>注意：从列表中取值时，如果 <strong>超出索引范围</strong>，程序会报错</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;lisi&quot;</span>, <span class="string">&quot;wangwu&quot;</span>]</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/001_%E5%88%97%E8%A1%A8%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt=""></p><h3 id="1-2-列表常用操作"><a href="#1-2-列表常用操作" class="headerlink" title="1.2 列表常用操作"></a>1.2 列表常用操作</h3><ul><li>在 <code>ipython3</code> 中定义一个 <strong>列表</strong>，例如：<code>name_list = []</code></li><li>输入 <code>name_list.</code> 按下 <code>TAB</code> 键，<code>ipython</code> 会提示 <strong>列表</strong> 能够使用的 <strong>方法</strong> 如下：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [1]: name_list.</span><br><span class="line">name_list.append   name_list.count    name_list.insert   name_list.reverse</span><br><span class="line">name_list.clear    name_list.extend   name_list.pop      name_list.sort</span><br><span class="line">name_list.copy     name_list.index    name_list.remove </span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>序号</th><th>分类</th><th>关键字 / 函数 / 方法</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td>增加</td><td>列表.insert(索引, 数据)</td><td>在指定位置插入数据</td></tr><tr><td></td><td></td><td>列表.append(数据)</td><td>在末尾追加数据</td></tr><tr><td></td><td></td><td>列表.extend(列表2)</td><td>将列表2 的数据追加到列表</td></tr><tr><td>2</td><td>修改</td><td>列表[索引] = 数据</td><td>修改指定索引的数据</td></tr><tr><td>3</td><td>删除</td><td>del 列表[索引]</td><td>删除指定索引的数据</td></tr><tr><td></td><td></td><td>列表.remove[数据]</td><td>删除第一个出现的指定数据</td></tr><tr><td></td><td></td><td>列表.pop</td><td>删除末尾数据</td></tr><tr><td></td><td></td><td>列表.pop(索引)</td><td>删除指定索引数据</td></tr><tr><td></td><td></td><td>列表.clear</td><td>清空列表</td></tr><tr><td>4</td><td>统计</td><td>len(列表)</td><td>列表长度</td></tr><tr><td></td><td></td><td>列表.count(数据)</td><td>数据在列表中出现的次数</td></tr><tr><td>5</td><td>排序</td><td>列表.sort()</td><td>升序排序</td></tr><tr><td></td><td></td><td>列表.sort(reverse=True)</td><td>降序排序</td></tr><tr><td></td><td></td><td>列表.reverse()</td><td>逆序、反转</td></tr></tbody></table></div><h4 id="del-关键字（科普）"><a href="#del-关键字（科普）" class="headerlink" title="del 关键字（科普）"></a>del 关键字（科普）</h4><ul><li>使用 <code>del</code> 关键字(<code>delete</code>) 同样可以删除列表中元素</li><li><code>del</code> 关键字本质上是用来 <strong>将一个变量从内存中删除的</strong></li><li>如果使用 <code>del</code> 关键字将变量从内存中删除，后续的代码就不能再使用这个变量了</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> name_list[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><blockquote><p>在日常开发中，要从列表删除数据，建议 <strong>使用列表提供的方法</strong></p></blockquote><h4 id="关键字、函数和方法（科普）"><a href="#关键字、函数和方法（科普）" class="headerlink" title="关键字、函数和方法（科普）"></a>关键字、函数和方法（科普）</h4><ul><li><strong>关键字</strong> 是 Python 内置的、具有特殊意义的标识符</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> keyword</span><br><span class="line">In [<span class="number">2</span>]: print(keyword.kwlist)</span><br><span class="line">In [<span class="number">3</span>]: print(<span class="built_in">len</span>(keyword.kwlist))</span><br></pre></td></tr></table></figure><blockquote><p>关键字后面不需要使用括号</p></blockquote><ul><li><strong>函数</strong> 封装了独立功能，可以直接调用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数名(参数)</span><br></pre></td></tr></table></figure><blockquote><p>函数需要死记硬背</p></blockquote><ul><li><strong>方法</strong> 和函数类似，同样是封装了独立的功能</li><li><strong>方法</strong> 需要通过 <strong>对象</strong> 来调用，表示针对这个 <strong>对象</strong> 要做的操作</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象.方法名(参数)</span><br></pre></td></tr></table></figure><blockquote><p>在变量后面输入 <code>.</code>，然后选择针对这个变量要执行的操作，记忆起来比函数要简单很多</p></blockquote><h3 id="1-3-循环遍历"><a href="#1-3-循环遍历" class="headerlink" title="1.3 循环遍历"></a>1.3 循环遍历</h3><ul><li><p><strong>遍历</strong> 就是 <strong>从头到尾</strong> <strong>依次</strong> 从 <strong>列表</strong> 中获取数据</p><ul><li>在 <strong>循环体内部</strong> 针对 <strong>每一个元素</strong>，执行相同的操作</li></ul></li><li><p>在 <code>Python</code> 中为了提高列表的遍历效率，专门提供的 <strong>迭代 iteration 遍历</strong></p></li><li>使用 <code>for</code> 就能够实现迭代遍历</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># for 循环内部使用的变量 in 列表</span></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> name_list:</span><br><span class="line"></span><br><span class="line">    循环内部针对列表元素进行操作</span><br><span class="line">    print(name)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/002_forin%E5%BE%AA%E7%8E%AF%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt=""></p><h3 id="1-4-应用场景"><a href="#1-4-应用场景" class="headerlink" title="1.4 应用场景"></a>1.4 <strong>应用场景</strong></h3><ul><li>尽管 <code>Python</code> 的 <strong>列表</strong> 中可以 <strong>存储不同类型的数据</strong></li><li>但是在开发中，更多的应用场景是<ol><li><strong>列表</strong> 存储相同类型的数据</li><li>通过 <strong>迭代遍历</strong>，在循环体内部，针对列表中的每一项元素，执行相同的操作</li></ol></li></ul><h2 id="02-元组"><a href="#02-元组" class="headerlink" title="02. 元组"></a>02. 元组</h2><h3 id="2-1-元组的定义"><a href="#2-1-元组的定义" class="headerlink" title="2.1 元组的定义"></a>2.1 元组的定义</h3><ul><li><code>Tuple</code>（元组）与列表类似，不同之处在于元组的 <strong>元素不能修改</strong><ul><li><strong>元组</strong> 表示多个元素组成的序列</li><li><strong>元组</strong> 在 <code>Python</code> 开发中，有特定的应用场景</li></ul></li><li>用于存储 <strong>一串 信息</strong>，<strong>数据</strong> 之间使用 <code>,</code> 分隔</li><li>元组用 <code>()</code> 定义</li><li>元组的 <strong>索引</strong> 从 <code>0</code> 开始<ul><li><strong>索引</strong> 就是数据在 <strong>元组</strong> 中的位置编号</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">info_tuple = (<span class="string">&quot;zhangsan&quot;</span>, <span class="number">18</span>, <span class="number">1.75</span>)</span><br></pre></td></tr></table></figure><h4 id="创建空元组"><a href="#创建空元组" class="headerlink" title="创建空元组"></a>创建空元组</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">info_tuple = ()</span><br></pre></td></tr></table></figure><h4 id="元组中-只包含一个元素-时，需要-在元素后面添加逗号"><a href="#元组中-只包含一个元素-时，需要-在元素后面添加逗号" class="headerlink" title="元组中 只包含一个元素 时，需要 在元素后面添加逗号"></a>元组中 <strong>只包含一个元素</strong> 时，需要 <strong>在元素后面添加逗号</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">info_tuple = (<span class="number">50</span>, )</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/003_%E5%85%83%E7%BB%84%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt=""></p><h3 id="2-2-元组常用操作"><a href="#2-2-元组常用操作" class="headerlink" title="2.2 元组常用操作"></a>2.2 元组常用操作</h3><ul><li>在 <code>ipython3</code> 中定义一个 <strong>元组</strong>，例如：<code>info = ()</code></li><li>输入 <code>info.</code> 按下 <code>TAB</code> 键，<code>ipython</code> 会提示 <strong>元组</strong> 能够使用的函数如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">info.count  info.index</span><br></pre></td></tr></table></figure><blockquote><p>有关 <strong>元组</strong> 的 <strong>常用操作</strong> 可以参照上图练习</p></blockquote><h3 id="2-3-循环遍历"><a href="#2-3-循环遍历" class="headerlink" title="2.3 循环遍历"></a>2.3 循环遍历</h3><ul><li><strong>取值</strong> 就是从 <strong>元组</strong> 中获取存储在指定位置的数据</li><li><strong>遍历</strong> 就是 <strong>从头到尾</strong> <strong>依次</strong> 从 <strong>元组</strong> 中获取数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># for 循环内部使用的变量 in 元组</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> info:</span><br><span class="line"></span><br><span class="line">    循环内部针对元组元素进行操作</span><br><span class="line">    print(item)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><ul><li>在 <code>Python</code> 中，可以使用 <code>for</code> 循环遍历所有非数字型类型的变量：<strong>列表</strong>、<strong>元组</strong>、<strong>字典</strong> 以及 <strong>字符串</strong></li><li>提示：在实际开发中，除非 <strong>能够确认元组中的数据类型</strong>，否则针对元组的循环遍历需求并不是很多</li></ul></blockquote><h3 id="2-4-应用场景"><a href="#2-4-应用场景" class="headerlink" title="2.4 应用场景"></a>2.4 应用场景</h3><ul><li>尽管可以使用 <code>for in</code> 遍历 <strong>元组</strong></li><li>但是在开发中，更多的应用场景是：<ul><li><strong>函数的 参数 和 返回值</strong>，一个函数可以接收 <strong>任意多个参数</strong>，或者 <strong>一次返回多个数据</strong><ul><li>有关 <strong>函数的参数 和 返回值</strong>，在后续 <strong>函数高级</strong> 给大家介绍</li></ul></li><li><strong>格式字符串</strong>，格式化字符串后面的 <code>()</code> 本质上就是一个元组</li><li><strong>让列表不可以被修改</strong>，以保护数据安全</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">info = (<span class="string">&quot;zhangsan&quot;</span>, <span class="number">18</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;%s 的年龄是 %d&quot;</span> % info)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="元组和列表之间的转换"><a href="#元组和列表之间的转换" class="headerlink" title="元组和列表之间的转换"></a>元组和列表之间的转换</h4><ul><li>使用 <code>list</code> 函数可以把元组转换成列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>(元组) </span><br></pre></td></tr></table></figure><ul><li>使用 <code>tuple</code> 函数可以把列表转换成元组</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tuple</span>(列表)</span><br></pre></td></tr></table></figure><h2 id="03-字典"><a href="#03-字典" class="headerlink" title="03. 字典"></a>03. 字典</h2><h3 id="3-1-字典的定义"><a href="#3-1-字典的定义" class="headerlink" title="3.1 字典的定义"></a>3.1 字典的定义</h3><ul><li><code>dictionary</code>（字典） 是 <strong>除列表以外</strong> <code>Python</code> 之中 <strong>最灵活</strong> 的数据类型</li><li>字典同样可以用来 <strong>存储多个数据</strong><ul><li>通常用于存储 <strong>描述一个 <code>物体</code> 的相关信息</strong> </li></ul></li><li>和列表的区别<ul><li><strong>列表</strong> 是 <strong>有序</strong> 的对象集合</li><li><strong>字典</strong> 是 <strong>无序</strong> 的对象集合</li></ul></li><li>字典用 <code>&#123;&#125;</code> 定义</li><li>字典使用 <strong>键值对</strong> 存储数据，键值对之间使用 <code>,</code> 分隔<ul><li><strong>键</strong> <code>key</code> 是索引</li><li><strong>值</strong> <code>value</code> 是数据</li><li><strong>键</strong> 和 <strong>值</strong> 之间使用 <code>:</code> 分隔</li><li><strong>键必须是唯一的</strong></li><li><strong>值</strong> 可以取任何数据类型，但 <strong>键</strong> 只能使用 <strong>字符串</strong>、<strong>数字</strong>或 <strong>元组</strong></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">xiaoming = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;小明&quot;</span>,</span><br><span class="line">            <span class="string">&quot;age&quot;</span>: <span class="number">18</span>,</span><br><span class="line">            <span class="string">&quot;gender&quot;</span>: <span class="literal">True</span>,</span><br><span class="line">            <span class="string">&quot;height&quot;</span>: <span class="number">1.75</span>&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/002_%E5%AD%97%E5%85%B8%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt=""></p><h3 id="3-2-字典常用操作"><a href="#3-2-字典常用操作" class="headerlink" title="3.2 字典常用操作"></a>3.2 字典常用操作</h3><ul><li>在 <code>ipython3</code> 中定义一个 <strong>字典</strong>，例如：<code>xiaoming = &#123;&#125;</code></li><li>输入 <code>xiaoming.</code> 按下 <code>TAB</code> 键，<code>ipython</code> 会提示 <strong>字典</strong> 能够使用的函数如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [1]: xiaoming.</span><br><span class="line">xiaoming.clear       xiaoming.items       xiaoming.setdefault</span><br><span class="line">xiaoming.copy        xiaoming.keys        xiaoming.update</span><br><span class="line">xiaoming.fromkeys    xiaoming.pop         xiaoming.values</span><br><span class="line">xiaoming.get         xiaoming.popitem    </span><br></pre></td></tr></table></figure><blockquote><p>有关 <strong>字典</strong> 的 <strong>常用操作</strong> 可以参照上图练习</p></blockquote><h3 id="3-3-循环遍历"><a href="#3-3-循环遍历" class="headerlink" title="3.3 循环遍历"></a>3.3 循环遍历</h3><ul><li><strong>遍历</strong> 就是 <strong>依次</strong> 从 <strong>字典</strong> 中获取所有键值对</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># for 循环内部使用的 `key 的变量` in 字典</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> xiaoming:</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;%s: %s&quot;</span> % (k, xiaoming[k]))</span><br></pre></td></tr></table></figure><blockquote><p>提示：在实际开发中，由于字典中每一个键值对保存数据的类型是不同的，所以针对字典的循环遍历需求并不是很多</p></blockquote><h3 id="3-4-应用场景"><a href="#3-4-应用场景" class="headerlink" title="3.4 应用场景"></a>3.4 <strong>应用场景</strong></h3><ul><li>尽管可以使用 <code>for in</code> 遍历 <strong>字典</strong></li><li>但是在开发中，更多的应用场景是：<ul><li>使用 <strong>多个键值对</strong>，存储 <strong>描述一个 <code>物体</code> 的相关信息</strong> —— 描述更复杂的数据信息</li><li>将 <strong>多个字典</strong> 放在 <strong>一个列表</strong> 中，再进行遍历，在循环体内部针对每一个字典进行 <strong>相同的处理</strong></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">card_list = [&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">              <span class="string">&quot;qq&quot;</span>: <span class="string">&quot;12345&quot;</span>,</span><br><span class="line">              <span class="string">&quot;phone&quot;</span>: <span class="string">&quot;110&quot;</span>&#125;,</span><br><span class="line">             &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;李四&quot;</span>,</span><br><span class="line">              <span class="string">&quot;qq&quot;</span>: <span class="string">&quot;54321&quot;</span>,</span><br><span class="line">              <span class="string">&quot;phone&quot;</span>: <span class="string">&quot;10086&quot;</span>&#125;</span><br><span class="line">             ]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="04-字符串"><a href="#04-字符串" class="headerlink" title="04. 字符串"></a>04. 字符串</h2><h3 id="4-1-字符串的定义"><a href="#4-1-字符串的定义" class="headerlink" title="4.1 字符串的定义"></a>4.1 字符串的定义</h3><ul><li><strong>字符串</strong> 就是 <strong>一串字符</strong>，是编程语言中表示文本的数据类型</li><li>在 Python 中可以使用 <strong>一对双引号</strong> <code>&quot;</code> 或者 <strong>一对单引号</strong> <code>&#39;</code> 定义一个字符串<ul><li>虽然可以使用 <code>\&quot;</code> 或者 <code>\&#39;</code> 做字符串的转义，但是在实际开发中：<ul><li>如果字符串内部需要使用 <code>&quot;</code>，可以使用 <code>&#39;</code> 定义字符串</li><li>如果字符串内部需要使用 <code>&#39;</code>，可以使用 <code>&quot;</code> 定义字符串</li></ul></li></ul></li><li>可以使用 <strong>索引</strong> 获取一个字符串中 <strong>指定位置的字符</strong>，索引计数从 <strong>0</strong> 开始</li><li>也可以使用 <code>for</code> <strong>循环遍历</strong> 字符串中每一个字符</li></ul><blockquote><p>大多数编程语言都是用 <code>&quot;</code> 来定义字符串</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">&quot;Hello Python&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> string:</span><br><span class="line">    print(c)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/005_%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt=""></p><h3 id="4-2-字符串的常用操作"><a href="#4-2-字符串的常用操作" class="headerlink" title="4.2 字符串的常用操作"></a>4.2 字符串的常用操作</h3><ul><li>在 <code>ipython3</code> 中定义一个 <strong>字符串</strong>，例如：<code>hello_str = &quot;&quot;</code></li><li>输入 <code>hello_str.</code> 按下 <code>TAB</code> 键，<code>ipython</code> 会提示 <strong>字符串</strong> 能够使用的 <strong>方法</strong> 如下：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">In [1]: hello_str.</span><br><span class="line">hello_str.capitalize    hello_str.isidentifier  hello_str.rindex</span><br><span class="line">hello_str.casefold      hello_str.islower       hello_str.rjust</span><br><span class="line">hello_str.center        hello_str.isnumeric     hello_str.rpartition</span><br><span class="line">hello_str.count         hello_str.isprintable   hello_str.rsplit</span><br><span class="line">hello_str.encode        hello_str.isspace       hello_str.rstrip</span><br><span class="line">hello_str.endswith      hello_str.istitle       hello_str.split</span><br><span class="line">hello_str.expandtabs    hello_str.isupper       hello_str.splitlines</span><br><span class="line">hello_str.find          hello_str.join          hello_str.startswith</span><br><span class="line">hello_str.format        hello_str.ljust         hello_str.strip</span><br><span class="line">hello_str.format_map    hello_str.lower         hello_str.swapcase</span><br><span class="line">hello_str.index         hello_str.lstrip        hello_str.title</span><br><span class="line">hello_str.isalnum       hello_str.maketrans     hello_str.translate</span><br><span class="line">hello_str.isalpha       hello_str.partition     hello_str.upper</span><br><span class="line">hello_str.isdecimal     hello_str.replace       hello_str.zfill</span><br><span class="line">hello_str.isdigit       hello_str.rfind</span><br></pre></td></tr></table></figure><blockquote><p>提示：正是因为 python 内置提供的方法足够多，才使得在开发时，能够针对字符串进行更加灵活的操作！应对更多的开发需求！</p></blockquote><h4 id="1-判断类型-9"><a href="#1-判断类型-9" class="headerlink" title="1) 判断类型 - 9"></a>1) 判断类型 - 9</h4><div class="table-container"><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>string.isspace()</td><td>如果 string 中只包含空格，则返回 True</td></tr><tr><td>string.isalnum()</td><td>如果 string 至少有一个字符并且所有字符都是字母或数字则返回 True</td></tr><tr><td>string.isalpha()</td><td>如果 string 至少有一个字符并且所有字符都是字母则返回 True</td></tr><tr><td>string.isdecimal()</td><td>如果 string 只包含数字则返回 True，<code>全角数字</code></td></tr><tr><td>string.isdigit()</td><td>如果 string 只包含数字则返回 True，<code>全角数字</code>、<code>⑴</code>、<code>\u00b2</code></td></tr><tr><td>string.isnumeric()</td><td>如果 string 只包含数字则返回 True，<code>全角数字</code>，<code>汉字数字</code></td></tr><tr><td>string.istitle()</td><td>如果 string 是标题化的(每个单词的首字母大写)则返回 True</td></tr><tr><td>string.islower()</td><td>如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回 True</td></tr><tr><td>string.isupper()</td><td>如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回 True</td></tr></tbody></table></div><h4 id="2-查找和替换-7"><a href="#2-查找和替换-7" class="headerlink" title="2) 查找和替换 - 7"></a>2) 查找和替换 - 7</h4><div class="table-container"><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>string.startswith(str)</td><td>检查字符串是否是以 str 开头，是则返回 True</td></tr><tr><td>string.endswith(str)</td><td>检查字符串是否是以 str 结束，是则返回 True</td></tr><tr><td>string.find(str, start=0, end=len(string))</td><td>检测 str 是否包含在 string 中，如果 start 和 end 指定范围，则检查是否包含在指定范围内，如果是返回开始的索引值，否则返回 <code>-1</code></td></tr><tr><td>string.rfind(str, start=0, end=len(string))</td><td>类似于 find()，不过是从右边开始查找</td></tr><tr><td>string.index(str, start=0, end=len(string))</td><td>跟 find() 方法类似，不过如果 str 不在 string 会报错</td></tr><tr><td>string.rindex(str, start=0, end=len(string))</td><td>类似于 index()，不过是从右边开始</td></tr><tr><td>string.replace(old_str, new_str, num=string.count(old))</td><td>把 string 中的 old_str 替换成 new_str，如果 num 指定，则替换不超过 num 次</td></tr></tbody></table></div><h4 id="3-大小写转换-5"><a href="#3-大小写转换-5" class="headerlink" title="3) 大小写转换 - 5"></a>3) 大小写转换 - 5</h4><div class="table-container"><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>string.capitalize()</td><td>把字符串的第一个字符大写</td></tr><tr><td>string.title()</td><td>把字符串的每个单词首字母大写</td></tr><tr><td>string.lower()</td><td>转换 string 中所有大写字符为小写</td></tr><tr><td>string.upper()</td><td>转换 string 中的小写字母为大写</td></tr><tr><td>string.swapcase()</td><td>翻转 string 中的大小写</td></tr></tbody></table></div><h4 id="4-文本对齐-3"><a href="#4-文本对齐-3" class="headerlink" title="4) 文本对齐 - 3"></a>4) 文本对齐 - 3</h4><div class="table-container"><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>string.ljust(width)</td><td>返回一个原字符串左对齐，并使用空格填充至长度 width 的新字符串</td></tr><tr><td>string.rjust(width)</td><td>返回一个原字符串右对齐，并使用空格填充至长度 width 的新字符串</td></tr><tr><td>string.center(width)</td><td>返回一个原字符串居中，并使用空格填充至长度 width 的新字符串</td></tr></tbody></table></div><h4 id="5-去除空白字符-3"><a href="#5-去除空白字符-3" class="headerlink" title="5) 去除空白字符 - 3"></a>5) 去除空白字符 - 3</h4><div class="table-container"><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>string.lstrip()</td><td>截掉 string 左边（开始）的空白字符</td></tr><tr><td>string.rstrip()</td><td>截掉 string 右边（末尾）的空白字符</td></tr><tr><td>string.strip()</td><td>截掉 string 左右两边的空白字符</td></tr></tbody></table></div><h4 id="6-拆分和连接-5"><a href="#6-拆分和连接-5" class="headerlink" title="6) 拆分和连接 - 5"></a>6) 拆分和连接 - 5</h4><div class="table-container"><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>string.partition(str)</td><td>把字符串 string 分成一个 3 元素的元组 (str前面, str, str后面)</td></tr><tr><td>string.rpartition(str)</td><td>类似于 partition() 方法，不过是从右边开始查找</td></tr><tr><td>string.split(str=””, num)</td><td>以 str 为分隔符拆分 string，如果 num 有指定值，则仅分隔 num + 1 个子字符串，str 默认包含 ‘\r’, ‘\t’, ‘\n’ 和空格</td></tr><tr><td>string.splitlines()</td><td>按照行(‘\r’, ‘\n’, ‘\r\n’)分隔，返回一个包含各行作为元素的列表</td></tr><tr><td>string.join(seq)</td><td>以 string 作为分隔符，将 seq 中所有的元素（的字符串表示）合并为一个新的字符串</td></tr></tbody></table></div><h3 id="4-3-字符串的切片"><a href="#4-3-字符串的切片" class="headerlink" title="4.3 字符串的切片"></a>4.3 字符串的切片</h3><ul><li><strong>切片</strong> 方法适用于 <strong>字符串</strong>、<strong>列表</strong>、<strong>元组</strong><ul><li><strong>切片</strong> 使用 <strong>索引值</strong> 来限定范围，从一个大的 <strong>字符串</strong> 中 <strong>切出</strong> 小的 <strong>字符串</strong></li><li><strong>列表</strong> 和 <strong>元组</strong> 都是 <strong>有序</strong> 的集合，都能够 <strong>通过索引值</strong> 获取到对应的数据</li><li><strong>字典</strong> 是一个 <strong>无序</strong> 的集合，是使用 <strong>键值对</strong> 保存数据</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/006_%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B4%A2%E5%BC%95%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt=""></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串[开始索引:结束索引:步长]</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ol><li>指定的区间属于 <strong>左闭右开</strong> 型 <code>[开始索引,  结束索引)</code> =&gt; <code>开始索引 &gt;= 范围 &lt; 结束索引</code><ul><li>从 <code>起始</code> 位开始，到 <strong><code>结束</code>位的前一位</strong> 结束（<strong>不包含结束位本身</strong>)</li></ul></li><li>从头开始，<strong>开始索引</strong> <strong>数字可以省略，冒号不能省略</strong></li><li>到末尾结束，<strong>结束索引</strong> <strong>数字可以省略，冒号不能省略</strong></li><li>步长默认为 <code>1</code>，如果连续切片，<strong>数字和冒号都可以省略</strong></li></ol><h4 id="索引的顺序和倒序"><a href="#索引的顺序和倒序" class="headerlink" title="索引的顺序和倒序"></a>索引的顺序和倒序</h4><ul><li>在 Python 中不仅支持 <strong>顺序索引</strong>，同时还支持 <strong>倒序索引</strong></li><li>所谓倒序索引就是 <strong>从右向左</strong> 计算索引<ul><li>最右边的索引值是 <strong>-1</strong>，依次递减</li></ul></li></ul><p><strong>演练需求</strong></p><ul><li><ol><li>截取从 2 ~ 5 位置 的字符串</li></ol></li><li><ol><li>截取从 2 ~ <code>末尾</code> 的字符串</li></ol></li><li><ol><li>截取从 <code>开始</code> ~ 5 位置 的字符串</li></ol></li><li><ol><li>截取完整的字符串</li></ol></li><li><ol><li>从开始位置，每隔一个字符截取字符串</li></ol></li><li><ol><li>从索引 1 开始，每隔一个取一个</li></ol></li><li><ol><li>截取从 2 ~ <code>末尾 - 1</code> 的字符串</li></ol></li><li><ol><li>截取字符串末尾两个字符</li></ol></li><li><ol><li>字符串的逆序（面试题）</li></ol></li></ul><p><strong>答案</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">num_str = <span class="string">&quot;0123456789&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 截取从 2 ~ 5 位置 的字符串</span></span><br><span class="line"><span class="built_in">print</span>(num_str[2:6])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 截取从 2 ~ `末尾` 的字符串</span></span><br><span class="line"><span class="built_in">print</span>(num_str[2:])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 截取从 `开始` ~ 5 位置 的字符串</span></span><br><span class="line"><span class="built_in">print</span>(num_str[:6])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 截取完整的字符串</span></span><br><span class="line"><span class="built_in">print</span>(num_str[:])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 从开始位置，每隔一个字符截取字符串</span></span><br><span class="line"><span class="built_in">print</span>(num_str[::2])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6. 从索引 1 开始，每隔一个取一个</span></span><br><span class="line"><span class="built_in">print</span>(num_str[1::2])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 倒序切片</span></span><br><span class="line"><span class="comment"># -1 表示倒数第一个字符</span></span><br><span class="line"><span class="built_in">print</span>(num_str[-1])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7. 截取从 2 ~ `末尾 - 1` 的字符串</span></span><br><span class="line"><span class="built_in">print</span>(num_str[2:-1])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 8. 截取字符串末尾两个字符</span></span><br><span class="line"><span class="built_in">print</span>(num_str[-2:])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 9. 字符串的逆序（面试题）</span></span><br><span class="line"><span class="built_in">print</span>(num_str[::-1])</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="05-公共方法"><a href="#05-公共方法" class="headerlink" title="05. 公共方法"></a>05. 公共方法</h2><h3 id="5-1-Python-内置函数"><a href="#5-1-Python-内置函数" class="headerlink" title="5.1 Python 内置函数"></a>5.1 Python 内置函数</h3><p>Python 包含了以下内置函数：</p><div class="table-container"><table><thead><tr><th>函数</th><th>描述</th><th>备注</th></tr></thead><tbody><tr><td>len(item)</td><td>计算容器中元素个数</td><td></td></tr><tr><td>del(item)</td><td>删除变量</td><td>del 有两种方式</td></tr><tr><td>max(item)</td><td>返回容器中元素最大值</td><td>如果是字典，只针对 key 比较</td></tr><tr><td>min(item)</td><td>返回容器中元素最小值</td><td>如果是字典，只针对 key 比较</td></tr><tr><td>cmp(item1, item2)</td><td>比较两个值，-1 小于/0 相等/1 大于</td><td>Python 3.x 取消了 cmp 函数</td></tr></tbody></table></div><p><strong>注意</strong></p><ul><li><strong>字符串</strong> 比较符合以下规则： “0” &lt; “A” &lt; “a”</li></ul><h3 id="5-2-切片"><a href="#5-2-切片" class="headerlink" title="5.2 切片"></a>5.2 切片</h3><div class="table-container"><table><thead><tr><th style="text-align:center">描述</th><th>Python 表达式</th><th>结果</th><th>支持的数据类型</th></tr></thead><tbody><tr><td style="text-align:center">切片</td><td>“0123456789”[::-2]</td><td>“97531”</td><td>字符串、列表、元组</td></tr></tbody></table></div><ul><li><strong>切片</strong> 使用 <strong>索引值</strong> 来限定范围，从一个大的 <strong>字符串</strong> 中 <strong>切出</strong> 小的 <strong>字符串</strong></li><li><strong>列表</strong> 和 <strong>元组</strong> 都是 <strong>有序</strong> 的集合，都能够 <strong>通过索引值</strong> 获取到对应的数据</li><li><strong>字典</strong> 是一个 <strong>无序</strong> 的集合，是使用 <strong>键值对</strong> 保存数据</li></ul><h3 id="5-3-运算符"><a href="#5-3-运算符" class="headerlink" title="5.3 运算符"></a>5.3 运算符</h3><div class="table-container"><table><thead><tr><th style="text-align:center">运算符</th><th>Python 表达式</th><th>结果</th><th>描述</th><th>支持的数据类型</th></tr></thead><tbody><tr><td style="text-align:center">+</td><td>[1, 2] + [3, 4]</td><td>[1, 2, 3, 4]</td><td>合并</td><td>字符串、列表、元组</td></tr><tr><td style="text-align:center">*</td><td>[“Hi!”] * 4</td><td>[‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’]</td><td>重复</td><td>字符串、列表、元组</td></tr><tr><td style="text-align:center">in</td><td>3 in (1, 2, 3)</td><td>True</td><td>元素是否存在</td><td>字符串、列表、元组、字典</td></tr><tr><td style="text-align:center">not in</td><td>4 not in (1, 2, 3)</td><td>True</td><td>元素是否不存在</td><td>字符串、列表、元组、字典</td></tr><tr><td style="text-align:center">&gt; &gt;= == &lt; &lt;=</td><td>(1, 2, 3) &lt; (2, 2, 3)</td><td>True</td><td>元素比较</td><td>字符串、列表、元组</td></tr></tbody></table></div><p><strong>注意</strong></p><ul><li><code>in</code> 在对 <strong>字典</strong> 操作时，判断的是 <strong>字典的键</strong></li><li><code>in</code> 和 <code>not in</code> 被称为 <strong>成员运算符</strong></li></ul><h4 id="成员运算符"><a href="#成员运算符" class="headerlink" title="成员运算符"></a>成员运算符</h4><p>成员运算符用于 <strong>测试</strong> 序列中是否包含指定的 <strong>成员</strong></p><div class="table-container"><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>in</td><td>如果在指定的序列中找到值返回 True，否则返回 False</td><td><code>3 in (1, 2, 3)</code> 返回 <code>True</code></td></tr><tr><td>not in</td><td>如果在指定的序列中没有找到值返回 True，否则返回 False</td><td><code>3 not in (1, 2, 3)</code> 返回 <code>False</code></td></tr></tbody></table></div><p>注意：在对 <strong>字典</strong> 操作时，判断的是 <strong>字典的键</strong></p><h3 id="5-4-完整的-for-循环语法"><a href="#5-4-完整的-for-循环语法" class="headerlink" title="5.4 完整的 for 循环语法"></a>5.4 完整的 for 循环语法</h3><ul><li>在 <code>Python</code> 中完整的 <code>for 循环</code> 的语法如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 变量 <span class="keyword">in</span> 集合:</span><br><span class="line">    </span><br><span class="line">    循环体代码</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    没有通过 <span class="keyword">break</span> 退出循环，循环结束后，会执行的代码</span><br></pre></td></tr></table></figure><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><ul><li>在 <strong>迭代遍历</strong> 嵌套的数据类型时，例如 <strong>一个列表包含了多个字典</strong></li><li>需求：要判断 某一个字典中 是否存在 指定的 值 <ul><li>如果 <strong>存在</strong>，提示并且退出循环</li><li>如果 <strong>不存在</strong>，在 <strong>循环整体结束</strong> 后，希望 <strong>得到一个统一的提示</strong></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">students = [</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;阿土&quot;</span>,</span><br><span class="line">     <span class="string">&quot;age&quot;</span>: <span class="number">20</span>,</span><br><span class="line">     <span class="string">&quot;gender&quot;</span>: <span class="literal">True</span>,</span><br><span class="line">     <span class="string">&quot;height&quot;</span>: <span class="number">1.7</span>,</span><br><span class="line">     <span class="string">&quot;weight&quot;</span>: <span class="number">75.0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;小美&quot;</span>,</span><br><span class="line">     <span class="string">&quot;age&quot;</span>: <span class="number">19</span>,</span><br><span class="line">     <span class="string">&quot;gender&quot;</span>: <span class="literal">False</span>,</span><br><span class="line">     <span class="string">&quot;height&quot;</span>: <span class="number">1.6</span>,</span><br><span class="line">     <span class="string">&quot;weight&quot;</span>: <span class="number">45.0</span>&#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">find_name = <span class="string">&quot;阿土&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> stu_dict <span class="keyword">in</span> students:</span><br><span class="line"></span><br><span class="line">    print(stu_dict)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断当前遍历的字典中姓名是否为find_name</span></span><br><span class="line">    <span class="keyword">if</span> stu_dict[<span class="string">&quot;name&quot;</span>] == find_name:</span><br><span class="line">        print(<span class="string">&quot;找到了&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果已经找到，直接退出循环，就不需要再对后续的数据进行比较</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;没有找到&quot;</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;循环结束&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;高级变量类型&quot;&gt;&lt;a href=&quot;#高级变量类型&quot; class=&quot;headerlink&quot; title=&quot;高级变量类型&quot;&gt;&lt;/a&gt;高级变量类型&lt;/h1&gt;&lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="python" scheme="https://xxren8218.github.io/categories/python/"/>
    
    
    <category term="python基础" scheme="https://xxren8218.github.io/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>函数基础</title>
    <link href="https://xxren8218.github.io/20210305/%E5%87%BD%E6%95%B0%E5%9F%BA%E7%A1%80.html"/>
    <id>https://xxren8218.github.io/20210305/%E5%87%BD%E6%95%B0%E5%9F%BA%E7%A1%80.html</id>
    <published>2021-03-05T12:10:58.000Z</published>
    <updated>2021-03-05T12:11:15.055Z</updated>
    
    <content type="html"><![CDATA[<h1 id="函数基础"><a href="#函数基础" class="headerlink" title="函数基础"></a>函数基础</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>函数的快速体验</li><li>函数的基本使用</li><li>函数的参数</li><li>函数的返回值</li><li>函数的嵌套调用</li><li>在模块中定义函数</li></ul><h2 id="01-函数的快速体验"><a href="#01-函数的快速体验" class="headerlink" title="01. 函数的快速体验"></a>01. 函数的快速体验</h2><h3 id="1-1-快速体验"><a href="#1-1-快速体验" class="headerlink" title="1.1 快速体验"></a>1.1 快速体验</h3><ul><li>所谓<strong>函数</strong>，就是把 <strong>具有独立功能的代码块</strong> 组织为一个小模块，在需要的时候 <strong>调用</strong></li><li>函数的使用包含两个步骤：<ol><li>定义函数 —— <strong>封装</strong> 独立的功能</li><li>调用函数 —— 享受 <strong>封装</strong> 的成果</li></ol></li><li><strong>函数的作用</strong>，在开发程序时，使用函数可以提高编写的效率以及代码的 <strong>重用</strong></li></ul><p><strong>演练步骤</strong></p><ol><li>新建 <code>04_函数</code> 项目</li><li>复制之前完成的 <strong>乘法表</strong> 文件</li><li>修改文件，增加函数定义 <code>multiple_table():</code></li><li>新建另外一个文件，使用 <code>import</code> 导入并且调用函数</li></ol><h2 id="02-函数基本使用"><a href="#02-函数基本使用" class="headerlink" title="02. 函数基本使用"></a>02. 函数基本使用</h2><h3 id="2-1-函数的定义"><a href="#2-1-函数的定义" class="headerlink" title="2.1 函数的定义"></a>2.1 函数的定义</h3><p>定义函数的格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名():</span></span><br><span class="line"></span><br><span class="line">    函数封装的代码</span><br><span class="line">    ……</span><br></pre></td></tr></table></figure><ol><li><code>def</code> 是英文 <code>define</code> 的缩写</li><li><strong>函数名称</strong> 应该能够表达 <strong>函数封装代码</strong> 的功能，方便后续的调用</li><li><strong>函数名称</strong> 的命名应该 <strong>符合</strong> <strong>标识符的命名规则</strong><ul><li>可以由 <strong>字母</strong>、<strong>下划线</strong> 和 <strong>数字</strong> 组成</li><li><strong>不能以数字开头</strong></li><li><strong>不能与关键字重名</strong></li></ul></li></ol><h3 id="2-2-函数调用"><a href="#2-2-函数调用" class="headerlink" title="2.2 函数调用"></a>2.2 函数调用</h3><p>调用函数很简单的，通过 <code>函数名()</code> 即可完成对函数的调用</p><h3 id="2-3-第一个函数演练"><a href="#2-3-第一个函数演练" class="headerlink" title="2.3 第一个函数演练"></a>2.3 第一个函数演练</h3><p><strong>需求</strong></p><ul><li><ol><li>编写一个打招呼 <code>say_hello</code> 的函数，封装三行打招呼的代码</li></ol></li><li><ol><li>在函数下方调用打招呼的代码</li></ol></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;小明&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解释器知道这里定义了一个函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_hello</span>():</span></span><br><span class="line">    print(<span class="string">&quot;hello 1&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;hello 2&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;hello 3&quot;</span>)</span><br><span class="line"></span><br><span class="line">print(name)</span><br><span class="line"><span class="comment"># 只有在调用函数时，之前定义的函数才会被执行</span></span><br><span class="line"><span class="comment"># 函数执行完成之后，会重新回到之前的程序中，继续执行后续的代码</span></span><br><span class="line">say_hello()</span><br><span class="line"></span><br><span class="line">print(name)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>用 <strong>单步执行 F8 和 F7</strong> 观察以下代码的执行过程</p></blockquote><ul><li>定义好函数之后，只表示这个函数封装了一段代码而已</li><li>如果不主动调用函数，函数是不会主动执行的</li></ul><h4 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h4><ul><li><p>能否将 <strong>函数调用</strong> 放在 <strong>函数定义</strong> 的上方？</p><ul><li>不能！</li><li>因为在 <strong>使用函数名</strong> 调用函数之前，必须要保证 <code>Python</code> 已经知道函数的存在</li><li>否则控制台会提示 <code>NameError: name &#39;say_hello&#39; is not defined</code> (<strong>名称错误：say_hello 这个名字没有被定义</strong>)</li></ul></li></ul><h3 id="2-4-PyCharm-的调试工具"><a href="#2-4-PyCharm-的调试工具" class="headerlink" title="2.4 PyCharm 的调试工具"></a>2.4 PyCharm 的调试工具</h3><ul><li><strong>F8 Step Over</strong> 可以单步执行代码，会把函数调用看作是一行代码直接执行</li><li><strong>F7 Step Into</strong> 可以单步执行代码，如果是函数，会进入函数内部 </li></ul><h3 id="2-5-函数的文档注释"><a href="#2-5-函数的文档注释" class="headerlink" title="2.5 函数的文档注释"></a>2.5 函数的文档注释</h3><ul><li>在开发中，如果希望给函数添加注释，应该在 <strong>定义函数</strong> 的下方，使用 <strong>连续的三对引号</strong></li><li>在 <strong>连续的三对引号</strong> 之间编写对函数的说明文字</li><li>在 <strong>函数调用</strong> 位置，使用快捷键 <code>CTRL + Q</code> 可以查看函数的说明信息</li></ul><blockquote><p>注意：因为 <strong>函数体相对比较独立</strong>，<strong>函数定义的上方</strong>，应该和其他代码（包括注释）保留 <strong>两个空行</strong></p></blockquote><h2 id="03-函数的参数"><a href="#03-函数的参数" class="headerlink" title="03. 函数的参数"></a>03. 函数的参数</h2><p><strong>演练需求</strong></p><ol><li>开发一个 <code>sum_2_num</code> 的函数</li><li>函数能够实现 <strong>两个数字的求和</strong> 功能</li></ol><p>演练代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_2_num</span>():</span></span><br><span class="line"></span><br><span class="line">    num1 = <span class="number">10</span></span><br><span class="line">    num2 = <span class="number">20</span></span><br><span class="line">    result = num1 + num2</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;%d + %d = %d&quot;</span> % (num1, num2, result))</span><br><span class="line"></span><br><span class="line">sum_2_num()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>思考一下存在什么问题</strong></p><blockquote><p>函数只能处理 <strong>固定数值</strong> 的相加</p></blockquote><p><strong>如何解决？</strong></p><ul><li>如果能够把需要计算的数字，在调用函数时，传递到函数内部就好了！</li></ul><h3 id="3-1-函数参数的使用"><a href="#3-1-函数参数的使用" class="headerlink" title="3.1 函数参数的使用"></a>3.1 函数参数的使用</h3><ul><li>在函数名的后面的小括号内部填写 <strong>参数</strong></li><li>多个参数之间使用 <code>,</code> 分隔</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_2_num</span>(<span class="params">num1, num2</span>):</span></span><br><span class="line"></span><br><span class="line">    result = num1 + num2</span><br><span class="line">    </span><br><span class="line">    print(<span class="string">&quot;%d + %d = %d&quot;</span> % (num1, num2, result))</span><br><span class="line"></span><br><span class="line">sum_2_num(<span class="number">50</span>, <span class="number">20</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-2-参数的作用"><a href="#3-2-参数的作用" class="headerlink" title="3.2 参数的作用"></a>3.2 参数的作用</h3><ul><li><strong>函数</strong>，把 <strong>具有独立功能的代码块</strong> 组织为一个小模块，在需要的时候 <strong>调用</strong></li><li><strong>函数的参数</strong>，增加函数的 <strong>通用性</strong>，针对 <strong>相同的数据处理逻辑</strong>，能够 <strong>适应更多的数据</strong><ol><li>在函数 <strong>内部</strong>，把参数当做 <strong>变量</strong> 使用，进行需要的数据处理</li><li>函数调用时，按照函数定义的<strong>参数顺序</strong>，把 <strong>希望在函数内部处理的数据</strong>，<strong>通过参数</strong> 传递</li></ol></li></ul><h3 id="3-3-形参和实参"><a href="#3-3-形参和实参" class="headerlink" title="3.3 形参和实参"></a>3.3 形参和实参</h3><ul><li><strong>形参</strong>：<strong>定义</strong> 函数时，小括号中的参数，是用来接收参数用的，在函数内部 <strong>作为变量使用</strong></li><li><strong>实参</strong>：<strong>调用</strong> 函数时，小括号中的参数，是用来把数据传递到 <strong>函数内部</strong> 用的</li></ul><h2 id="04-函数的返回值"><a href="#04-函数的返回值" class="headerlink" title="04. 函数的返回值"></a>04. 函数的返回值</h2><ul><li>在程序开发中，有时候，会希望 <strong>一个函数执行结束后，告诉调用者一个结果</strong>，以便调用者针对具体的结果做后续的处理</li><li><strong>返回值</strong> 是函数 <strong>完成工作</strong>后，<strong>最后</strong> 给调用者的 <strong>一个结果</strong></li><li>在函数中使用 <code>return</code> 关键字可以返回结果</li><li>调用函数一方，可以 <strong>使用变量</strong> 来 <strong>接收</strong> 函数的返回结果</li></ul><blockquote><p>注意：<code>return</code> 表示返回，后续的代码都不会被执行</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_2_num</span>(<span class="params">num1, num2</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;对两个数字的求和&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> num1 + num2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数，并使用 result 变量接收计算结果</span></span><br><span class="line">result = sum_2_num(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;计算结果是 %d&quot;</span> % result)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="05-函数的嵌套调用"><a href="#05-函数的嵌套调用" class="headerlink" title="05. 函数的嵌套调用"></a>05. 函数的嵌套调用</h2><ul><li>一个函数里面 <strong>又调用</strong> 了 <strong>另外一个函数</strong>，这就是 <strong>函数嵌套调用</strong></li><li>如果函数 <code>test2</code> 中，调用了另外一个函数 <code>test1</code><ul><li>那么执行到调用 <code>test1</code> 函数时，会先把函数 <code>test1</code> 中的任务都执行完</li><li>才会回到 <code>test2</code> 中调用函数 <code>test1</code> 的位置，继续执行后续的代码</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span>():</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;*&quot;</span> * <span class="number">50</span>)</span><br><span class="line">    print(<span class="string">&quot;test 1&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;*&quot;</span> * <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span>():</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br><span class="line">    print(<span class="string">&quot;test 2&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    test1()</span><br><span class="line">    </span><br><span class="line">    print(<span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">test2()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="函数嵌套的演练-——-打印分隔线"><a href="#函数嵌套的演练-——-打印分隔线" class="headerlink" title="函数嵌套的演练 —— 打印分隔线"></a>函数嵌套的演练 —— 打印分隔线</h3><blockquote><p>体会一下工作中 <strong>需求是多变</strong> 的</p></blockquote><p><strong>需求 1</strong></p><ul><li>定义一个 <code>print_line</code> 函数能够打印 <code>*</code> 组成的 <strong>一条分隔线</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_line</span>(<span class="params">char</span>):</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;*&quot;</span> * <span class="number">50</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>需求 2</strong></p><ul><li>定义一个函数能够打印 <strong>由任意字符组成</strong> 的分隔线</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_line</span>(<span class="params">char</span>):</span></span><br><span class="line"></span><br><span class="line">    print(char * <span class="number">50</span>)</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p><strong>需求 3</strong></p><ul><li>定义一个函数能够打印 <strong>任意重复次数</strong> 的分隔线</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_line</span>(<span class="params">char, times</span>):</span></span><br><span class="line"></span><br><span class="line">    print(char * times)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>需求 4</strong></p><ul><li>定义一个函数能够打印 <strong>5 行</strong> 的分隔线，分隔线要求符合<strong>需求 3</strong></li></ul><blockquote><p>提示：工作中针对需求的变化，应该冷静思考，<strong>不要轻易修改之前已经完成的，能够正常执行的函数</strong>！</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_line</span>(<span class="params">char, times</span>):</span></span><br><span class="line"></span><br><span class="line">    print(char * times)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_lines</span>(<span class="params">char, times</span>):</span></span><br><span class="line"></span><br><span class="line">    row = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> row &lt; <span class="number">5</span>:</span><br><span class="line">        print_line(char, times)</span><br><span class="line"></span><br><span class="line">        row += <span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="06-使用模块中的函数"><a href="#06-使用模块中的函数" class="headerlink" title="06. 使用模块中的函数"></a>06. 使用模块中的函数</h2><blockquote><p><strong>模块是 Python 程序架构的一个核心概念</strong></p></blockquote><ul><li><strong>模块</strong> 就好比是 <strong>工具包</strong>，要想使用这个工具包中的工具，就需要 <strong>导入 import</strong> 这个模块</li><li>每一个以扩展名 <code>py</code> 结尾的 <code>Python</code> 源代码文件都是一个 <strong>模块</strong></li><li>在模块中定义的 <strong>全局变量</strong> 、 <strong>函数</strong> 都是模块能够提供给外界直接使用的工具</li></ul><h3 id="6-1-第一个模块体验"><a href="#6-1-第一个模块体验" class="headerlink" title="6.1 第一个模块体验"></a>6.1 第一个模块体验</h3><p><strong>步骤</strong></p><ul><li>新建 <code>hm_10_分隔线模块.py</code><ul><li>复制 <code>hm_09_打印多条分隔线.py</code> 中的内容，<strong>最后一行 <code>print</code> 代码除外</strong></li><li>增加一个字符串变量</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;黑马程序员&quot;</span></span><br></pre></td></tr></table></figure><ul><li>新建 <code>hm_10_体验模块.py</code> 文件，并且编写以下代码：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hm_10_分隔线模块</span><br><span class="line"></span><br><span class="line">hm_10_分隔线模块.print_line(<span class="string">&quot;-&quot;</span>, <span class="number">80</span>)</span><br><span class="line">print(hm_10_分隔线模块.name)</span><br></pre></td></tr></table></figure><h4 id="体验小结"><a href="#体验小结" class="headerlink" title="体验小结"></a>体验小结</h4><ul><li>可以 <strong>在一个 Python 文件</strong> 中 <strong>定义 变量 或者 函数</strong></li><li>然后在 <strong>另外一个文件中</strong> 使用 <code>import</code> 导入这个模块</li><li>导入之后，就可以使用 <code>模块名.变量</code> / <code>模块名.函数</code> 的方式，使用这个模块中定义的变量或者函数</li></ul><blockquote><p><strong>模块</strong>可以让 <strong>曾经编写过的代码</strong> 方便的被 <strong>复用</strong>！</p></blockquote><h3 id="6-2-模块名也是一个标识符"><a href="#6-2-模块名也是一个标识符" class="headerlink" title="6.2 模块名也是一个标识符"></a>6.2 模块名也是一个标识符</h3><ul><li>标示符可以由 <strong>字母</strong>、<strong>下划线</strong> 和 <strong>数字</strong> 组成</li><li><strong>不能以数字开头</strong></li><li><strong>不能与关键字重名</strong></li></ul><blockquote><p>注意：如果在给 Python 文件起名时，<strong>以数字开头</strong> 是无法在 <code>PyCharm</code> 中通过导入这个模块的</p></blockquote><h3 id="6-3-Pyc-文件（了解）"><a href="#6-3-Pyc-文件（了解）" class="headerlink" title="6.3 Pyc 文件（了解）"></a>6.3 Pyc 文件（了解）</h3><blockquote><p><code>C</code> 是 <code>compiled</code> <strong>编译过</strong> 的意思</p></blockquote><p><strong>操作步骤</strong></p><ol><li>浏览程序目录会发现一个 <code>__pycache__</code> 的目录</li><li>目录下会有一个 <code>hm_10_分隔线模块.cpython-35.pyc</code> 文件，<code>cpython-35</code> 表示 <code>Python</code> 解释器的版本</li><li>这个 <code>pyc</code> 文件是由 Python 解释器将 <strong>模块的源码</strong> 转换为 <strong>字节码</strong><ul><li><code>Python</code> 这样保存 <strong>字节码</strong> 是作为一种启动 <strong>速度的优化</strong></li></ul></li></ol><p><strong>字节码</strong></p><ul><li><p><code>Python</code> 在解释源程序时是分成两个步骤的</p><ol><li>首先处理源代码，<strong>编译</strong> 生成一个二进制 <strong>字节码</strong></li><li>再对 <strong>字节码</strong> 进行处理，才会生成 CPU 能够识别的 <strong>机器码</strong></li></ol></li><li><p>有了模块的字节码文件之后，下一次运行程序时，如果在 <strong>上次保存字节码之后</strong> 没有修改过源代码，Python 将会加载 .pyc 文件并跳过编译这个步骤</p></li><li>当 <code>Python</code> 重编译时，它会自动检查源文件和字节码文件的时间戳</li><li>如果你又修改了源代码，下次程序运行时，字节码将自动重新创建</li></ul><blockquote><p>提示：有关模块以及模块的其他导入方式，后续课程还会逐渐展开！</p><p><strong>模块是 Python 程序架构的一个核心概念</strong></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;函数基础&quot;&gt;&lt;a href=&quot;#函数基础&quot; class=&quot;headerlink&quot; title=&quot;函数基础&quot;&gt;&lt;/a&gt;函数基础&lt;/h1&gt;&lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h</summary>
      
    
    
    
    <category term="python" scheme="https://xxren8218.github.io/categories/python/"/>
    
    
    <category term="python基础" scheme="https://xxren8218.github.io/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>循环</title>
    <link href="https://xxren8218.github.io/20210305/%E5%BE%AA%E7%8E%AF.html"/>
    <id>https://xxren8218.github.io/20210305/%E5%BE%AA%E7%8E%AF.html</id>
    <published>2021-03-05T12:09:45.000Z</published>
    <updated>2021-03-05T12:10:02.592Z</updated>
    
    <content type="html"><![CDATA[<h1 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>程序的三大流程</li><li>while 循环基本使用</li><li>break 和 continue</li><li>while 循环嵌套</li></ul><h2 id="01-程序的三大流程"><a href="#01-程序的三大流程" class="headerlink" title="01. 程序的三大流程"></a>01. 程序的三大流程</h2><ul><li><p>在程序开发中，一共有三种流程方式：</p><ul><li><strong>顺序</strong> —— <strong>从上向下</strong>，顺序执行代码</li><li><strong>分支</strong> —— 根据条件判断，决定执行代码的 <strong>分支</strong></li><li><p><strong>循环</strong> —— 让 <strong>特定代码 重复</strong> 执行</p><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/001_%E7%A8%8B%E5%BA%8F%E4%B8%89%E5%A4%A7%E6%B5%81%E7%A8%8B.png" alt=""></p></li></ul></li></ul><h2 id="02-while-循环基本使用"><a href="#02-while-循环基本使用" class="headerlink" title="02. while 循环基本使用"></a>02. <code>while</code> 循环基本使用</h2><ul><li>循环的作用就是让 <strong>指定的代码</strong> 重复的执行</li><li><p><code>while</code> 循环最常用的应用场景就是 <strong>让执行的代码</strong> 按照 <strong>指定的次数</strong> <strong>重复</strong> 执行</p></li><li><p>需求 —— 打印 5 遍 <code>Hello Python</code></p></li><li>思考 —— 如果要求打印 100 遍怎么办？</li></ul><h3 id="2-1-while-语句基本语法"><a href="#2-1-while-语句基本语法" class="headerlink" title="2.1 while 语句基本语法"></a>2.1 <code>while</code> 语句基本语法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">初始条件设置 —— 通常是重复执行的 计数器</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> 条件(判断 计数器 是否达到 目标次数):</span><br><span class="line">    条件满足时，做的事情<span class="number">1</span></span><br><span class="line">    条件满足时，做的事情<span class="number">2</span></span><br><span class="line">    条件满足时，做的事情<span class="number">3</span></span><br><span class="line">    ...(省略)...</span><br><span class="line">    </span><br><span class="line">    处理条件(计数器 + <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ul><li><code>while</code> 语句以及缩进部分是一个 <strong>完整的代码块</strong></li></ul><h4 id="第一个-while-循环"><a href="#第一个-while-循环" class="headerlink" title="第一个 while 循环"></a>第一个 while 循环</h4><p><strong>需求</strong></p><ul><li>打印 5 遍 Hello Python</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 1. 定义重复次数计数器</span><br><span class="line">i &#x3D; 1</span><br><span class="line"></span><br><span class="line"># 2. 使用 while 判断条件</span><br><span class="line">while i &lt;&#x3D; 5:</span><br><span class="line">    # 要重复执行的代码</span><br><span class="line">    print(&quot;Hello Python&quot;)</span><br><span class="line"></span><br><span class="line">    # 处理计数器 i</span><br><span class="line">    i &#x3D; i + 1</span><br><span class="line"></span><br><span class="line">print(&quot;循环结束后的 i &#x3D; %d&quot; % i)</span><br></pre></td></tr></table></figure><blockquote><p>注意：循环结束后，之前定义的计数器条件的数值是依旧存在的</p></blockquote><h4 id="死循环"><a href="#死循环" class="headerlink" title="死循环"></a>死循环</h4><blockquote><p>由于程序员的原因，<strong>忘记</strong> 在循环内部 <strong>修改循环的判断条件</strong>，导致循环持续执行，程序无法终止！</p></blockquote><h3 id="2-2-赋值运算符"><a href="#2-2-赋值运算符" class="headerlink" title="2.2 赋值运算符"></a>2.2 赋值运算符</h3><ul><li>在 Python 中，使用 <code>=</code> 可以给变量赋值</li><li>在算术运算时，为了简化代码的编写，<code>Python</code> 还提供了一系列的 与 <strong>算术运算符</strong> 对应的 <strong>赋值运算符</strong></li><li>注意：<strong>赋值运算符中间不能使用空格</strong></li></ul><div class="table-container"><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>=</td><td>简单的赋值运算符</td><td>c = a + b 将 a + b 的运算结果赋值为 c</td></tr><tr><td>+=</td><td>加法赋值运算符</td><td>c += a 等效于 c = c + a</td></tr><tr><td>-=</td><td>减法赋值运算符</td><td>c -= a 等效于 c = c - a</td></tr><tr><td>*=</td><td>乘法赋值运算符</td><td>c <em>= a 等效于 c = c </em> a</td></tr><tr><td>/=</td><td>除法赋值运算符</td><td>c /= a 等效于 c = c / a</td></tr><tr><td>//=</td><td>取整除赋值运算符</td><td>c //= a 等效于 c = c // a</td></tr><tr><td>%=</td><td>取 <strong>模</strong> (余数)赋值运算符</td><td>c %= a 等效于 c = c % a</td></tr><tr><td>**=</td><td>幂赋值运算符</td><td>c <strong>= a 等效于 c = c </strong> a</td></tr></tbody></table></div><h3 id="2-3-Python-中的计数方法"><a href="#2-3-Python-中的计数方法" class="headerlink" title="2.3 Python 中的计数方法"></a>2.3 Python 中的计数方法</h3><p>常见的计数方法有两种，可以分别称为：</p><ul><li><strong>自然计数法</strong>（从 <code>1</code> 开始）—— 更符合人类的习惯</li><li><strong>程序计数法</strong>（从 <code>0</code> 开始）—— 几乎所有的程序语言都选择从 0 开始计数</li></ul><p>因此，大家在编写程序时，应该尽量养成习惯：<strong>除非需求的特殊要求，否则 循环 的计数都从 0 开始</strong></p><h3 id="2-4-循环计算"><a href="#2-4-循环计算" class="headerlink" title="2.4 循环计算"></a>2.4 循环计算</h3><blockquote><p>在程序开发中，通常会遇到 <strong>利用循环</strong> <strong>重复计算</strong> 的需求</p></blockquote><p>遇到这种需求，可以：</p><ol><li>在 <code>while</code> 上方定义一个变量，用于 <strong>存放最终计算结果</strong></li><li>在循环体内部，每次循环都用 <strong>最新的计算结果</strong>，<strong>更新</strong> 之前定义的变量</li></ol><p><strong>需求</strong></p><ul><li>计算 0 ~ 100 之间所有数字的累计求和结果</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算 0 ~ 100 之间所有数字的累计求和结果</span></span><br><span class="line"><span class="comment"># 0. 定义最终结果的变量</span></span><br><span class="line">result = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 定义一个整数的变量记录循环的次数</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 开始循环</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">100</span>:</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 每一次循环，都让 result 这个变量和 i 这个计数器相加</span></span><br><span class="line">    result += i</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 处理计数器</span></span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;0~100之间的数字求和结果 = %d&quot;</span> % result)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="需求进阶"><a href="#需求进阶" class="headerlink" title="需求进阶"></a>需求进阶</h4><ul><li>计算 0 ~ 100 之间 所有 <strong>偶数</strong> 的累计求和结果</li></ul><p>开发步骤</p><ol><li>编写循环 <strong>确认</strong> <strong>要计算的数字</strong></li><li>添加 <strong>结果</strong> 变量，在循环内部 <strong>处理计算结果</strong></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 0. 最终结果</span></span><br><span class="line">result = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 计数器</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 开始循环</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">100</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断偶数</span></span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        print(i)</span><br><span class="line">        result += i</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 处理计数器</span></span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;0~100之间偶数求和结果 = %d&quot;</span> % result)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="03-break-和-continue"><a href="#03-break-和-continue" class="headerlink" title="03. break 和 continue"></a>03. break 和 continue</h2><blockquote><p><code>break</code> 和 <code>continue</code> 是专门在循环中使用的关键字</p></blockquote><ul><li><code>break</code> <strong>某一条件满足时</strong>，退出循环，不再执行后续重复的代码</li><li><code>continue</code> <strong>某一条件满足时</strong>，不执行后续重复的代码</li></ul><blockquote><p><code>break</code> 和 <code>continue</code> 只针对 <strong>当前所在循环</strong> 有效</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/002_%E5%BE%AA%E7%8E%AF%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt=""></p><h3 id="3-1-break"><a href="#3-1-break" class="headerlink" title="3.1 break"></a>3.1 break</h3><ul><li><strong>在循环过程中</strong>，如果 <strong>某一个条件满足后</strong>，<strong>不</strong> 再希望 <strong>循环继续执行</strong>，可以使用 <code>break</code> 退出循环</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">10</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># break 某一条件满足时，退出循环，不再执行后续重复的代码</span></span><br><span class="line">    <span class="comment"># i == 3</span></span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;over&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p><code>break</code> 只针对当前所在循环有效</p></blockquote><h3 id="3-2-continue"><a href="#3-2-continue" class="headerlink" title="3.2 continue"></a>3.2 continue</h3><ul><li><strong>在循环过程中</strong>，如果 <strong>某一个条件满足后</strong>，<strong>不</strong> 希望 <strong>执行循环代码，但是又不希望退出循环</strong>，可以使用 <code>continue</code></li><li>也就是：在整个循环中，<strong>只有某些条件</strong>，不需要执行循环代码，而其他条件都需要执行</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">10</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 当 i == 7 时，不希望执行需要重复执行的代码</span></span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">7</span>:</span><br><span class="line">        <span class="comment"># 在使用 continue 之前，同样应该修改计数器</span></span><br><span class="line">        <span class="comment"># 否则会出现死循环</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重复执行的代码</span></span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>需要注意：使用 <code>continue</code> 时，<strong>条件处理部分的代码，需要特别注意</strong>，不小心会出现 <strong>死循环</strong></li></ul><blockquote><p><code>continue</code> 只针对当前所在循环有效</p></blockquote><h2 id="04-while-循环嵌套"><a href="#04-while-循环嵌套" class="headerlink" title="04. while 循环嵌套"></a>04. <code>while</code> 循环嵌套</h2><h3 id="4-1-循环嵌套"><a href="#4-1-循环嵌套" class="headerlink" title="4.1 循环嵌套"></a>4.1 循环嵌套</h3><ul><li><code>while</code> 嵌套就是：<code>while</code> 里面还有 <code>while</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件 <span class="number">1</span>:</span><br><span class="line">    条件满足时，做的事情<span class="number">1</span></span><br><span class="line">    条件满足时，做的事情<span class="number">2</span></span><br><span class="line">    条件满足时，做的事情<span class="number">3</span></span><br><span class="line">    ...(省略)...</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> 条件 <span class="number">2</span>:</span><br><span class="line">        条件满足时，做的事情<span class="number">1</span></span><br><span class="line">        条件满足时，做的事情<span class="number">2</span></span><br><span class="line">        条件满足时，做的事情<span class="number">3</span></span><br><span class="line">        ...(省略)...</span><br><span class="line">    </span><br><span class="line">        处理条件 <span class="number">2</span></span><br><span class="line">    </span><br><span class="line">    处理条件 <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="4-2-循环嵌套演练-——-九九乘法表"><a href="#4-2-循环嵌套演练-——-九九乘法表" class="headerlink" title="4.2 循环嵌套演练 —— 九九乘法表"></a>4.2 循环嵌套演练 —— 九九乘法表</h3><h4 id="第-1-步：用嵌套打印小星星"><a href="#第-1-步：用嵌套打印小星星" class="headerlink" title="第 1 步：用嵌套打印小星星"></a>第 1 步：用嵌套打印小星星</h4><p><strong>需求</strong></p><ul><li>在控制台连续输出五行 <code>*</code>，每一行星号的数量依次递增</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*</span><br><span class="line">**</span><br><span class="line">***</span><br><span class="line">****</span><br><span class="line">*****</span><br></pre></td></tr></table></figure><ul><li>使用字符串 * 打印</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 定义一个计数器变量，从数字1开始，循环会比较方便</span></span><br><span class="line">row = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> row &lt;= <span class="number">5</span>:</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;*&quot;</span> * row)</span><br><span class="line"></span><br><span class="line">    row += <span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="第-2-步：使用循环嵌套打印小星星"><a href="#第-2-步：使用循环嵌套打印小星星" class="headerlink" title="第 2 步：使用循环嵌套打印小星星"></a>第 2 步：使用循环嵌套打印小星星</h4><p><strong>知识点</strong> 对 <code>print</code> 函数的使用做一个增强</p><ul><li>在默认情况下，<code>print</code> 函数输出内容之后，会自动在内容末尾增加换行</li><li>如果不希望末尾增加换行，可以在 <code>print</code> 函数输出内容的后面增加 <code>, end=&quot;&quot;</code></li><li><p>其中 <code>&quot;&quot;</code> 中间可以指定 <code>print</code> 函数输出内容之后，继续希望显示的内容</p></li><li><p>语法格式如下：</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 向控制台输出内容结束之后，不会换行</span></span><br><span class="line">print(<span class="string">&quot;*&quot;</span>, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 单纯的换行</span></span><br><span class="line">print(<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p><code>end=&quot;&quot;</code> 表示向控制台输出内容结束之后，不会换行</p></blockquote><p><strong>假设</strong> <code>Python</code> <strong>没有提供</strong> 字符串的 <code>*</code> 操作 <strong>拼接字符串</strong></p><p><strong>需求</strong></p><ul><li>在控制台连续输出五行 <code>*</code>，每一行星号的数量依次递增</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*</span><br><span class="line">**</span><br><span class="line">***</span><br><span class="line">****</span><br><span class="line">*****</span><br></pre></td></tr></table></figure><p><strong>开发步骤</strong></p><ul><li>1&gt; 完成 5 行内容的简单输出</li><li>2&gt; 分析每行内部的 <code>*</code> 应该如何处理？<ul><li>每行显示的星星和当前所在的行数是一致的</li><li>嵌套一个小的循环，专门处理每一行中 <code>列</code> 的星星显示  </li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">row = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> row &lt;= <span class="number">5</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 假设 python 没有提供字符串 * 操作</span></span><br><span class="line">    <span class="comment"># 在循环内部，再增加一个循环，实现每一行的 星星 打印</span></span><br><span class="line">    col = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> col &lt;= row:</span><br><span class="line">        print(<span class="string">&quot;*&quot;</span>, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">        col += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 每一行星号输出完成后，再增加一个换行</span></span><br><span class="line">    print(<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    row += <span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="第-3-步：-九九乘法表"><a href="#第-3-步：-九九乘法表" class="headerlink" title="第 3 步： 九九乘法表"></a>第 3 步： 九九乘法表</h4><p><strong>需求</strong> 输出 九九乘法表，格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1 * 1 &#x3D; 1</span><br><span class="line">1 * 2 &#x3D; 22 * 2 &#x3D; 4</span><br><span class="line">1 * 3 &#x3D; 32 * 3 &#x3D; 63 * 3 &#x3D; 9</span><br><span class="line">1 * 4 &#x3D; 42 * 4 &#x3D; 83 * 4 &#x3D; 124 * 4 &#x3D; 16</span><br><span class="line">1 * 5 &#x3D; 52 * 5 &#x3D; 103 * 5 &#x3D; 154 * 5 &#x3D; 205 * 5 &#x3D; 25</span><br><span class="line">1 * 6 &#x3D; 62 * 6 &#x3D; 123 * 6 &#x3D; 184 * 6 &#x3D; 245 * 6 &#x3D; 306 * 6 &#x3D; 36</span><br><span class="line">1 * 7 &#x3D; 72 * 7 &#x3D; 143 * 7 &#x3D; 214 * 7 &#x3D; 285 * 7 &#x3D; 356 * 7 &#x3D; 427 * 7 &#x3D; 49</span><br><span class="line">1 * 8 &#x3D; 82 * 8 &#x3D; 163 * 8 &#x3D; 244 * 8 &#x3D; 325 * 8 &#x3D; 406 * 8 &#x3D; 487 * 8 &#x3D; 568 * 8 &#x3D; 64</span><br><span class="line">1 * 9 &#x3D; 92 * 9 &#x3D; 183 * 9 &#x3D; 274 * 9 &#x3D; 365 * 9 &#x3D; 456 * 9 &#x3D; 547 * 9 &#x3D; 638 * 9 &#x3D; 729 * 9 &#x3D; 81</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>开发步骤</strong></p><ul><li><ol><li>打印 9 行小星星</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">*</span><br><span class="line">**</span><br><span class="line">***</span><br><span class="line">****</span><br><span class="line">*****</span><br><span class="line">******</span><br><span class="line">*******</span><br><span class="line">********</span><br><span class="line">*********</span><br></pre></td></tr></table></figure><ul><li><ol><li>将每一个 <code>*</code> 替换成对应的行与列相乘</li></ol></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义起始行</span></span><br><span class="line">row = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 最大打印 9 行</span></span><br><span class="line"><span class="keyword">while</span> row &lt;= <span class="number">9</span>:</span><br><span class="line">    <span class="comment"># 定义起始列</span></span><br><span class="line">    col = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 最大打印 row 列</span></span><br><span class="line">    <span class="keyword">while</span> col &lt;= row:</span><br><span class="line"></span><br><span class="line">        <span class="comment"># end = &quot;&quot;，表示输出结束后，不换行</span></span><br><span class="line">        <span class="comment"># &quot;\t&quot; 可以在控制台输出一个制表符，协助在输出文本时对齐</span></span><br><span class="line">        print(<span class="string">&quot;%d * %d = %d&quot;</span> % (col, row, row * col), end=<span class="string">&quot;\t&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 列数 + 1</span></span><br><span class="line">        col += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 一行打印完成的换行</span></span><br><span class="line">    print(<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 行数 + 1</span></span><br><span class="line">    row += <span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>字符串中的转义字符</strong></p><ul><li><code>\t</code> 在控制台输出一个 <strong>制表符</strong>，协助在输出文本时 <strong>垂直方向</strong> 保持对齐</li><li><code>\n</code> 在控制台输出一个 <strong>换行符</strong></li></ul><blockquote><p><strong>制表符</strong> 的功能是在不使用表格的情况下在 <strong>垂直方向</strong> 按列对齐文本</p></blockquote><div class="table-container"><table><thead><tr><th>转义字符</th><th>描述</th></tr></thead><tbody><tr><td>\\\\</td><td>反斜杠符号</td></tr><tr><td>\\’</td><td>单引号</td></tr><tr><td>\\”</td><td>双引号</td></tr><tr><td>\n</td><td>换行</td></tr><tr><td>\t</td><td>横向制表符</td></tr><tr><td>\r</td><td>回车</td></tr></tbody></table></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;循环&quot;&gt;&lt;a href=&quot;#循环&quot; class=&quot;headerlink&quot; title=&quot;循环&quot;&gt;&lt;/a&gt;循环&lt;/h1&gt;&lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h2&gt;&lt;ul&gt;
&lt;</summary>
      
    
    
    
    <category term="python" scheme="https://xxren8218.github.io/categories/python/"/>
    
    
    <category term="python基础" scheme="https://xxren8218.github.io/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>运算符</title>
    <link href="https://xxren8218.github.io/20210305/%E8%BF%90%E7%AE%97%E7%AC%A6.html"/>
    <id>https://xxren8218.github.io/20210305/%E8%BF%90%E7%AE%97%E7%AC%A6.html</id>
    <published>2021-03-05T12:06:31.000Z</published>
    <updated>2021-03-05T12:06:46.905Z</updated>
    
    <content type="html"><![CDATA[<h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>算数运算符</li><li>比较（关系）运算符</li><li>逻辑运算符</li><li>赋值运算符</li><li>运算符的优先级</li></ul><p>数学符号表链接：<a href="https://zh.wikipedia.org/wiki/数学符号表">https://zh.wikipedia.org/wiki/数学符号表</a></p><h2 id="01-算数运算符"><a href="#01-算数运算符" class="headerlink" title="01. 算数运算符"></a>01. 算数运算符</h2><ul><li>是完成基本的算术运算使用的符号，用来处理四则运算</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">描述</th><th>实例</th></tr></thead><tbody><tr><td style="text-align:center">+</td><td style="text-align:center">加</td><td>10 + 20 = 30</td></tr><tr><td style="text-align:center">-</td><td style="text-align:center">减</td><td>10 - 20 = -10</td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">乘</td><td>10 * 20 = 200</td></tr><tr><td style="text-align:center">/</td><td style="text-align:center">除</td><td>10 / 20 = 0.5</td></tr><tr><td style="text-align:center">//</td><td style="text-align:center">取整除</td><td>返回除法的整数部分（商） 9 // 2 输出结果 4</td></tr><tr><td style="text-align:center">%</td><td style="text-align:center">取余数</td><td>返回除法的余数 9 % 2 = 1</td></tr><tr><td style="text-align:center">**</td><td style="text-align:center">幂</td><td>又称次方、乘方，2 ** 3 = 8</td></tr></tbody></table></div><ul><li>在 Python 中 <code>*</code> 运算符还可以用于字符串，计算结果就是字符串重复指定次数的结果</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="string">&quot;-&quot;</span> * <span class="number">50</span></span><br><span class="line">Out[<span class="number">1</span>]: <span class="string">&#x27;----------------------------------------&#x27;</span> </span><br></pre></td></tr></table></figure><h2 id="02-比较（关系）运算符"><a href="#02-比较（关系）运算符" class="headerlink" title="02. 比较（关系）运算符"></a>02. 比较（关系）运算符</h2><div class="table-container"><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>==</td><td>检查两个操作数的值是否 <strong>相等</strong>，如果是，则条件成立，返回 True</td></tr><tr><td>!=</td><td>检查两个操作数的值是否 <strong>不相等</strong>，如果是，则条件成立，返回 True</td></tr><tr><td>&gt;</td><td>检查左操作数的值是否 <strong>大于</strong> 右操作数的值，如果是，则条件成立，返回 True</td></tr><tr><td>&lt;</td><td>检查左操作数的值是否 <strong>小于</strong> 右操作数的值，如果是，则条件成立，返回 True</td></tr><tr><td>&gt;=</td><td>检查左操作数的值是否 <strong>大于或等于</strong> 右操作数的值，如果是，则条件成立，返回 True</td></tr><tr><td>&lt;=</td><td>检查左操作数的值是否 <strong>小于或等于</strong> 右操作数的值，如果是，则条件成立，返回 True</td></tr></tbody></table></div><blockquote><p>Python 2.x 中判断 <strong>不等于</strong> 还可以使用 <code>&lt;&gt;</code> 运算符</p><p><code>!=</code> 在 Python 2.x 中同样可以用来判断 <strong>不等于</strong></p></blockquote><h2 id="03-逻辑运算符"><a href="#03-逻辑运算符" class="headerlink" title="03. 逻辑运算符"></a>03. 逻辑运算符</h2><div class="table-container"><table><thead><tr><th>运算符</th><th>逻辑表达式</th><th>描述</th></tr></thead><tbody><tr><td>and</td><td>x and y</td><td>只有 x 和 y 的值都为 True，才会返回 True<br />否则只要 x 或者 y 有一个值为 False，就返回 False</td></tr><tr><td>or</td><td>x or y</td><td>只要 x 或者 y 有一个值为 True，就返回 True<br />只有 x 和 y 的值都为 False，才会返回 False</td></tr><tr><td>not</td><td>not x</td><td>如果 x 为 True，返回 False<br />如果 x 为 False，返回 True</td></tr></tbody></table></div><h2 id="04-赋值运算符"><a href="#04-赋值运算符" class="headerlink" title="04. 赋值运算符"></a>04. 赋值运算符</h2><ul><li>在 Python 中，使用 <code>=</code> 可以给变量赋值</li><li>在算术运算时，为了简化代码的编写，<code>Python</code> 还提供了一系列的 与 <strong>算术运算符</strong> 对应的 <strong>赋值运算符</strong></li><li>注意：<strong>赋值运算符中间不能使用空格</strong></li></ul><div class="table-container"><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>=</td><td>简单的赋值运算符</td><td>c = a + b 将 a + b 的运算结果赋值为 c</td></tr><tr><td>+=</td><td>加法赋值运算符</td><td>c += a 等效于 c = c + a</td></tr><tr><td>-=</td><td>减法赋值运算符</td><td>c -= a 等效于 c = c - a</td></tr><tr><td>*=</td><td>乘法赋值运算符</td><td>c <em>= a 等效于 c = c </em> a</td></tr><tr><td>/=</td><td>除法赋值运算符</td><td>c /= a 等效于 c = c / a</td></tr><tr><td>//=</td><td>取整除赋值运算符</td><td>c //= a 等效于 c = c // a</td></tr><tr><td>%=</td><td>取 <strong>模</strong> (余数)赋值运算符</td><td>c %= a 等效于 c = c % a</td></tr><tr><td>**=</td><td>幂赋值运算符</td><td>c <strong>= a 等效于 c = c </strong> a</td></tr></tbody></table></div><h2 id="05-运算符的优先级"><a href="#05-运算符的优先级" class="headerlink" title="05. 运算符的优先级"></a>05. 运算符的优先级</h2><ul><li>以下表格的算数优先级由高到最低顺序排列</li></ul><div class="table-container"><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>**</td><td>幂 (最高优先级)</td></tr><tr><td>* / % //</td><td>乘、除、取余数、取整除</td></tr><tr><td>+ -</td><td>加法、减法</td></tr><tr><td>&lt;= &lt; &gt; &gt;=</td><td>比较运算符</td></tr><tr><td>== !=</td><td>等于运算符</td></tr><tr><td>= %= /= //= -= += <em>= *</em>=</td><td>赋值运算符</td></tr><tr><td>not or and</td><td>逻辑运算符</td></tr></tbody></table></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;运算符&quot;&gt;&lt;a href=&quot;#运算符&quot; class=&quot;headerlink&quot; title=&quot;运算符&quot;&gt;&lt;/a&gt;运算符&lt;/h1&gt;&lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h2&gt;&lt;u</summary>
      
    
    
    
    <category term="python" scheme="https://xxren8218.github.io/categories/python/"/>
    
    
    <category term="python基础" scheme="https://xxren8218.github.io/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>判断（if）语句</title>
    <link href="https://xxren8218.github.io/20210305/%E5%88%A4%E6%96%AD%EF%BC%88if%EF%BC%89%E8%AF%AD%E5%8F%A5.html"/>
    <id>https://xxren8218.github.io/20210305/%E5%88%A4%E6%96%AD%EF%BC%88if%EF%BC%89%E8%AF%AD%E5%8F%A5.html</id>
    <published>2021-03-05T11:59:15.000Z</published>
    <updated>2021-03-05T12:05:39.367Z</updated>
    
    <content type="html"><![CDATA[<h1 id="判断（if）语句"><a href="#判断（if）语句" class="headerlink" title="判断（if）语句"></a>判断（if）语句</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>开发中的应用场景</li><li>if 语句体验</li><li>if 语句进阶</li><li>综合应用</li></ul><h2 id="01-开发中的应用场景"><a href="#01-开发中的应用场景" class="headerlink" title="01. 开发中的应用场景"></a>01. 开发中的应用场景</h2><p>生活中的判断几乎是无所不在的，我们每天都在做各种各样的选择，如果这样？如果那样？……</p><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/001_%E6%9C%AA%E6%88%90%E5%B9%B4%E4%BA%BA%E7%A6%81%E6%AD%A2%E5%85%A5%E5%86%85.jpg" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/002_%E7%81%AB%E8%BD%A6%E7%AB%99%E5%AE%89%E6%A3%80.png" alt=""></p><h3 id="程序中的判断"><a href="#程序中的判断" class="headerlink" title="程序中的判断"></a>程序中的判断</h3><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/003_%E5%88%A4%E6%96%AD%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 今天发工资:</span><br><span class="line"></span><br><span class="line">    先还信用卡的钱</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> 有剩余:</span><br><span class="line"></span><br><span class="line">        又可以happy了，O(∩_∩)O哈哈~</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">        噢，no。。。还的等<span class="number">30</span>天</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">    盼着发工资</span><br></pre></td></tr></table></figure><h3 id="判断的定义"><a href="#判断的定义" class="headerlink" title="判断的定义"></a>判断的定义</h3><ul><li>如果 <strong>条件满足</strong>，才能做某件事情，</li><li>如果 <strong>条件不满足</strong>，就做另外一件事情，或者什么也不做</li></ul><blockquote><p>正是因为有了判断，才使得程序世界丰富多彩，充满变化！</p><p><strong>判断语句</strong> 又被称为 “分支语句”，正是因为有了判断，才让程序有了很多的分支</p></blockquote><h2 id="02-if-语句体验"><a href="#02-if-语句体验" class="headerlink" title="02. if 语句体验"></a>02. if 语句体验</h2><h3 id="2-1-if-判断语句基本语法"><a href="#2-1-if-判断语句基本语法" class="headerlink" title="2.1 if 判断语句基本语法"></a>2.1 if 判断语句基本语法</h3><p>在 <code>Python</code> 中，<strong>if 语句</strong> 就是用来进行判断的，格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 要判断的条件:</span><br><span class="line">    条件成立时，要做的事情</span><br><span class="line">    ……</span><br></pre></td></tr></table></figure><blockquote><p>注意：代码的缩进为一个 <code>tab</code> 键，或者 <strong>4</strong> 个空格 —— <strong>建议使用空格</strong></p><ul><li>在 Python 开发中，Tab 和空格不要混用！</li></ul></blockquote><p><strong>我们可以把整个 if 语句看成一个完整的代码块</strong></p><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/004_if%E8%AF%AD%E5%8F%A5%E6%98%AF%E4%B8%80%E4%B8%AA%E5%AE%8C%E6%95%B4%E7%9A%84%E4%BB%A3%E7%A0%81%E5%9D%971.png" alt=""></p><h3 id="2-2-判断语句演练-——-判断年龄"><a href="#2-2-判断语句演练-——-判断年龄" class="headerlink" title="2.2 判断语句演练 —— 判断年龄"></a>2.2 判断语句演练 —— 判断年龄</h3><p><strong>需求</strong></p><ol><li>定义一个整数变量记录年龄</li><li>判断是否满 18 岁 （<strong>&gt;=</strong>）</li><li>如果满 18 岁，允许进网吧嗨皮</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 定义年龄变量</span></span><br><span class="line">age = <span class="number">18</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 判断是否满 18 岁</span></span><br><span class="line"><span class="comment"># if 语句以及缩进部分的代码是一个完整的代码块</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    print(<span class="string">&quot;可以进网吧嗨皮……&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 思考！- 无论条件是否满足都会执行</span></span><br><span class="line">print(<span class="string">&quot;这句代码什么时候执行?&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ul><li><code>if</code> 语句以及缩进部分是一个 <strong>完整的代码块</strong></li></ul><h3 id="2-3-else-处理条件不满足的情况"><a href="#2-3-else-处理条件不满足的情况" class="headerlink" title="2.3 else 处理条件不满足的情况"></a>2.3 else 处理条件不满足的情况</h3><p><strong>思考</strong></p><p>在使用 <code>if</code> 判断时，只能做到满足条件时要做的事情。那如果需要在 <strong>不满足条件的时候</strong>，做某些事情，该如何做呢？</p><p><strong>答案</strong></p><p><code>else</code>，格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 要判断的条件:</span><br><span class="line">    条件成立时，要做的事情</span><br><span class="line">    ……</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    条件不成立时，要做的事情</span><br><span class="line">    ……</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ul><li><code>if</code> 和 <code>else</code> 语句以及各自的缩进部分共同是一个 <strong>完整的代码块</strong></li></ul><h3 id="2-4-判断语句演练-——-判断年龄改进"><a href="#2-4-判断语句演练-——-判断年龄改进" class="headerlink" title="2.4 判断语句演练 —— 判断年龄改进"></a>2.4 判断语句演练 —— 判断年龄改进</h3><p><strong>需求</strong></p><ol><li>输入用户年龄</li><li>判断是否满 18 岁 （<strong>&gt;=</strong>）</li><li>如果满 18 岁，允许进网吧嗨皮</li><li>如果未满 18 岁，提示回家写作业</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 输入用户年龄</span></span><br><span class="line">age = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;今年多大了？&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 判断是否满 18 岁</span></span><br><span class="line"><span class="comment"># if 语句以及缩进部分的代码是一个完整的语法块</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    print(<span class="string">&quot;可以进网吧嗨皮……&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;你还没长大，应该回家写作业！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 思考！- 无论条件是否满足都会执行</span></span><br><span class="line">print(<span class="string">&quot;这句代码什么时候执行?&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/005_ifelse%E8%AF%AD%E5%8F%A5%E6%98%AF%E4%B8%80%E4%B8%AA%E5%AE%8C%E6%95%B4%E7%9A%84%E4%BB%A3%E7%A0%81%E5%9D%971.png" alt=""></p><h2 id="03-逻辑运算"><a href="#03-逻辑运算" class="headerlink" title="03. 逻辑运算"></a>03. 逻辑运算</h2><ul><li>在程序开发中，通常 <strong>在判断条件时</strong>，会需要同时判断多个条件</li><li>只有多个条件都满足，才能够执行后续代码，这个时候需要使用到 <strong>逻辑运算符</strong></li><li><strong>逻辑运算符</strong> 可以把 <strong>多个条件</strong> 按照 <strong>逻辑</strong> 进行 <strong>连接</strong>，变成 <strong>更复杂的条件</strong></li><li>Python 中的 <strong>逻辑运算符</strong> 包括：<strong>与 and</strong>／<strong>或 or</strong>／<strong>非 not</strong> 三种</li></ul><h3 id="3-1-and"><a href="#3-1-and" class="headerlink" title="3.1 and"></a>3.1 <code>and</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">条件1 and 条件2</span><br></pre></td></tr></table></figure><ul><li><strong>与</strong>／<strong>并且</strong></li><li>两个条件同时满足，返回 <code>True</code></li><li>只要有一个不满足，就返回 <code>False</code></li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">条件 1</th><th style="text-align:center">条件 2</th><th style="text-align:center">结果</th></tr></thead><tbody><tr><td style="text-align:center">成立</td><td style="text-align:center">成立</td><td style="text-align:center">成立</td></tr><tr><td style="text-align:center">成立</td><td style="text-align:center">不成立</td><td style="text-align:center">不成立</td></tr><tr><td style="text-align:center">不成立</td><td style="text-align:center">成立</td><td style="text-align:center">不成立</td></tr><tr><td style="text-align:center">不成立</td><td style="text-align:center">不成立</td><td style="text-align:center">不成立</td></tr></tbody></table></div><h3 id="3-2-or"><a href="#3-2-or" class="headerlink" title="3.2 or"></a>3.2 <code>or</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">条件1 or 条件2</span><br></pre></td></tr></table></figure><ul><li><strong>或</strong>／<strong>或者</strong></li><li>两个条件只要有一个满足，返回 <code>True</code></li><li>两个条件都不满足，返回 <code>False</code></li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">条件 1</th><th style="text-align:center">条件 2</th><th style="text-align:center">结果</th></tr></thead><tbody><tr><td style="text-align:center">成立</td><td style="text-align:center">成立</td><td style="text-align:center">成立</td></tr><tr><td style="text-align:center">成立</td><td style="text-align:center">不成立</td><td style="text-align:center">成立</td></tr><tr><td style="text-align:center">不成立</td><td style="text-align:center">成立</td><td style="text-align:center">成立</td></tr><tr><td style="text-align:center">不成立</td><td style="text-align:center">不成立</td><td style="text-align:center">不成立</td></tr></tbody></table></div><h3 id="3-3-not"><a href="#3-3-not" class="headerlink" title="3.3 not"></a>3.3 <code>not</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">not 条件</span><br></pre></td></tr></table></figure><ul><li><strong>非</strong>／<strong>不是</strong></li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">条件</th><th style="text-align:center">结果</th></tr></thead><tbody><tr><td style="text-align:center">成立</td><td style="text-align:center">不成立</td></tr><tr><td style="text-align:center">不成立</td><td style="text-align:center">成立</td></tr></tbody></table></div><h4 id="逻辑运算演练"><a href="#逻辑运算演练" class="headerlink" title="逻辑运算演练"></a>逻辑运算演练</h4><ol><li>练习1: 定义一个整数变量 <code>age</code>，编写代码判断年龄是否正确<ul><li>要求人的年龄在 0-120 之间</li></ul></li><li>练习2: 定义两个整数变量 <code>python_score</code>、<code>c_score</code>，编写代码判断成绩<ul><li>要求只要有一门成绩 &gt; 60 分就算合格</li></ul></li><li>练习3: 定义一个布尔型变量 <code>is_employee</code>，编写代码判断是否是本公司员工<ul><li>如果不是提示不允许入内</li></ul></li></ol><p>答案 1：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 练习1: 定义一个整数变量 age，编写代码判断年龄是否正确</span></span><br><span class="line">age = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 要求人的年龄在 0-120 之间</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">0</span> <span class="keyword">and</span> age &lt;= <span class="number">120</span>:</span><br><span class="line">    print(<span class="string">&quot;年龄正确&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;年龄不正确&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>答案 2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 练习2: 定义两个整数变量 python_score、c_score，编写代码判断成绩</span></span><br><span class="line">python_score = <span class="number">50</span></span><br><span class="line">c_score = <span class="number">50</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 要求只要有一门成绩 &gt; 60 分就算合格</span></span><br><span class="line"><span class="keyword">if</span> python_score &gt; <span class="number">60</span> <span class="keyword">or</span> c_score &gt; <span class="number">60</span>:</span><br><span class="line">    print(<span class="string">&quot;考试通过&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;再接再厉！&quot;</span>)</span><br></pre></td></tr></table></figure><p>答案 3：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 练习3: 定义一个布尔型变量 `is_employee`，编写代码判断是否是本公司员工</span></span><br><span class="line">is_employee = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果不是提示不允许入内</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> is_employee:</span><br><span class="line">    print(<span class="string">&quot;非公勿内&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="04-if-语句进阶"><a href="#04-if-语句进阶" class="headerlink" title="04. if 语句进阶"></a>04. if 语句进阶</h2><h3 id="4-1-elif"><a href="#4-1-elif" class="headerlink" title="4.1 elif"></a>4.1 <code>elif</code></h3><ul><li>在开发中，使用 <code>if</code> 可以 <strong>判断条件</strong></li><li>使用 <code>else</code> 可以处理 <strong>条件不成立</strong> 的情况</li><li>但是，如果希望 <strong>再增加一些条件</strong>，<strong>条件不同，需要执行的代码也不同</strong> 时，就可以使用 <code>elif</code> </li><li>语法格式如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件<span class="number">1</span>:</span><br><span class="line">    条件<span class="number">1</span>满足执行的代码</span><br><span class="line">    ……</span><br><span class="line"><span class="keyword">elif</span> 条件<span class="number">2</span>:</span><br><span class="line">    条件<span class="number">2</span>满足时，执行的代码</span><br><span class="line">    ……</span><br><span class="line"><span class="keyword">elif</span> 条件<span class="number">3</span>:</span><br><span class="line">    条件<span class="number">3</span>满足时，执行的代码</span><br><span class="line">    ……</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    以上条件都不满足时，执行的代码</span><br><span class="line">    ……</span><br></pre></td></tr></table></figure><ul><li>对比逻辑运算符的代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件<span class="number">1</span> <span class="keyword">and</span> 条件<span class="number">2</span>:</span><br><span class="line">    条件<span class="number">1</span>满足 并且 条件<span class="number">2</span>满足 执行的代码</span><br><span class="line">    ……</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><ol><li><code>elif</code> 和 <code>else</code> 都必须和 <code>if</code> 联合使用，而不能单独使用</li><li>可以将 <code>if</code>、<code>elif</code> 和 <code>else</code> 以及各自缩进的代码，看成一个 <strong>完整的代码块</strong></li></ol><h4 id="elif-演练-——-女友的节日"><a href="#elif-演练-——-女友的节日" class="headerlink" title="elif 演练 —— 女友的节日"></a>elif 演练 —— 女友的节日</h4><p><strong>需求</strong></p><ol><li>定义 <code>holiday_name</code> 字符串变量记录节日名称</li><li>如果是 <strong>情人节</strong> 应该 <strong>买玫瑰</strong>／<strong>看电影</strong></li><li>如果是 <strong>平安夜</strong> 应该 <strong>买苹果</strong>／<strong>吃大餐</strong></li><li>如果是 <strong>生日</strong> 应该 <strong>买蛋糕</strong></li><li>其他的日子每天都是节日啊……</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">holiday_name &#x3D; &quot;平安夜&quot;</span><br><span class="line"></span><br><span class="line">if holiday_name &#x3D;&#x3D; &quot;情人节&quot;:</span><br><span class="line">    print(&quot;买玫瑰&quot;)</span><br><span class="line">    print(&quot;看电影&quot;)</span><br><span class="line">elif holiday_name &#x3D;&#x3D; &quot;平安夜&quot;:</span><br><span class="line">    print(&quot;买苹果&quot;)</span><br><span class="line">    print(&quot;吃大餐&quot;)</span><br><span class="line">elif holiday_name &#x3D;&#x3D; &quot;生日&quot;:</span><br><span class="line">    print(&quot;买蛋糕&quot;)</span><br><span class="line">else:</span><br><span class="line">    print(&quot;每天都是节日啊……&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-2-if-的嵌套"><a href="#4-2-if-的嵌套" class="headerlink" title="4.2 if 的嵌套"></a>4.2 <code>if</code> 的嵌套</h3><p><img src="./images/010/002_火车站安检.png" alt="002_火车站安检-w400"></p><blockquote><p><strong>elif</strong> 的应用场景是：<strong>同时</strong> 判断 <strong>多个条件</strong>，所有的条件是 <strong>平级</strong> 的</p></blockquote><ul><li>在开发中，使用 <code>if</code> 进行条件判断，如果希望 <strong>在条件成立的执行语句中</strong> 再 <strong>增加条件判断</strong>，就可以使用 <strong>if 的嵌套</strong></li><li><strong>if 的嵌套</strong> 的应用场景就是：<strong>在之前条件满足的前提下，再增加额外的判断</strong></li><li><strong>if 的嵌套</strong> 的语法格式，<strong>除了缩进之外</strong> 和之前的没有区别</li><li>语法格式如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件 <span class="number">1</span>:</span><br><span class="line">    条件 <span class="number">1</span> 满足执行的代码</span><br><span class="line">    ……</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> 条件 <span class="number">1</span> 基础上的条件 <span class="number">2</span>:</span><br><span class="line">        条件 <span class="number">2</span> 满足时，执行的代码</span><br><span class="line">        ……    </span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 条件 2 不满足的处理</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        条件 <span class="number">2</span> 不满足时，执行的代码</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 条件 1 不满足的处理</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    条件<span class="number">1</span> 不满足时，执行的代码</span><br><span class="line">    ……</span><br></pre></td></tr></table></figure><h4 id="if-的嵌套-演练-——-火车站安检"><a href="#if-的嵌套-演练-——-火车站安检" class="headerlink" title="if 的嵌套 演练 —— 火车站安检"></a>if 的嵌套 演练 —— 火车站安检</h4><p><strong>需求</strong></p><ol><li>定义布尔型变量 <code>has_ticket</code> 表示是否有车票</li><li>定义整型变量 <code>knife_length</code> 表示刀的长度，单位：厘米</li><li>首先检查是否有车票，如果有，才允许进行 <strong>安检</strong></li><li>安检时，需要检查刀的长度，判断是否超过 20 厘米<ul><li>如果超过 20 厘米，提示刀的长度，不允许上车</li><li>如果不超过 20 厘米，安检通过</li></ul></li><li>如果没有车票，不允许进门</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义布尔型变量 has_ticket 表示是否有车票</span></span><br><span class="line">has_ticket = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义整数型变量 knife_length 表示刀的长度，单位：厘米</span></span><br><span class="line">knife_length = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 首先检查是否有车票，如果有，才允许进行 安检</span></span><br><span class="line"><span class="keyword">if</span> has_ticket:</span><br><span class="line">    print(<span class="string">&quot;有车票，可以开始安检...&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 安检时，需要检查刀的长度，判断是否超过 20 厘米</span></span><br><span class="line">    <span class="comment"># 如果超过 20 厘米，提示刀的长度，不允许上车</span></span><br><span class="line">    <span class="keyword">if</span> knife_length &gt;= <span class="number">20</span>:</span><br><span class="line">        print(<span class="string">&quot;不允许携带 %d 厘米长的刀上车&quot;</span> % knife_length)</span><br><span class="line">    <span class="comment"># 如果不超过 20 厘米，安检通过</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&quot;安检通过，祝您旅途愉快……&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果没有车票，不允许进门</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;大哥，您要先买票啊&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="05-综合应用-——-石头剪刀布"><a href="#05-综合应用-——-石头剪刀布" class="headerlink" title="05. 综合应用 —— 石头剪刀布"></a>05. 综合应用 —— 石头剪刀布</h2><p><strong>目标</strong></p><ol><li>强化 <strong>多个条件</strong> 的 <strong>逻辑运算</strong></li><li>体会 <code>import</code> 导入模块（“工具包”）的使用</li></ol><p><strong>需求</strong></p><ol><li>从控制台输入要出的拳 —— 石头（1）／剪刀（2）／布（3）</li><li>电脑 <strong>随机</strong> 出拳 —— 先假定电脑只会出石头，完成整体代码功能</li><li>比较胜负</li></ol><div class="table-container"><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:center">规则</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">石头 胜 剪刀</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">剪刀 胜 布</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">布 胜 石头</td></tr></tbody></table></div><h3 id="5-1-基础代码实现"><a href="#5-1-基础代码实现" class="headerlink" title="5.1 基础代码实现"></a>5.1 基础代码实现</h3><ul><li>先 <strong>假定电脑就只会出石头</strong>，完成整体代码功能</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从控制台输入要出的拳 —— 石头（1）／剪刀（2）／布（3）</span></span><br><span class="line">player = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请出拳 石头（1）／剪刀（2）／布（3）：&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 电脑 随机 出拳 - 假定电脑永远出石头</span></span><br><span class="line">computer = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 比较胜负</span></span><br><span class="line"><span class="comment"># 如果条件判断的内容太长，可以在最外侧的条件增加一对大括号</span></span><br><span class="line"><span class="comment"># 再在每一个条件之间，使用回车，PyCharm 可以自动增加 8 个空格</span></span><br><span class="line"><span class="keyword">if</span> ((player == <span class="number">1</span> <span class="keyword">and</span> computer == <span class="number">2</span>) <span class="keyword">or</span></span><br><span class="line">        (player == <span class="number">2</span> <span class="keyword">and</span> computer == <span class="number">3</span>) <span class="keyword">or</span></span><br><span class="line">        (player == <span class="number">3</span> <span class="keyword">and</span> computer == <span class="number">1</span>)):</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;噢耶！！！电脑弱爆了！！！&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> player == computer:</span><br><span class="line">    print(<span class="string">&quot;心有灵犀，再来一盘！&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;不行，我要和你决战到天亮！&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-2-随机数的处理"><a href="#5-2-随机数的处理" class="headerlink" title="5.2 随机数的处理"></a>5.2 随机数的处理</h3><ul><li>在 <code>Python</code> 中，要使用随机数，首先需要导入 <strong>随机数</strong> 的 <strong>模块</strong> —— “工具包”</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br></pre></td></tr></table></figure><ul><li><p>导入模块后，可以直接在 <strong>模块名称</strong> 后面敲一个 <code>.</code> 然后按 <code>Tab</code> 键，会提示该模块中包含的所有函数</p></li><li><p><code>random.randint(a, b)</code> ，返回 <code>[a, b]</code> 之间的整数，包含 <code>a</code> 和 <code>b</code></p></li><li>例如：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">random.randint(<span class="number">12</span>, <span class="number">20</span>)  <span class="comment"># 生成的随机数n: 12 &lt;= n &lt;= 20   </span></span><br><span class="line">random.randint(<span class="number">20</span>, <span class="number">20</span>)  <span class="comment"># 结果永远是 20   </span></span><br><span class="line">random.randint(<span class="number">20</span>, <span class="number">10</span>)  <span class="comment"># 该语句是错误的，下限必须小于上限</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;判断（if）语句&quot;&gt;&lt;a href=&quot;#判断（if）语句&quot; class=&quot;headerlink&quot; title=&quot;判断（if）语句&quot;&gt;&lt;/a&gt;判断（if）语句&lt;/h1&gt;&lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="python" scheme="https://xxren8218.github.io/categories/python/"/>
    
    
    <category term="python基础" scheme="https://xxren8218.github.io/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>变量的命名</title>
    <link href="https://xxren8218.github.io/20210305/%E5%8F%98%E9%87%8F%E7%9A%84%E5%91%BD%E5%90%8D.html"/>
    <id>https://xxren8218.github.io/20210305/%E5%8F%98%E9%87%8F%E7%9A%84%E5%91%BD%E5%90%8D.html</id>
    <published>2021-03-05T05:58:41.000Z</published>
    <updated>2021-03-05T05:59:00.568Z</updated>
    
    <content type="html"><![CDATA[<h1 id="变量的命名"><a href="#变量的命名" class="headerlink" title="变量的命名"></a>变量的命名</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>标识符和关键字</li><li>变量的命名规则</li></ul><h2 id="0-1-标识符和关键字"><a href="#0-1-标识符和关键字" class="headerlink" title="0.1 标识符和关键字"></a>0.1 标识符和关键字</h2><h3 id="1-1-标识符"><a href="#1-1-标识符" class="headerlink" title="1.1 标识符"></a>1.1 标识符</h3><blockquote><p>标示符就是程序员定义的 <strong>变量名</strong>、<strong>函数名</strong></p><p><strong>名字</strong> 需要有 <strong>见名知义</strong> 的效果，见下图：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/001_%E4%B8%AD%E5%9B%BD%E5%B1%B1%E4%B8%9C%E6%89%BE%E8%93%9D%E7%BF%94.jpg" alt=""></p><ul><li>标示符可以由 <strong>字母</strong>、<strong>下划线</strong> 和 <strong>数字</strong> 组成</li><li><strong>不能以数字开头</strong></li><li><strong>不能与关键字重名</strong></li></ul><p>思考：下面的标示符哪些是正确的，哪些不正确为什么？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">fromNo12</span><br><span class="line">from#12</span><br><span class="line">my_Boolean</span><br><span class="line">my-Boolean</span><br><span class="line">Obj2</span><br><span class="line">2ndObj</span><br><span class="line">myInt</span><br><span class="line">My_tExt</span><br><span class="line">_test</span><br><span class="line">test!32</span><br><span class="line">haha(da)tt</span><br><span class="line">jack_rose</span><br><span class="line">jack&amp;rose</span><br><span class="line">GUI</span><br><span class="line">G.U.I</span><br></pre></td></tr></table></figure><h3 id="1-2-关键字"><a href="#1-2-关键字" class="headerlink" title="1.2 关键字"></a>1.2 关键字</h3><ul><li><strong>关键字</strong> 就是在 <code>Python</code> 内部已经使用的标识符</li><li><strong>关键字</strong> 具有特殊的功能和含义</li><li>开发者 <strong>不允许定义和关键字相同的名字的标示符</strong></li></ul><p>通过以下命令可以查看 <code>Python</code> 中的关键字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> keyword</span><br><span class="line">In [<span class="number">2</span>]: print(keyword.kwlist)</span><br></pre></td></tr></table></figure><blockquote><p>提示：<strong>关键字的学习及使用</strong>，会在后面的课程中不断介绍</p><ul><li><p><code>import</code> <strong>关键字</strong> 可以导入一个 <strong>“工具包”</strong></p></li><li><p>在 <code>Python</code> 中不同的工具包，提供有不同的工具</p></li></ul></blockquote><h2 id="02-变量的命名规则"><a href="#02-变量的命名规则" class="headerlink" title="02. 变量的命名规则"></a>02. 变量的命名规则</h2><blockquote><p><strong>命名规则</strong> 可以被视为一种 <strong>惯例</strong>，并无绝对与强制<br>目的是为了 <strong>增加代码的识别和可读性</strong></p></blockquote><p><strong>注意</strong> <code>Python</code> 中的 <strong>标识符</strong> 是 <strong>区分大小写的</strong></p><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/002_%E6%A0%87%E8%AF%86%E7%AC%A6%E5%8C%BA%E5%88%86%E5%A4%A7%E5%B0%8F%E5%86%99.jpg" alt=""></p><ol><li>在定义变量时，为了保证代码格式，<code>=</code> 的左右应该各保留一个空格</li><li>在 <code>Python</code> 中，如果 <strong>变量名</strong> 需要由 <strong>二个</strong> 或 <strong>多个单词</strong> 组成时，可以按照以下方式命名<ol><li>每个单词都使用小写字母</li><li>单词与单词之间使用 <strong><code>_</code>下划线</strong> 连接</li></ol><ul><li>例如：<code>first_name</code>、<code>last_name</code>、<code>qq_number</code>、<code>qq_password</code></li></ul></li></ol><h3 id="驼峰命名法"><a href="#驼峰命名法" class="headerlink" title="驼峰命名法"></a>驼峰命名法</h3><ul><li>当 <strong>变量名</strong> 是由二个或多个单词组成时，还可以利用驼峰命名法来命名</li><li><strong>小驼峰式命名法</strong><ul><li>第一个单词以小写字母开始，后续单词的首字母大写</li><li>例如：<code>firstName</code>、<code>lastName</code></li></ul></li><li><strong>大驼峰式命名法</strong><ul><li>每一个单词的首字母都采用大写字母</li><li>例如：<code>FirstName</code>、<code>LastName</code>、<code>CamelCase</code> </li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/003_%E9%A9%BC%E5%B3%B0%E5%91%BD%E5%90%8D%E6%B3%95.jpg" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;变量的命名&quot;&gt;&lt;a href=&quot;#变量的命名&quot; class=&quot;headerlink&quot; title=&quot;变量的命名&quot;&gt;&lt;/a&gt;变量的命名&lt;/h1&gt;&lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目</summary>
      
    
    
    
    <category term="python" scheme="https://xxren8218.github.io/categories/python/"/>
    
    
    <category term="python基础" scheme="https://xxren8218.github.io/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>变量的基本使用</title>
    <link href="https://xxren8218.github.io/20210305/%E5%8F%98%E9%87%8F%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.html"/>
    <id>https://xxren8218.github.io/20210305/%E5%8F%98%E9%87%8F%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.html</id>
    <published>2021-03-05T05:57:22.000Z</published>
    <updated>2021-03-05T05:58:06.303Z</updated>
    
    <content type="html"><![CDATA[<h1 id="变量的基本使用"><a href="#变量的基本使用" class="headerlink" title="变量的基本使用"></a>变量的基本使用</h1><blockquote><p><strong>程序就是用来处理数据的，而变量就是用来存储数据的</strong></p></blockquote><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>变量定义</li><li>变量的类型</li><li>变量的命名</li></ul><h2 id="01-变量定义"><a href="#01-变量定义" class="headerlink" title="01. 变量定义"></a>01. 变量定义</h2><ul><li>在 Python 中，每个变量 <strong>在使用前都必须赋值</strong>，变量 <strong>赋值以后</strong> 该变量 <strong>才会被创建</strong></li><li>等号（=）用来给变量赋值<ul><li><code>=</code> 左边是一个变量名</li><li><code>=</code> 右边是存储在变量中的值</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量名 = 值</span><br></pre></td></tr></table></figure><blockquote><p>变量定义之后，后续就可以直接使用了</p></blockquote><h3 id="1-变量演练1-——-iPython"><a href="#1-变量演练1-——-iPython" class="headerlink" title="1) 变量演练1 —— iPython"></a>1) 变量演练1 —— iPython</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义 qq_number 的变量用来保存 qq 号码</span></span><br><span class="line">In [<span class="number">1</span>]: qq_number = <span class="string">&quot;1234567&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出 qq_number 中保存的内容</span></span><br><span class="line">In [<span class="number">2</span>]: qq_number</span><br><span class="line">Out[<span class="number">2</span>]: <span class="string">&#x27;1234567&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 qq_password 的变量用来保存 qq 密码</span></span><br><span class="line">In [<span class="number">3</span>]: qq_password = <span class="string">&quot;123&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出 qq_password 中保存的内容</span></span><br><span class="line">In [<span class="number">4</span>]: qq_password</span><br><span class="line">Out[<span class="number">4</span>]: <span class="string">&#x27;123&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>使用交互式方式，如果要查看变量内容，直接输入变量名即可，不需要使用 <code>print</code> 函数</p></blockquote><h3 id="2-变量演练-2-——-PyCharm"><a href="#2-变量演练-2-——-PyCharm" class="headerlink" title="2) 变量演练 2 —— PyCharm"></a>2) 变量演练 2 —— PyCharm</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义 qq 号码变量</span></span><br><span class="line">qq_number = <span class="string">&quot;1234567&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 qq 密码变量</span></span><br><span class="line">qq_password = <span class="string">&quot;123&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在程序中，如果要输出变量的内容，需要使用 print 函数</span></span><br><span class="line">print(qq_number)</span><br><span class="line">print(qq_password)</span><br></pre></td></tr></table></figure><blockquote><p>使用解释器执行，如果要输出变量的内容，必须要要使用 <code>print</code> 函数</p></blockquote><h3 id="3-变量演练-3-——-超市买苹果"><a href="#3-变量演练-3-——-超市买苹果" class="headerlink" title="3) 变量演练 3 —— 超市买苹果"></a>3) 变量演练 3 —— 超市买苹果</h3><blockquote><ul><li>可以用 <strong>其他变量的计算结果</strong> 来定义变量</li><li>变量定义之后，后续就可以直接使用了</li></ul></blockquote><p><strong>需求</strong></p><ul><li>苹果的价格是 <strong>8.5 元/斤</strong></li><li>买了 <strong>7.5 斤</strong> 苹果</li><li>计算付款金额</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义苹果价格变量</span></span><br><span class="line">price = <span class="number">8.5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义购买重量</span></span><br><span class="line">weight = <span class="number">7.5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算金额</span></span><br><span class="line">money = price * weight</span><br><span class="line"></span><br><span class="line">print(money)</span><br></pre></td></tr></table></figure><h4 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h4><ul><li>如果 <strong>只要买苹果，就返 5 块钱</strong></li><li>请重新计算购买金额</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义苹果价格变量</span></span><br><span class="line">price = <span class="number">8.5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义购买重量</span></span><br><span class="line">weight = <span class="number">7.5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算金额</span></span><br><span class="line">money = price * weight</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只要买苹果就返 5 元</span></span><br><span class="line">money = money - <span class="number">5</span></span><br><span class="line">print(money)</span><br></pre></td></tr></table></figure><p><strong>提问</strong></p><ul><li>上述代码中，一共定义有几个变量？<ul><li>三个：<code>price</code>／<code>weight</code>／<code>money</code></li></ul></li><li><code>money = money - 5</code> 是在定义新的变量还是在使用变量？<ul><li>直接使用之前已经定义的变量</li><li>变量名 只有在 <strong>第一次出现</strong> 才是 <strong>定义变量</strong></li><li>变量名 再次出现，不是定义变量，而是直接使用之前定义过的变量</li></ul></li><li>在程序开发中，可以修改之前定义变量中保存的值吗？<ul><li>可以</li><li>变量中存储的值，就是可以 <strong>变</strong> 的</li></ul></li></ul><h2 id="02-变量的类型"><a href="#02-变量的类型" class="headerlink" title="02. 变量的类型"></a>02. 变量的类型</h2><ul><li>在内存中创建一个变量，会包括：<ol><li>变量的名称</li><li>变量保存的数据</li><li>变量存储数据的类型</li><li>变量的地址（标示）</li></ol></li></ul><h3 id="2-1-变量类型的演练-——-个人信息"><a href="#2-1-变量类型的演练-——-个人信息" class="headerlink" title="2.1 变量类型的演练 —— 个人信息"></a>2.1 变量类型的演练 —— 个人信息</h3><p><strong>需求</strong></p><ul><li>定义变量保存小明的个人信息</li><li>姓名：<strong>小明</strong></li><li>年龄：<strong>18</strong> 岁</li><li>性别：<strong>是</strong>男生</li><li>身高：<strong>1.75</strong> 米</li><li>体重：<strong>75.0</strong> 公斤</li></ul><blockquote><p>利用 <strong>单步调试</strong> 确认变量中保存数据的类型</p></blockquote><p><strong>提问</strong></p><ol><li>在演练中，一共有几种数据类型？<ul><li>4 种</li><li><code>str</code> —— 字符串</li><li><code>bool</code> —— 布尔（真假）</li><li><code>int</code> —— 整数</li><li><code>float</code> —— 浮点数（小数）</li></ul></li><li>在 <code>Python</code> 中定义变量时需要指定类型吗？<ul><li>不需要</li><li><code>Python</code> 可以根据 <code>=</code> 等号右侧的值，自动推导出变量中存储数据的类型</li></ul></li></ol><h3 id="2-2-变量的类型"><a href="#2-2-变量的类型" class="headerlink" title="2.2 变量的类型"></a>2.2 变量的类型</h3><ul><li>在 <code>Python</code> 中定义变量是 <strong>不需要指定类型</strong>（在其他很多高级语言中都需要）</li><li>数据类型可以分为 <strong>数字型</strong> 和 <strong>非数字型</strong></li><li>数字型<ul><li>整型 (<code>int</code>)</li><li>浮点型（<code>float</code>）</li><li>布尔型（<code>bool</code>） <ul><li>真 <code>True</code> <code>非 0 数</code> —— <strong>非零即真</strong></li><li>假 <code>False</code> <code>0</code></li></ul></li><li>复数型 (<code>complex</code>)<ul><li>主要用于科学计算，例如：平面场问题、波动问题、电感电容等问题</li></ul></li></ul></li><li>非数字型<ul><li>字符串</li><li>列表</li><li>元组</li><li>字典</li></ul></li></ul><blockquote><p>提示：在 Python 2.x 中，<strong>整数</strong> 根据保存数值的长度还分为：</p><ul><li><code>int</code>（整数）</li><li><code>long</code>（长整数）</li></ul></blockquote><ul><li>使用 <code>type</code> 函数可以查看一个变量的类型</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="built_in">type</span>(name)</span><br></pre></td></tr></table></figure><h3 id="2-3-不同类型变量之间的计算"><a href="#2-3-不同类型变量之间的计算" class="headerlink" title="2.3 不同类型变量之间的计算"></a>2.3 不同类型变量之间的计算</h3><h4 id="1-数字型变量-之间可以直接计算"><a href="#1-数字型变量-之间可以直接计算" class="headerlink" title="1) 数字型变量 之间可以直接计算"></a>1) <strong>数字型变量</strong> 之间可以直接计算</h4><ul><li>在 Python 中，两个数字型变量是可以直接进行 算数运算的</li><li>如果变量是 <code>bool</code> 型，在计算时<ul><li><code>True</code> 对应的数字是 <code>1</code></li><li><code>False</code> 对应的数字是 <code>0</code></li></ul></li></ul><p><strong>演练步骤</strong></p><ol><li>定义整数 <code>i = 10</code></li><li>定义浮点数 <code>f = 10.5</code></li><li>定义布尔型 <code>b = True</code></li></ol><ul><li>在 iPython 中，使用上述三个变量相互进行算术运算</li></ul><h4 id="2-字符串变量-之间使用-拼接字符串"><a href="#2-字符串变量-之间使用-拼接字符串" class="headerlink" title="2) 字符串变量 之间使用 + 拼接字符串"></a>2) <strong>字符串变量</strong> 之间使用 <code>+</code> 拼接字符串</h4><ul><li>在 Python 中，字符串之间可以使用 <code>+</code> 拼接生成新的字符串</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: first_name = <span class="string">&quot;三&quot;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: last_name = <span class="string">&quot;张&quot;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: first_name + last_name</span><br><span class="line">Out[<span class="number">3</span>]: <span class="string">&#x27;三张&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="3-字符串变量-可以和-整数-使用-重复拼接相同的字符串"><a href="#3-字符串变量-可以和-整数-使用-重复拼接相同的字符串" class="headerlink" title="3) 字符串变量 可以和 整数 使用 * 重复拼接相同的字符串"></a>3) <strong>字符串变量</strong> 可以和 <strong>整数</strong> 使用 <code>*</code> 重复拼接相同的字符串</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="string">&quot;-&quot;</span> * <span class="number">50</span></span><br><span class="line">Out[<span class="number">1</span>]: <span class="string">&#x27;--------------------------------------------------&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="4-数字型变量-和-字符串-之间-不能进行其他计算"><a href="#4-数字型变量-和-字符串-之间-不能进行其他计算" class="headerlink" title="4) 数字型变量 和 字符串 之间 不能进行其他计算"></a>4) <strong>数字型变量</strong> 和 <strong>字符串</strong> 之间 <strong>不能进行其他计算</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: first_name = <span class="string">&quot;zhang&quot;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: x = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: x + first_name</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">TypeError: unsupported operand <span class="built_in">type</span>(s) <span class="keyword">for</span> +: <span class="string">&#x27;int&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;str&#x27;</span></span><br><span class="line">类型错误：`+` 不支持的操作类型：`<span class="built_in">int</span>` 和 `<span class="built_in">str</span>`</span><br></pre></td></tr></table></figure><h3 id="2-4-变量的输入"><a href="#2-4-变量的输入" class="headerlink" title="2.4 变量的输入"></a>2.4 变量的输入</h3><ul><li>所谓 <strong>输入</strong>，就是 <strong>用代码</strong> <strong>获取</strong> 用户通过 <strong>键盘</strong> 输入的信息</li><li>例如：去银行取钱，在 ATM 上输入密码</li><li>在 Python 中，如果要获取用户在 <strong>键盘</strong> 上的输入信息，需要使用到 <code>input</code> 函数</li></ul><h4 id="1-关于函数"><a href="#1-关于函数" class="headerlink" title="1) 关于函数"></a>1) 关于函数</h4><ul><li>一个 <strong>提前准备好的功能</strong>(别人或者自己写的代码)，<strong>可以直接使用</strong>，而 <strong>不用关心内部的细节</strong></li><li>目前已经学习过的函数</li></ul><div class="table-container"><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>print(x)</td><td>将 x 输出到控制台</td></tr><tr><td>type(x)</td><td>查看 x 的变量类型</td></tr></tbody></table></div><h4 id="2-input-函数实现键盘输入"><a href="#2-input-函数实现键盘输入" class="headerlink" title="2) input 函数实现键盘输入"></a>2) input 函数实现键盘输入</h4><ul><li>在 Python 中可以使用 <code>input</code> 函数从键盘等待用户的输入</li><li>用户输入的 <strong>任何内容</strong> Python 都认为是一个 <strong>字符串</strong></li><li>语法如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串变量 = <span class="built_in">input</span>(<span class="string">&quot;提示信息：&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="3-类型转换函数"><a href="#3-类型转换函数" class="headerlink" title="3) 类型转换函数"></a>3) 类型转换函数</h4><div class="table-container"><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>int(x)</td><td>将 x 转换为一个整数</td></tr><tr><td>float(x)</td><td>将 x 转换到一个浮点数</td></tr></tbody></table></div><h4 id="4-变量输入演练-——-超市买苹果增强版"><a href="#4-变量输入演练-——-超市买苹果增强版" class="headerlink" title="4) 变量输入演练 —— 超市买苹果增强版"></a>4) 变量输入演练 —— 超市买苹果增强版</h4><p><strong>需求</strong></p><ul><li><strong>收银员输入</strong> 苹果的价格，单位：<strong>元／斤</strong></li><li><strong>收银员输入</strong> 用户购买苹果的重量，单位：<strong>斤</strong></li><li>计算并且 <strong>输出</strong> 付款金额</li></ul><h5 id="演练方式-1"><a href="#演练方式-1" class="headerlink" title="演练方式 1"></a>演练方式 1</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 输入苹果单价</span></span><br><span class="line">price_str = <span class="built_in">input</span>(<span class="string">&quot;请输入苹果价格：&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 要求苹果重量</span></span><br><span class="line">weight_str = <span class="built_in">input</span>(<span class="string">&quot;请输入苹果重量：&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 计算金额</span></span><br><span class="line"><span class="comment"># 1&gt; 将苹果单价转换成小数</span></span><br><span class="line">price = <span class="built_in">float</span>(price_str)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2&gt; 将苹果重量转换成小数</span></span><br><span class="line">weight = <span class="built_in">float</span>(weight_str)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3&gt; 计算付款金额</span></span><br><span class="line">money = price * weight</span><br><span class="line"></span><br><span class="line">print(money)</span><br></pre></td></tr></table></figure><p><strong>提问</strong></p><ol><li>演练中，针对 <strong>价格</strong> 定义了几个变量？<ul><li><strong>两个</strong></li><li><code>price_str</code> 记录用户输入的价格字符串</li><li><code>price</code> 记录转换后的价格数值</li></ul></li><li><strong>思考</strong> —— 如果开发中，需要用户通过控制台 输入 <strong>很多个 数字</strong>，针对每一个数字都要定义两个变量，<strong>方便吗</strong>？ </li></ol><h5 id="演练方式-2-——-买苹果改进版"><a href="#演练方式-2-——-买苹果改进版" class="headerlink" title="演练方式 2 —— 买苹果改进版"></a>演练方式 2 —— 买苹果改进版</h5><ol><li><strong>定义</strong> 一个 <strong>浮点变量</strong> 接收用户输入的同时，就使用 <code>float</code> 函数进行转换</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">price = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入价格:&quot;</span>))</span><br></pre></td></tr></table></figure><ul><li>改进后的好处：</li></ul><ol><li>节约空间，只需要为一个变量分配空间</li><li>起名字方便，不需要为中间变量起名字</li></ol><ul><li>改进后的“缺点”：</li></ul><ol><li>初学者需要知道，两个函数能够嵌套使用，稍微有一些难度</li></ol><p><strong>提示</strong></p><ul><li>如果输入的不是一个数字，程序执行时会出错，有关数据转换的高级话题，后续会讲！</li></ul><h3 id="2-5-变量的格式化输出"><a href="#2-5-变量的格式化输出" class="headerlink" title="2.5 变量的格式化输出"></a>2.5 变量的格式化输出</h3><blockquote><p>苹果单价 <code>9.00</code> 元／斤，购买了 <code>5.00</code> 斤，需要支付 <code>45.00</code> 元</p></blockquote><ul><li>在 Python 中可以使用 <code>print</code> 函数将信息输出到控制台</li><li>如果希望输出文字信息的同时，<strong>一起输出</strong> <strong>数据</strong>，就需要使用到 <strong>格式化操作符</strong></li><li><code>%</code> 被称为 <strong>格式化操作符</strong>，专门用于处理字符串中的格式<ul><li>包含 <code>%</code> 的字符串，被称为 <strong>格式化字符串</strong></li><li><code>%</code> 和不同的 <strong>字符</strong> 连用，<strong>不同类型的数据</strong> 需要使用 <strong>不同的格式化字符</strong></li></ul></li></ul><div class="table-container"><table><thead><tr><th>格式化字符</th><th>含义</th></tr></thead><tbody><tr><td>%s</td><td>字符串</td></tr><tr><td>%d</td><td>有符号十进制整数，<code>%06d</code> 表示输出的整数显示位数，不足的地方使用 <code>0</code> 补全</td></tr><tr><td>%f</td><td>浮点数，<code>%.2f</code> 表示小数点后只显示两位</td></tr><tr><td>%%</td><td>输出 <code>%</code></td></tr></tbody></table></div><ul><li>语法格式如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">&quot;格式化字符串&quot;</span> % 变量<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;格式化字符串&quot;</span> % (变量<span class="number">1</span>, 变量<span class="number">2.</span>..))</span><br></pre></td></tr></table></figure><h4 id="格式化输出演练-——-基本练习"><a href="#格式化输出演练-——-基本练习" class="headerlink" title="格式化输出演练 —— 基本练习"></a>格式化输出演练 —— 基本练习</h4><p><strong>需求</strong></p><ol><li>定义字符串变量 <code>name</code>，输出 <strong>我的名字叫 小明，请多多关照！</strong></li><li>定义整数变量 <code>student_no</code>，输出 <strong>我的学号是 000001</strong></li><li>定义小数 <code>price</code>、<code>weight</code>、<code>money</code>，输出 <strong>苹果单价 9.00 元／斤，购买了 5.00 斤，需要支付 45.00 元</strong></li><li>定义一个小数 <code>scale</code>，输出 <strong>数据比例是 10.00%</strong></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">&quot;我的名字叫 %s，请多多关照！&quot;</span> % name)</span><br><span class="line">print(<span class="string">&quot;我的学号是 %06d&quot;</span> % student_no)</span><br><span class="line">print(<span class="string">&quot;苹果单价 %.02f 元／斤，购买 %.02f 斤，需要支付 %.02f 元&quot;</span> % (price, weight, money))</span><br><span class="line">print(<span class="string">&quot;数据比例是 %.02f%%&quot;</span> % (scale * <span class="number">100</span>))</span><br></pre></td></tr></table></figure><h4 id="课后练习-——-个人名片"><a href="#课后练习-——-个人名片" class="headerlink" title="课后练习 —— 个人名片"></a>课后练习 —— 个人名片</h4><p><strong>需求</strong></p><ul><li>在控制台依次提示用户输入：<strong>姓名</strong>、<strong>公司</strong>、<strong>职位</strong>、<strong>电话</strong>、<strong>邮箱</strong></li><li>按照以下格式输出：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">**************************************************</span><br><span class="line">公司名称</span><br><span class="line"></span><br><span class="line">姓名 (职位)</span><br><span class="line"></span><br><span class="line">电话：电话</span><br><span class="line">邮箱：邮箱</span><br><span class="line">**************************************************</span><br></pre></td></tr></table></figure><p>实现代码如下：</p><p>```python<br>“””<br>在控制台依次提示用户输入：姓名、公司、职位、电话、电子邮箱<br>“””<br>name = input(“请输入姓名：”)<br>company = input(“请输入公司：”)<br>title = input(“请输入职位：”)<br>phone = input(“请输入电话：”)<br>email = input(“请输入邮箱：”)</p><p>print(“<em>“ </em> 50)<br>print(company)<br>print()<br>print(“%s (%s)” % (name, title))<br>print()<br>print(“电话：%s” % phone)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;变量的基本使用&quot;&gt;&lt;a href=&quot;#变量的基本使用&quot; class=&quot;headerlink&quot; title=&quot;变量的基本使用&quot;&gt;&lt;/a&gt;变量的基本使用&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;程序就是用来处理数据的，而变量就是用来存储数据的&lt;/str</summary>
      
    
    
    
    <category term="python" scheme="https://xxren8218.github.io/categories/python/"/>
    
    
    <category term="python基础" scheme="https://xxren8218.github.io/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>程序执行原理</title>
    <link href="https://xxren8218.github.io/20210305/%E7%A8%8B%E5%BA%8F%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86.html"/>
    <id>https://xxren8218.github.io/20210305/%E7%A8%8B%E5%BA%8F%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86.html</id>
    <published>2021-03-05T05:56:15.000Z</published>
    <updated>2021-03-05T05:56:41.145Z</updated>
    
    <content type="html"><![CDATA[<h1 id="程序执行原理（科普）"><a href="#程序执行原理（科普）" class="headerlink" title="程序执行原理（科普）"></a>程序执行原理（科普）</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>计算机中的 <strong>三大件</strong></li><li>程序执行的原理</li><li>程序的作用</li></ul><h2 id="01-计算机中的三大件"><a href="#01-计算机中的三大件" class="headerlink" title="01. 计算机中的三大件"></a>01. 计算机中的三大件</h2><p>计算机中包含有较多的硬件，但是一个程序要运行，有 <strong>三个</strong> 核心的硬件，分别是：</p><ol><li><strong>CPU</strong> <ul><li>中央处理器，是一块超大规模的集成电路</li><li>负责 <strong>处理数据</strong>／<strong>计算</strong></li></ul></li><li><strong>内存</strong><ul><li><strong>临时</strong> 存储数据（断电之后，数据会消失）</li><li>速度快</li><li>空间小（单位价格高）</li></ul></li><li><strong>硬盘</strong> <ul><li><strong>永久</strong> 存储数据</li><li>速度慢</li><li>空间大（单位价格低）</li></ul></li></ol><div class="table-container"><table><thead><tr><th style="text-align:center">CPU</th><th style="text-align:center">内存</th><th style="text-align:center">硬盘</th></tr></thead><tbody><tr><td style="text-align:center"><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/CPU.jpg" alt=""></td><td style="text-align:center"><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/%E5%86%85%E5%AD%98%E6%9D%A1.png" alt=""></td><td style="text-align:center"><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/%E7%A1%AC%E7%9B%98.jpg" alt=""></td></tr></tbody></table></div><h3 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h3><ol><li>计算机中哪一个硬件设备负责执行程序？<ul><li><strong>CPU</strong></li></ul></li><li><strong>内存</strong> 的速度快还是 <strong>硬盘</strong> 的速度快？<ul><li><strong>内存</strong></li></ul></li><li>我们的程序是安装在内存中的，还是安装在硬盘中的？<ul><li>硬盘</li></ul></li><li><strong>我买了一个内存条，有 500G 的空间！！！</strong>，这句话对吗？<ul><li>不对，内存条通常只有 <code>4G</code> / <code>8G</code> / <code>16G</code> / <code>32G</code></li></ul></li><li><strong>计算机关机之后，内存中的数据都会消失</strong>，这句话对吗？<ul><li>正确 </li></ul></li></ol><h2 id="02-程序执行的原理"><a href="#02-程序执行的原理" class="headerlink" title="02. 程序执行的原理"></a>02. 程序执行的原理</h2><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/001_%E7%A8%8B%E5%BA%8F%E6%89%A7%E8%A1%8C%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt=""></p><ol><li>程序 <strong>运行之前</strong>，程序是 <strong>保存在硬盘</strong> 中的</li><li>当要运行一个程序时<ul><li>操作系统会首先让 <strong>CPU</strong> 把程序复制到 <strong>内存</strong> 中</li><li><strong>CPU</strong> 执行 <strong>内存</strong> 中的 <strong>程序代码</strong></li></ul></li></ol><blockquote><p><strong>程序要执行，首先要被加载到内存</strong></p></blockquote><h3 id="2-1-Python-程序执行原理"><a href="#2-1-Python-程序执行原理" class="headerlink" title="2.1 Python 程序执行原理"></a>2.1 Python 程序执行原理</h3><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/003_Python%E7%A8%8B%E5%BA%8F%E6%89%A7%E8%A1%8C%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt=""></p><ol><li>操作系统会首先让 <strong>CPU</strong> 把 <strong>Python 解释器</strong> 的程序复制到 <strong>内存</strong> 中</li><li><strong>Python 解释器</strong> 根据语法规则，<strong>从上向下</strong> 让 <strong>CPU</strong> 翻译 <strong>Python 程序中的代码</strong></li><li><strong>CPU</strong> 负责执行翻译完成的代码</li></ol><h4 id="Python-的解释器有多大？"><a href="#Python-的解释器有多大？" class="headerlink" title="Python 的解释器有多大？"></a>Python 的解释器有多大？</h4><ul><li>执行以下终端命令可以查看 Python 解释器的大小</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 确认解释器所在位置</span></span><br><span class="line">$ <span class="built_in">which</span> python</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 查看 python 文件大小(只是一个软链接)</span></span><br><span class="line">$ ls -lh /usr/bin/python</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 查看具体文件大小</span></span><br><span class="line">$ ls -lh /usr/bin/python2.7</span><br></pre></td></tr></table></figure><blockquote><p>提示：建立 <strong>软链接</strong> 的目的，是为了方便使用者不用记住使用的解释器是 <strong>哪一个具体版本</strong></p></blockquote><h2 id="03-程序的作用"><a href="#03-程序的作用" class="headerlink" title="03. 程序的作用"></a>03. 程序的作用</h2><blockquote><p>程序就是 <strong>用来处理数据</strong> 的！</p></blockquote><ul><li><strong>新闻软件</strong> 提供的 <strong>新闻内容、评论……</strong> 是数据</li><li><strong>电商软件</strong> 提供的 <strong>商品信息、配送信息……</strong> 是数据</li><li><strong>运动类软件</strong> 提供的 <strong>运动数据……</strong> 是数据</li><li><strong>地图类软件</strong> 提供的 <strong>地图信息、定位信息、车辆信息……</strong> 是数据</li><li><strong>即时通讯软件</strong> 提供的 <strong>聊天信息、好友信息……</strong> 是数据</li><li>……</li></ul><h3 id="3-1-思考-QQ-程序的启动过程"><a href="#3-1-思考-QQ-程序的启动过程" class="headerlink" title="3.1 思考 QQ 程序的启动过程"></a>3.1 思考 QQ 程序的启动过程</h3><ol><li>QQ 在<strong>运行之前</strong>，是保存在 <strong>硬盘</strong> 中的</li><li><strong>运行之后</strong>，QQ 程序就会被加载到 <strong>内存</strong> 中了</li></ol><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/003_QQ%E7%99%BB%E9%99%86%E7%95%8C%E9%9D%A2.png" alt=""></p><h3 id="3-2-思考-QQ-程序的-登录-过程"><a href="#3-2-思考-QQ-程序的-登录-过程" class="headerlink" title="3.2 思考 QQ 程序的 登录 过程"></a>3.2 思考 QQ 程序的 <strong>登录</strong> 过程</h3><ol><li>读取用户输入的 <strong>QQ 号码</strong></li><li>读取用户输入的 <strong>QQ 密码</strong></li><li>将 <strong>QQ 号码</strong> 和 <strong>QQ 密码</strong> 发送给腾讯的服务器，等待服务器确认用户信息</li></ol><h4 id="思考-1"><a href="#思考-1" class="headerlink" title="思考 1"></a>思考 1</h4><blockquote><p>在 QQ 这个程序将 <strong>QQ 号码</strong> 和 <strong>QQ 密码</strong> 发送给服务器之前，<strong>是否需要先存储一下 QQ 号码 和 密码?</strong></p></blockquote><p><strong>答案</strong></p><p>肯定需要！—— 否则 QQ 这个程序就不知道把什么内容发送给服务器了！</p><h4 id="思考-2"><a href="#思考-2" class="headerlink" title="思考 2"></a>思考 2</h4><blockquote><p>QQ 这个程序把 <strong>QQ 号码</strong> 和 <strong>QQ 密码</strong> 保存在哪里？</p></blockquote><p><strong>答案</strong></p><p>保存在 <strong>内存</strong> 中，因为 QQ 程序自己就在内存中</p><h4 id="思考-3"><a href="#思考-3" class="headerlink" title="思考 3"></a>思考 3</h4><blockquote><p>QQ 这个程序是怎么保存用户的 <strong>QQ 号码</strong> 和 <strong>QQ 密码</strong> 的？</p></blockquote><p><strong>答案</strong></p><ol><li>在内存中为 <strong>QQ 号码</strong> 和 <strong>QQ 密码</strong> 各自分配一块空间<ul><li>在 QQ 程序结束之前，这两块空间是由 QQ 程序负责管理的，其他任何程序都不允许使用</li><li>在 QQ 自己使用完成之前，这两块空间始终都只负责保存 <strong>QQ 号码</strong> 和 <strong>QQ 密码</strong></li></ul></li><li>使用一个 <strong>别名</strong> 标记 <strong>QQ 号码</strong> 和 <strong>QQ 密码</strong> 在内存中的位置</li></ol><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/004_QQ%E5%8F%B7%E7%A0%81%E5%92%8C%E5%AF%86%E7%A0%81%E5%86%85%E5%AD%98%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt=""></p><blockquote><ul><li>在程序内部，为 <strong>QQ 号码</strong> 和 <strong>QQ 密码</strong> 在内存中分配的空间就叫做 <strong>变量</strong></li><li><strong>程序就是用来处理数据的，而变量就是用来存储数据的</strong></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;程序执行原理（科普）&quot;&gt;&lt;a href=&quot;#程序执行原理（科普）&quot; class=&quot;headerlink&quot; title=&quot;程序执行原理（科普）&quot;&gt;&lt;/a&gt;程序执行原理（科普）&lt;/h1&gt;&lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="python" scheme="https://xxren8218.github.io/categories/python/"/>
    
    
    <category term="python基础" scheme="https://xxren8218.github.io/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>算数运算符</title>
    <link href="https://xxren8218.github.io/20210305/%E7%AE%97%E6%95%B0%E8%BF%90%E7%AE%97%E7%AC%A6.html"/>
    <id>https://xxren8218.github.io/20210305/%E7%AE%97%E6%95%B0%E8%BF%90%E7%AE%97%E7%AC%A6.html</id>
    <published>2021-03-05T05:54:25.000Z</published>
    <updated>2021-03-05T05:54:58.023Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h1><p><strong>计算机</strong>，顾名思义就是负责进行 <strong>数学计算</strong> 并且 <strong>存储计算结果</strong> 的电子设备</p><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>算术运算符的基本使用</li></ul><h2 id="01-算数运算符"><a href="#01-算数运算符" class="headerlink" title="01. 算数运算符"></a>01. 算数运算符</h2><ul><li>算数运算符是 <strong>运算符的一种</strong></li><li>是完成基本的算术运算使用的符号，用来处理四则运算</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">描述</th><th>实例</th></tr></thead><tbody><tr><td style="text-align:center">+</td><td style="text-align:center">加</td><td>10 + 20 = 30</td></tr><tr><td style="text-align:center">-</td><td style="text-align:center">减</td><td>10 - 20 = -10</td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">乘</td><td>10 * 20 = 200</td></tr><tr><td style="text-align:center">/</td><td style="text-align:center">除</td><td>10 / 20 = 0.5</td></tr><tr><td style="text-align:center">//</td><td style="text-align:center">取整除</td><td>返回除法的整数部分（商） 9 // 2 输出结果 4</td></tr><tr><td style="text-align:center">%</td><td style="text-align:center">取余数</td><td>返回除法的余数 9 % 2 = 1</td></tr><tr><td style="text-align:center">**</td><td style="text-align:center">幂</td><td>又称次方、乘方，2 ** 3 = 8</td></tr></tbody></table></div><ul><li>在 Python 中 <code>*</code> 运算符还可以用于字符串，计算结果就是字符串重复指定次数的结果</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="string">&quot;-&quot;</span> * <span class="number">50</span></span><br><span class="line">Out[<span class="number">1</span>]: <span class="string">&#x27;----------------------------------------&#x27;</span> </span><br></pre></td></tr></table></figure><h2 id="02-算数运算符的优先级"><a href="#02-算数运算符的优先级" class="headerlink" title="02. 算数运算符的优先级"></a>02. 算数运算符的优先级</h2><ul><li><p>和数学中的运算符的优先级一致，在 Python 中进行数学计算时，同样也是：</p><ul><li><strong>先乘除后加减</strong></li><li>同级运算符是 <strong>从左至右</strong> 计算</li><li>可以使用 <code>()</code> 调整计算的优先级</li></ul></li><li><p>以下表格的算数优先级由高到最低顺序排列</p></li></ul><div class="table-container"><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>**</td><td>幂 (最高优先级)</td></tr><tr><td>* / % //</td><td>乘、除、取余数、取整除</td></tr><tr><td>+ -</td><td>加法、减法</td></tr></tbody></table></div><ul><li>例如：<ul><li><code>2 + 3 * 5 = 17</code></li><li><code>(2 + 3) * 5 = 25</code></li><li><code>2 * 3 + 5 = 11</code></li><li><code>2 * (3 + 5) = 16</code></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;算数运算符&quot;&gt;&lt;a href=&quot;#算数运算符&quot; class=&quot;headerlink&quot; title=&quot;算数运算符&quot;&gt;&lt;/a&gt;算数运算符&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;计算机&lt;/strong&gt;，顾名思义就是负责进行 &lt;strong&gt;数学计算&lt;/strong&gt; 并且 &lt;</summary>
      
    
    
    
    <category term="python" scheme="https://xxren8218.github.io/categories/python/"/>
    
    
    <category term="python基础" scheme="https://xxren8218.github.io/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>注释</title>
    <link href="https://xxren8218.github.io/20210305/%E6%B3%A8%E9%87%8A.html"/>
    <id>https://xxren8218.github.io/20210305/%E6%B3%A8%E9%87%8A.html</id>
    <published>2021-03-05T05:53:10.000Z</published>
    <updated>2021-03-05T05:53:31.647Z</updated>
    
    <content type="html"><![CDATA[<h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>注释的作用</li><li>单行注释（行注释）</li><li>多行注释（块注释）</li></ul><h2 id="01-注释的作用"><a href="#01-注释的作用" class="headerlink" title="01. 注释的作用"></a>01. 注释的作用</h2><blockquote><p>使用用自己熟悉的语言，在程序中对某些代码进行标注说明，增强程序的可读性</p></blockquote><h2 id="02-单行注释-行注释"><a href="#02-单行注释-行注释" class="headerlink" title="02. 单行注释(行注释)"></a>02. 单行注释(行注释)</h2><ul><li><p>以 <code>#</code> 开头，<code>#</code> 右边的所有东西都被当做说明文字，而不是真正要执行的程序，只起到辅助说明作用</p></li><li><p>示例代码如下：</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这是第一个单行注释</span></span><br><span class="line">print(<span class="string">&quot;hello python&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>为了保证代码的可读性，<code>#</code> 后面建议先添加一个空格，然后再编写相应的说明文字</p></blockquote><h3 id="在代码后面增加的单行注释"><a href="#在代码后面增加的单行注释" class="headerlink" title="在代码后面增加的单行注释"></a>在代码后面增加的单行注释</h3><ul><li>在程序开发时，同样可以使用 <code>#</code> 在代码的后面（旁边）增加说明性的文字</li><li><p>但是，需要注意的是，<strong>为了保证代码的可读性</strong>，<strong>注释和代码之间</strong> 至少要有 <strong>两个空格</strong></p></li><li><p>示例代码如下：</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">&quot;hello python&quot;</span>)  <span class="comment"># 输出 `hello python`</span></span><br></pre></td></tr></table></figure><h2 id="03-多行注释（块注释）"><a href="#03-多行注释（块注释）" class="headerlink" title="03. 多行注释（块注释）"></a>03. 多行注释（块注释）</h2><ul><li>如果希望编写的 <strong>注释信息很多，一行无法显示</strong>，就可以使用多行注释</li><li><p>要在 Python 程序中使用多行注释，可以用 <strong>一对 连续的 三个 引号</strong>(单引号和双引号都可以)</p></li><li><p>示例代码如下：</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">这是一个多行注释</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">在多行注释之间，可以写很多很多的内容……</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span> </span><br><span class="line">print(<span class="string">&quot;hello python&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="什么时候需要使用注释？"><a href="#什么时候需要使用注释？" class="headerlink" title="什么时候需要使用注释？"></a>什么时候需要使用注释？</h3><ol><li><strong>注释不是越多越好</strong>，对于一目了然的代码，不需要添加注释</li><li>对于 <strong>复杂的操作</strong>，应该在操作开始前写上若干行注释</li><li>对于 <strong>不是一目了然的代码</strong>，应在其行尾添加注释（为了提高可读性，注释应该至少离开代码 2 个空格）</li><li>绝不要描述代码，假设阅读代码的人比你更懂 Python，他只是不知道你的代码要做什么</li></ol><blockquote><p>在一些正规的开发团队，通常会有 <strong>代码审核</strong> 的惯例，就是一个团队中彼此阅读对方的代码</p></blockquote><h3 id="关于代码规范"><a href="#关于代码规范" class="headerlink" title="关于代码规范"></a>关于代码规范</h3><ul><li><code>Python</code> 官方提供有一系列 PEP（Python Enhancement Proposals） 文档</li><li>其中第 8 篇文档专门针对 <strong>Python 的代码格式</strong> 给出了建议，也就是俗称的 <strong>PEP 8</strong></li><li>文档地址：<a href="https://www.python.org/dev/peps/pep-0008/">https://www.python.org/dev/peps/pep-0008/</a></li><li>谷歌有对应的中文文档：<a href="http://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/python_style_rules/">http://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/python_style_rules/</a></li></ul><blockquote><p>任何语言的程序员，编写出符合规范的代码，是开始程序生涯的第一步</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;注释&quot;&gt;&lt;a href=&quot;#注释&quot; class=&quot;headerlink&quot; title=&quot;注释&quot;&gt;&lt;/a&gt;注释&lt;/h1&gt;&lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h2&gt;&lt;ul&gt;
&lt;</summary>
      
    
    
    
    <category term="python" scheme="https://xxren8218.github.io/categories/python/"/>
    
    
    <category term="python基础" scheme="https://xxren8218.github.io/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>多文件项目的演练</title>
    <link href="https://xxren8218.github.io/20210305/%E5%A4%9A%E6%96%87%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%BC%94%E7%BB%83.html"/>
    <id>https://xxren8218.github.io/20210305/%E5%A4%9A%E6%96%87%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%BC%94%E7%BB%83.html</id>
    <published>2021-03-05T05:49:51.000Z</published>
    <updated>2021-03-05T05:50:25.330Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多文件项目的演练"><a href="#多文件项目的演练" class="headerlink" title="多文件项目的演练"></a>多文件项目的演练</h1><ul><li>开发 <strong>项目</strong> 就是开发一个 <strong>专门解决一个复杂业务功能的软件</strong></li><li>通常每 <strong>一个项目</strong> 就具有一个 <strong>独立专属的目录</strong>，用于保存 <strong>所有和项目相关的文件</strong><ul><li>一个项目通常会包含 <strong>很多源文件</strong></li></ul></li></ul><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>在项目中添加多个文件，并且设置文件的执行</li></ul><h2 id="多文件项目演练"><a href="#多文件项目演练" class="headerlink" title="多文件项目演练"></a>多文件项目演练</h2><ol><li>在 <code>01_Python基础</code> 项目中新建一个 <code>hm_02_第2个Python程序.py</code> </li><li>在 <code>hm_02_第2个Python程序.py</code> 文件中添加一句 <code>print(&quot;hello&quot;)</code></li><li><strong>点击右键执行</strong> <code>hm_02_第2个Python程序.py</code></li></ol><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/001_%E8%AE%A9%E9%80%89%E4%B8%AD%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%8F%AF%E4%BB%A5%E6%89%A7%E8%A1%8C.png" alt=""></p><h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><ul><li>在 <code>PyCharm</code> 中，要想让哪一个 <code>Python</code> 程序能够执行，必须首先通过 <strong>鼠标右键的方式执行</strong> 一下</li><li>对于初学者而言，在一个项目中设置多个程序可以执行，是非常方便的，可以方便对不同知识点的练习和测试</li><li>对于商业项目而言，通常在一个项目中，只有一个 <strong>可以直接执行的 Python 源程序</strong></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;多文件项目的演练&quot;&gt;&lt;a href=&quot;#多文件项目的演练&quot; class=&quot;headerlink&quot; title=&quot;多文件项目的演练&quot;&gt;&lt;/a&gt;多文件项目的演练&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;开发 &lt;strong&gt;项目&lt;/strong&gt; 就是开发一个 &lt;strong&gt;专门</summary>
      
    
    
    
    <category term="python" scheme="https://xxren8218.github.io/categories/python/"/>
    
    
    <category term="python基础" scheme="https://xxren8218.github.io/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>python的初始设置</title>
    <link href="https://xxren8218.github.io/20210305/python%E7%9A%84%E5%88%9D%E5%A7%8B%E8%AE%BE%E7%BD%AE.html"/>
    <id>https://xxren8218.github.io/20210305/python%E7%9A%84%E5%88%9D%E5%A7%8B%E8%AE%BE%E7%BD%AE.html</id>
    <published>2021-03-05T05:48:27.000Z</published>
    <updated>2021-03-05T05:49:01.701Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PyCharm-的初始设置（知道）"><a href="#PyCharm-的初始设置（知道）" class="headerlink" title="PyCharm 的初始设置（知道）"></a>PyCharm 的初始设置（知道）</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>恢复 PyCharm 的初始设置</li><li>第一次启动 PyCharm</li><li>新建一个 Python 项目</li><li>设置 PyCharm 的字体显示</li><li>PyCharm 的升级以及其他</li></ul><p>PyCharm 的官方网站地址是：<a href="https://www.jetbrains.com/pycharm/">https://www.jetbrains.com/pycharm/</a></p><h2 id="01-恢复-PyCharm-的初始设置"><a href="#01-恢复-PyCharm-的初始设置" class="headerlink" title="01. 恢复 PyCharm 的初始设置"></a>01. 恢复 PyCharm 的初始设置</h2><p><code>PyCharm</code> 的 <strong>配置信息</strong> 是保存在 <strong>用户家目录下</strong> 的 <code>.PyCharmxxxx.x</code> 目录下的，<code>xxxx.x</code> 表示当前使用的 <code>PyCharm</code> 的版本号</p><p>如果要恢复 <code>PyCharm</code> 的初始设置，可以按照以下步骤进行：</p><ul><li><ol><li>关闭正在运行的 <code>PyCharm</code></li></ol></li><li><ol><li>在终端中执行以下终端命令，删除 <code>PyCharm</code> 的配置信息目录：</li></ol></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rm -r ~/.PyCharm2016.3</span><br></pre></td></tr></table></figure><ul><li><ol><li>重新启动 <code>PyCharm</code></li></ol></li></ul><h2 id="02-第一次启动-PyCharm"><a href="#02-第一次启动-PyCharm" class="headerlink" title="02. 第一次启动 PyCharm"></a>02. 第一次启动 PyCharm</h2><ol><li>导入配置信息</li><li>选择许可协议</li><li>配置初始界面</li></ol><h3 id="2-1-导入配置信息"><a href="#2-1-导入配置信息" class="headerlink" title="2.1 导入配置信息"></a>2.1 导入配置信息</h3><ul><li>在第一次启动 <code>PyCharm</code> 时，会首先提示用户是否导入 <strong>之前的配置信息</strong></li><li>如果是第一次使用，直接点击 <strong>OK</strong> 按钮</li></ul><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/001_PyCharm%E5%AF%BC%E5%85%A5%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF.png" alt=""></p><h3 id="2-2-选择许可协议"><a href="#2-2-选择许可协议" class="headerlink" title="2.2 选择许可协议"></a>2.2 选择许可协议</h3><ul><li>PyCharm 是一个付费软件，购买费用为 <strong>199$ / 年</strong> 或者 <strong>19.90$ ／ 月</strong></li><li>不过 PyCharm 提供了对 <strong>学生和教师免费使用的版本</strong><ul><li>下载地址是：<a href="https://www.jetbrains.com/pycharm-edu/download/#section=linux">https://www.jetbrains.com/pycharm-edu/download/#section=linux</a></li></ul></li><li>商业版本会提示输入注册信息，或者选择免费评估</li></ul><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/002_%E6%BF%80%E6%B4%BB%E8%AE%B8%E5%8F%AF%E8%AF%81.png" alt=""></p><h3 id="2-3-PyCharm-的配置初始界面"><a href="#2-3-PyCharm-的配置初始界面" class="headerlink" title="2.3 PyCharm 的配置初始界面"></a>2.3 PyCharm 的配置初始界面</h3><ul><li>在初始配置界面，可以通过 <code>Editor colors and fonts</code> 选择 <strong>编辑器的配色方案</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/003_PyCharm%E5%88%9D%E5%A7%8B%E9%85%8D%E7%BD%AE%E7%95%8C%E9%9D%A2.png" alt=""></p><h3 id="2-4-欢迎界面"><a href="#2-4-欢迎界面" class="headerlink" title="2.4 欢迎界面"></a>2.4 欢迎界面</h3><ul><li>所有基础配置工作结束之后，就可以看到 <code>PyCharm</code> 的 <strong>欢迎界面</strong>了，通过 <strong>欢迎界面</strong> 就可以开始开发 Python 项目了</li></ul><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/004_PyCharm%E6%AC%A2%E8%BF%8E%E9%A1%B5%E9%9D%A2.png" alt=""></p><h2 id="03-新建-打开一个-Python-项目"><a href="#03-新建-打开一个-Python-项目" class="headerlink" title="03. 新建/打开一个 Python 项目"></a>03. 新建/打开一个 Python 项目</h2><h3 id="3-1-项目简介"><a href="#3-1-项目简介" class="headerlink" title="3.1 项目简介"></a>3.1 项目简介</h3><ul><li>开发 <strong>项目</strong> 就是开发一个 <strong>专门解决一个复杂业务功能的软件</strong></li><li>通常每 <strong>一个项目</strong> 就具有一个 <strong>独立专属的目录</strong>，用于保存 <strong>所有和项目相关的文件</strong><ul><li>一个项目通常会包含 <strong>很多源文件</strong></li></ul></li></ul><h3 id="3-2-打开-Python-项目"><a href="#3-2-打开-Python-项目" class="headerlink" title="3.2 打开 Python 项目"></a>3.2 打开 Python 项目</h3><ul><li>直接点击 <strong>Open</strong> 按钮，然后浏览到之前保存 <strong>Python 文件的目录</strong>，既可以打开项目</li><li>打开之后，会在目录下新建一个 <code>.idea</code> 的目录，用于保存 <strong>项目相关的信息</strong>，例如：<strong>解释器版本</strong>、<strong>项目包含的文件</strong>等等</li><li>第一次打开项目，需要耐心等待 <code>PyCharm</code> 对项目<strong>进行初始设置</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/005_%E6%89%93%E5%BC%80%E5%B7%B2%E6%9C%89Python%E9%A1%B9%E7%9B%AE.png" alt=""></p><h4 id="设置项目使用的解释器版本"><a href="#设置项目使用的解释器版本" class="headerlink" title="设置项目使用的解释器版本"></a>设置项目使用的解释器版本</h4><ul><li>打开的目录如果不是由 <code>PyCharm</code> 建立的项目目录，<strong>有的时候</strong> 使用的解释器版本是 <code>Python 2.x</code> 的，需要<strong>单独设置解释器的版本</strong></li><li>通过 <strong>File</strong> / <strong>Settings…</strong> 可以打开设置窗口，如下图所示：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/006_%E9%80%89%E6%8B%A9%E9%A1%B9%E7%9B%AE%E7%9A%84%E8%A7%A3%E9%87%8A%E5%99%A8%E7%89%88%E6%9C%AC.png" alt=""></p><h3 id="3-3-新建项目"><a href="#3-3-新建项目" class="headerlink" title="3.3 新建项目"></a>3.3 新建项目</h3><h4 id="1-命名规则"><a href="#1-命名规则" class="headerlink" title="1) 命名规则"></a>1) 命名规则</h4><ul><li>以后 <strong>项目名</strong> 前面都以 <strong>数字编号</strong>，<strong>随着知识点递增，编号递增</strong><ul><li>例如：<strong>01_Python 基础</strong>、<strong>02_分支</strong>、<strong>03_循环</strong>…</li></ul></li><li><p>每个项目下的 <strong>文件名</strong> 都以 <code>hm_xx_知识点</code> 方式来命名</p><ul><li>其中 <strong>xx</strong> 是演练文件的序号</li></ul></li><li><p>注意</p><ul><li><ol><li>命名文件名时建议只使用 <strong>小写字母</strong>、<strong>数字</strong> 和 <strong>下划线</strong></li></ol></li><li><ol><li><strong>文件名不能以数字开始</strong></li></ol></li></ul></li><li><p>通过 <strong>欢迎界面</strong> 或者菜单 <strong>File</strong> / <strong>New Project</strong> 可以新建项目</p></li></ul><h4 id="2-演练步骤"><a href="#2-演练步骤" class="headerlink" title="2) 演练步骤"></a>2) 演练步骤</h4><ul><li>新建 <code>01_Python基础</code> 项目，使用 <strong>Python 3.x 解释器</strong></li><li>在项目下新建 <code>hm_01_hello.py</code> Python 文件</li><li>编写 <code>print(&quot;Hello Python&quot;)</code> 代码</li></ul><h2 id="04-设置-PyCharm-的字体显示"><a href="#04-设置-PyCharm-的字体显示" class="headerlink" title="04. 设置 PyCharm 的字体显示"></a>04. 设置 PyCharm 的字体显示</h2><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/007_PyCharm%E8%AE%BE%E7%BD%AE%E7%BC%96%E8%BE%91%E5%99%A8%E5%AD%97%E4%BD%93.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/008_PyCharm%E8%AE%BE%E7%BD%AE%E6%8E%A7%E5%88%B6%E5%8F%B0%E5%AD%97%E4%BD%93.png" alt=""></p><h2 id="05-PyCharm-的升级以及其他"><a href="#05-PyCharm-的升级以及其他" class="headerlink" title="05. PyCharm 的升级以及其他"></a>05. PyCharm 的升级以及其他</h2><blockquote><p>PyCharm 提供了对 <strong>学生和教师免费使用的版本</strong></p></blockquote><ul><li>教育版下载地址：<a href="https://www.jetbrains.com/pycharm-edu/download/#section=linux">https://www.jetbrains.com/pycharm-edu/download/#section=linux</a></li><li>专业版下载地址：<a href="https://www.jetbrains.com/pycharm/download/#section=linux">https://www.jetbrains.com/pycharm/download/#section=linux</a></li></ul><h3 id="5-1-安装和启动步骤"><a href="#5-1-安装和启动步骤" class="headerlink" title="5.1 安装和启动步骤"></a>5.1 安装和启动步骤</h3><ul><li><ol><li>执行以下终端命令，解压缩下载后的安装包</li></ol></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tar -zxvf pycharm-professional-2017.1.3.tar.gz</span><br></pre></td></tr></table></figure><ul><li><ol><li>将解压缩后的目录移动到 <code>/opt</code> 目录下，可以方便其他用户使用</li></ol></li></ul><blockquote><p><code>/opt</code> 目录用户存放给主机额外安装的软件</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mv pycharm-2017.1.3/ /opt/</span><br></pre></td></tr></table></figure><ul><li><ol><li>切换工作目录</li></ol></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /opt/pycharm-2017.1.3/bin</span><br></pre></td></tr></table></figure><ul><li><ol><li>启动 <code>PyCharm</code></li></ol></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./pycharm.sh</span><br></pre></td></tr></table></figure><h3 id="5-2-设置专业版启动图标"><a href="#5-2-设置专业版启动图标" class="headerlink" title="5.2 设置专业版启动图标"></a>5.2 设置专业版启动图标</h3><ul><li>在<strong>专业版</strong>中，选择菜单 <strong>Tools</strong> / <strong>Create Desktop Entry…</strong> 可以设置任务栏启动图标<ul><li>注意：设置图标时，需要勾选 <code>Create the entry for all users</code></li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/009_%E5%88%9B%E5%BB%BA%E6%A1%8C%E9%9D%A2%E5%9B%BE%E6%A0%87.png" alt=""></p><h3 id="5-3-卸载之前版本的-PyCharm"><a href="#5-3-卸载之前版本的-PyCharm" class="headerlink" title="5.3 卸载之前版本的 PyCharm"></a>5.3 卸载之前版本的 PyCharm</h3><h4 id="1-程序安装"><a href="#1-程序安装" class="headerlink" title="1) 程序安装"></a>1) 程序安装</h4><ul><li><ol><li><strong>程序文件目录</strong> <ul><li>将安装包解压缩，并且移动到 <code>/opt</code> 目录下</li><li><strong>所有的相关文件都保存在解压缩的目录中</strong></li></ul></li></ol></li><li><ol><li><strong>配置文件目录</strong><ul><li>启动 <code>PyCharm</code> 后，会在用户家目录下建立一个 <code>.PyCharmxxx</code> 的隐藏目录</li><li><strong>保存 <code>PyCharm</code> 相关的配置信息</strong></li></ul></li></ol></li><li><ol><li><strong>快捷方式文件</strong><ul><li><code>/usr/share/applications/jetbrains-pycharm.desktop</code> </li></ul></li></ol></li></ul><blockquote><p>在 <code>ubuntu</code> 中，应用程序启动的快捷方式通常都保存在 <code>/usr/share/applications</code> 目录下</p></blockquote><h4 id="2-程序卸载"><a href="#2-程序卸载" class="headerlink" title="2) 程序卸载"></a>2) 程序卸载</h4><ul><li><p>要卸载 <code>PyCharm</code> 只需要做以下两步工作：</p></li><li><ol><li>删除解压缩目录</li></ol></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo rm -r /opt/pycharm-2016.3.1/</span><br></pre></td></tr></table></figure><ul><li><ol><li>删除家目录下用于保存配置信息的隐藏目录</li></ol></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rm -r ~/.PyCharm2016.3/</span><br></pre></td></tr></table></figure><blockquote><p>如果不再使用 PyCharm 还需要将 <code>/usr/share/applications/</code> 下的 <code>jetbrains-pycharm.desktop</code> 删掉</p></blockquote><h3 id="5-4-教育版安装演练"><a href="#5-4-教育版安装演练" class="headerlink" title="5.4 教育版安装演练"></a>5.4 教育版安装演练</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 解压缩下载后的安装包</span></span><br><span class="line">$ tar -zxvf pycharm-edu-3.5.1.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 将解压缩后的目录移动到 `/opt` 目录下，可以方便其他用户使用</span></span><br><span class="line">$ sudo mv pycharm-edu-3.5.1/ /opt/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 启动 `PyCharm`</span></span><br><span class="line">/opt/pycharm-edu-3.5.1/bin/pycharm.sh</span><br></pre></td></tr></table></figure><blockquote><p>后续课程<strong>都使用专业版本演练</strong></p></blockquote><h4 id="设置启动图标"><a href="#设置启动图标" class="headerlink" title="设置启动图标"></a>设置启动图标</h4><ul><li><ol><li>编辑快捷方式文件</li></ol></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo gedit /usr/share/applications/jetbrains-pycharm.desktop</span><br></pre></td></tr></table></figure><ul><li><ol><li>按照以下内容修改文件内容，需要注意<strong>指定正确的 <code>pycharm</code> 目录</strong></li></ol></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Version=1.0</span><br><span class="line">Type=Application</span><br><span class="line">Name=PyCharm</span><br><span class="line">Icon=/opt/pycharm-edu-3.5.1/bin/pycharm.png</span><br><span class="line">Exec=<span class="string">&quot;/opt/pycharm-edu-3.5.1/bin/pycharm.sh&quot;</span> %f</span><br><span class="line">Comment=The Drive to Develop</span><br><span class="line">Categories=Development;IDE;</span><br><span class="line">Terminal=<span class="literal">false</span></span><br><span class="line">StartupWMClass=jetbrains-pycharm</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;PyCharm-的初始设置（知道）&quot;&gt;&lt;a href=&quot;#PyCharm-的初始设置（知道）&quot; class=&quot;headerlink&quot; title=&quot;PyCharm 的初始设置（知道）&quot;&gt;&lt;/a&gt;PyCharm 的初始设置（知道）&lt;/h1&gt;&lt;h2 id=&quot;目标&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="python" scheme="https://xxren8218.github.io/categories/python/"/>
    
    
    <category term="python基础" scheme="https://xxren8218.github.io/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>第一个python程序</title>
    <link href="https://xxren8218.github.io/20210305/%E7%AC%AC%E4%B8%80%E4%B8%AApython%E7%A8%8B%E5%BA%8F.html"/>
    <id>https://xxren8218.github.io/20210305/%E7%AC%AC%E4%B8%80%E4%B8%AApython%E7%A8%8B%E5%BA%8F.html</id>
    <published>2021-03-05T05:46:26.000Z</published>
    <updated>2021-03-05T05:47:11.023Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一个-Python-程序"><a href="#第一个-Python-程序" class="headerlink" title="第一个 Python 程序"></a>第一个 Python 程序</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>第一个 <code>HelloPython</code> 程序</li><li><code>Python 2.x</code> 与 <code>3.x</code> 版本简介</li><li>执行 <code>Python</code> 程序的三种方式<ul><li>解释器 —— <code>python</code> / <code>python3</code></li><li>交互式 —— <code>ipython</code></li><li>集成开发环境 —— <code>PyCharm</code></li></ul></li></ul><h2 id="01-第一个-HelloPython-程序"><a href="#01-第一个-HelloPython-程序" class="headerlink" title="01. 第一个 HelloPython 程序"></a>01. 第一个 <code>HelloPython</code> 程序</h2><h3 id="1-1-Python-源程序的基本概念"><a href="#1-1-Python-源程序的基本概念" class="headerlink" title="1.1 Python 源程序的基本概念"></a>1.1 Python 源程序的基本概念</h3><ol><li>Python 源程序就是<strong>一个特殊格式的文本文件</strong>，可以<strong>使用任意文本编辑软件</strong>做 <code>Python</code> 的开发</li><li>Python 程序的 <strong>文件扩展名</strong> 通常都是 <code>.py</code></li></ol><h3 id="1-2-演练步骤"><a href="#1-2-演练步骤" class="headerlink" title="1.2 演练步骤"></a>1.2 演练步骤</h3><ul><li>在桌面下，新建 <code>认识Python</code> 目录</li><li>在 <code>认识Python</code> 目录下新建 <code>01-HelloPython.py</code> 文件</li><li>使用 <strong>gedit</strong> 编辑 <code>01-HelloPython.py</code> 并且输入以下内容：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">&quot;hello python&quot;</span>)</span><br><span class="line">print(<span class="string">&quot;hello world&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>在终端中输入以下命令执行 <code>01-HelloPython.py</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python 01-HelloPython.py</span><br></pre></td></tr></table></figure><blockquote><p><code>print</code> 是 <code>python</code> 中我们学习的第一个 <strong>函数</strong></p><p><code>print</code> 函数的作用，可以把 <strong>“”</strong> 内部的内容，输出到屏幕上</p></blockquote><h3 id="1-3-演练扩展-——-认识错误（BUG）"><a href="#1-3-演练扩展-——-认识错误（BUG）" class="headerlink" title="1.3 演练扩展 —— 认识错误（BUG）"></a>1.3 演练扩展 —— 认识错误（BUG）</h3><h4 id="关于错误"><a href="#关于错误" class="headerlink" title="关于错误"></a>关于错误</h4><ul><li>编写的程序<strong>不能正常执行</strong>，或者<strong>执行的结果不是我们期望的</strong></li><li>俗称 <code>BUG</code>，是程序员在开发时非常常见的，初学者常见错误的原因包括：<ol><li>手误</li><li>对已经学习过的知识理解还存在不足</li><li>对语言还有需要学习和提升的内容</li></ol></li><li>在学习语言时，不仅要<strong>学会语言的语法</strong>，而且还要<strong>学会如何认识错误和解决错误的方法</strong></li></ul><blockquote><p>每一个程序员都是在不断地修改错误中成长的</p></blockquote><h4 id="第一个演练中的常见错误"><a href="#第一个演练中的常见错误" class="headerlink" title="第一个演练中的常见错误"></a>第一个演练中的常见错误</h4><ul><li>1&gt; <strong>手误</strong>，例如使用 <code>pirnt(&quot;Hello world&quot;)</code> </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NameError: name <span class="string">&#x27;pirnt&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line"></span><br><span class="line">名称错误：<span class="string">&#x27;pirnt&#x27;</span> 名字没有定义</span><br></pre></td></tr></table></figure><ul><li>2&gt; 将多条 <code>print</code> 写在一行</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SyntaxError: invalid syntax</span><br><span class="line"></span><br><span class="line">语法错误：语法无效</span><br></pre></td></tr></table></figure><blockquote><p>每行代码负责完成一个动作</p></blockquote><ul><li>3&gt; 缩进错误</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">IndentationError: unexpected indent</span><br><span class="line"></span><br><span class="line">缩进错误：不期望出现的缩进</span><br></pre></td></tr></table></figure><blockquote><ul><li>Python 是一个格式非常严格的程序设计语言</li><li>目前而言，大家记住每行代码前面都不要增加空格</li></ul></blockquote><ul><li>4&gt; <strong>python 2.x 默认不支持中文</strong> </li></ul><p>目前市场上有两个 Python 的版本并存着，分别是 <code>Python 2.x</code> 和 <code>Python 3.x</code></p><ul><li><strong>Python 2.x 默认不支持中文</strong>，具体原因，等到介绍 <strong>字符编码</strong> 时给大家讲解</li><li>Python 2.x 的解释器名称是 <strong>python</strong></li><li>Python 3.x 的解释器名称是 <strong>python3</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SyntaxError: Non-ASCII character <span class="string">&#x27;\xe4&#x27;</span> <span class="keyword">in</span> file 01-HelloPython.py on line <span class="number">3</span>, </span><br><span class="line">but no encoding declared; </span><br><span class="line">see http://python.org/dev/peps/pep-0263/ <span class="keyword">for</span> details</span><br><span class="line"></span><br><span class="line">语法错误： 在 01-HelloPython.py 中第 <span class="number">3</span> 行出现了非 ASCII 字符 <span class="string">&#x27;\xe4&#x27;</span>，但是没有声明文件编码</span><br><span class="line">请访问 http://python.org/dev/peps/pep-0263/ 了解详细信息</span><br></pre></td></tr></table></figure><blockquote><ul><li><code>ASCII</code> 字符只包含 <code>256</code> 个字符，不支持中文</li><li>有关字符编码的问题，后续会讲</li></ul></blockquote><h4 id="单词列表"><a href="#单词列表" class="headerlink" title="单词列表"></a>单词列表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">* error 错误</span><br><span class="line">* name 名字</span><br><span class="line">* defined 已经定义</span><br><span class="line">* syntax 语法</span><br><span class="line">* invalid 无效</span><br><span class="line">* Indentation 索引</span><br><span class="line">* unexpected 意外的，不期望的</span><br><span class="line">* character 字符</span><br><span class="line">* line 行</span><br><span class="line">* encoding 编码</span><br><span class="line">* declared 声明</span><br><span class="line">* details 细节，详细信息</span><br><span class="line">* ASCII 一种字符编码</span><br></pre></td></tr></table></figure><h2 id="02-Python-2-x-与-3​​-x-版本简介"><a href="#02-Python-2-x-与-3​​-x-版本简介" class="headerlink" title="02. Python 2.x 与 3​​.x 版本简介"></a>02. <code>Python 2.x</code> 与 <code>3​​.x</code> 版本简介</h2><p>目前市场上有两个 Python 的版本并存着，分别是 <code>Python 2.x</code> 和 <code>Python 3.x</code></p><blockquote><p>新的 Python 程序建议使用 <code>Python 3.0</code> 版本的语法</p></blockquote><ul><li>Python 2.x 是 <strong>过去的版本</strong><ul><li>解释器名称是 <strong>python</strong></li></ul></li><li>Python 3.x 是 <strong>现在和未来 主流的版本</strong><ul><li>解释器名称是 <strong>python3</strong></li><li>相对于 <code>Python</code> 的早期版本，这是一个 <strong>较大的升级</strong></li><li>为了不带入过多的累赘，<code>Python 3.0</code> 在设计的时候 <strong>没有考虑向下兼容</strong><ul><li>许多早期 <code>Python</code> 版本设计的程序都无法在 <code>Python 3.0</code> 上正常执行</li></ul></li><li>Python 3.0 发布于 <strong>2008 年</strong></li><li>到目前为止，Python 3.0 的稳定版本已经有很多年了<ul><li>Python 3.3 发布于 2012</li><li>Python 3.4 发布于 2014</li><li>Python 3.5 发布于 2015</li><li>Python 3.6 发布于 2016</li></ul></li></ul></li><li>为了照顾现有的程序，官方提供了一个过渡版本 —— <strong>Python 2.6</strong><ul><li>基本使用了 <code>Python 2.x</code> 的语法和库</li><li>同时考虑了向 <code>Python 3.0</code> 的迁移，<strong>允许使用部分</strong> <code>Python 3.0</code> 的语法与函数</li><li>2010 年中推出的 <code>Python 2.7</code> 被确定为 <strong>最后一个Python 2.x 版本</strong></li></ul></li></ul><blockquote><p>提示：如果开发时，无法立即使用 Python 3.0（还有极少的第三方库不支持 3.0 的语法），建议</p><ul><li>先使用 <code>Python 3.0</code> 版本进行开发</li><li>然后使用 <code>Python 2.6</code>、<code>Python 2.7</code> 来执行，并且做一些兼容性的处理</li></ul></blockquote><h2 id="03-执行-Python-程序的三种方式"><a href="#03-执行-Python-程序的三种方式" class="headerlink" title="03. 执行 Python 程序的三种方式"></a>03. 执行 Python 程序的三种方式</h2><h3 id="3-1-解释器-python-python3"><a href="#3-1-解释器-python-python3" class="headerlink" title="3.1. 解释器 python / python3"></a>3.1. 解释器 <code>python</code> / <code>python3</code></h3><h4 id="Python-的解释器"><a href="#Python-的解释器" class="headerlink" title="Python 的解释器"></a>Python 的解释器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 python 2.x 解释器</span></span><br><span class="line">$ python xxx.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 python 3.x 解释器</span></span><br><span class="line">$ python3 xxx.py</span><br></pre></td></tr></table></figure><h5 id="其他解释器（知道）"><a href="#其他解释器（知道）" class="headerlink" title="其他解释器（知道）"></a>其他解释器（知道）</h5><p><strong>Python 的解释器</strong> 如今有多个语言的实现，包括：</p><ul><li><code>CPython</code> —— 官方版本的 C 语言实现</li><li><code>Jython</code> —— 可以运行在 Java 平台</li><li><code>IronPython</code> —— 可以运行在 .NET 和 Mono 平台</li><li><code>PyPy</code> —— Python 实现的，支持 JIT 即时编译</li></ul><h3 id="3-2-交互式运行-Python-程序"><a href="#3-2-交互式运行-Python-程序" class="headerlink" title="3.2. 交互式运行 Python 程序"></a>3.2. 交互式运行 Python 程序</h3><ul><li>直接在终端中运行解释器，而不输入要执行的文件名</li><li>在 Python 的 <code>Shell</code> 中直接输入 <strong>Python 的代码</strong>，会立即看到程序执行结果</li></ul><h4 id="1-交互式运行-Python-的优缺点"><a href="#1-交互式运行-Python-的优缺点" class="headerlink" title="1) 交互式运行 Python 的优缺点"></a>1) 交互式运行 Python 的优缺点</h4><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><ul><li>适合于学习/验证 Python 语法或者局部代码</li></ul><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><ul><li>代码不能保存</li><li>不适合运行太大的程序</li></ul><h4 id="2-退出-官方的解释器"><a href="#2-退出-官方的解释器" class="headerlink" title="2) 退出 官方的解释器"></a>2) 退出 官方的解释器</h4><h5 id="1-gt-直接输入-exit"><a href="#1-gt-直接输入-exit" class="headerlink" title="1&gt; 直接输入 exit()"></a>1&gt; 直接输入 <code>exit()</code></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>exit()</span><br></pre></td></tr></table></figure><h5 id="2-gt-使用热键退出"><a href="#2-gt-使用热键退出" class="headerlink" title="2&gt; 使用热键退出"></a>2&gt; 使用热键退出</h5><p>在 python 解释器中，按热键 <code>ctrl + d</code> 可以退出解释器</p><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/20210302195513.jpg" alt=""></p><h4 id="3-IPython"><a href="#3-IPython" class="headerlink" title="3) IPython"></a>3) IPython</h4><ul><li>IPython 中 的 “I” 代表 <strong>交互 interactive</strong></li></ul><h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><ul><li>IPython 是一个 python 的 <strong>交互式 shell</strong>，比默认的 <code>python shell</code> 好用得多<ul><li>支持自动补全</li><li>自动缩进</li><li>支持 <code>bash shell</code> 命令</li><li>内置了许多很有用的功能和函数</li></ul></li><li>IPython 是基于 BSD 开源的</li></ul><h5 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h5><ul><li>Python 2.x 使用的解释器是 <strong>ipython</strong></li><li><p>Python 3.x 使用的解释器是 <strong>ipython3</strong></p></li><li><p>要退出解释器可以有以下两种方式：</p></li></ul><h5 id="1-gt-直接输入-exit-1"><a href="#1-gt-直接输入-exit-1" class="headerlink" title="1&gt; 直接输入 exit"></a>1&gt; 直接输入 <code>exit</code></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: exit</span><br></pre></td></tr></table></figure><h5 id="2-gt-使用热键退出-1"><a href="#2-gt-使用热键退出-1" class="headerlink" title="2&gt; 使用热键退出"></a>2&gt; 使用热键退出</h5><p>在 IPython 解释器中，按热键 <code>ctrl + d</code>，<code>IPython</code> 会询问是否退出解释器</p><h4 id="IPython-的安装"><a href="#IPython-的安装" class="headerlink" title="IPython 的安装"></a>IPython 的安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install ipython</span><br></pre></td></tr></table></figure><h2 id="3-3-Python-的-IDE-——-PyCharm"><a href="#3-3-Python-的-IDE-——-PyCharm" class="headerlink" title="3.3. Python 的 IDE —— PyCharm"></a>3.3. Python 的 IDE —— <code>PyCharm</code></h2><h3 id="1）-集成开发环境（IDE）"><a href="#1）-集成开发环境（IDE）" class="headerlink" title="1） 集成开发环境（IDE）"></a>1） 集成开发环境（IDE）</h3><p>集成开发环境（<code>IDE</code>，Integrated Development Environment）—— <strong>集成了开发软件需要的所有工具</strong>，一般包括以下工具：</p><ul><li>图形用户界面</li><li>代码编辑器（支持 <strong>代码补全</strong>／<strong>自动缩进</strong>）</li><li>编译器／解释器</li><li>调试器（<strong>断点</strong>／<strong>单步执行</strong>）</li><li>……</li></ul><h3 id="2）PyCharm-介绍"><a href="#2）PyCharm-介绍" class="headerlink" title="2）PyCharm 介绍"></a>2）PyCharm 介绍</h3><ul><li><code>PyCharm</code> 是 Python 的一款非常优秀的集成开发环境</li><li><code>PyCharm</code> 除了具有一般 IDE 所必备功能外，还可以在 <code>Windows</code>、<code>Linux</code>、<code>macOS</code> 下使用</li><li><code>PyCharm</code> 适合开发大型项目<ul><li>一个项目通常会包含 <strong>很多源文件</strong></li><li>每个 <strong>源文件</strong> 的代码行数是有限的，通常在几百行之内</li><li>每个 <strong>源文件</strong> 各司其职，共同完成复杂的业务功能</li></ul></li></ul><h3 id="3）PyCharm-快速体验"><a href="#3）PyCharm-快速体验" class="headerlink" title="3）PyCharm 快速体验"></a>3）PyCharm 快速体验</h3><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/20210302195520.png" alt=""></p><ul><li><strong>文件导航区域</strong> 能够 <strong>浏览</strong>／<strong>定位</strong>／<strong>打开</strong> 项目文件</li><li><strong>文件编辑区域</strong> 能够 <strong>编辑</strong> 当前打开的文件</li><li><strong>控制台区域</strong> 能够：<ul><li>输出程序执行内容</li><li>跟踪调试代码的执行</li></ul></li><li>右上角的 <strong>工具栏</strong> 能够 <strong>执行(SHIFT + F10)</strong> / <strong>调试(SHIFT + F9)</strong> 代码</li></ul><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/20210302195527.png" alt=""></p><ul><li>通过控制台上方的<strong>单步执行按钮(F8)</strong>，可以单步执行代码</li></ul><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/20210302195532.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第一个-Python-程序&quot;&gt;&lt;a href=&quot;#第一个-Python-程序&quot; class=&quot;headerlink&quot; title=&quot;第一个 Python 程序&quot;&gt;&lt;/a&gt;第一个 Python 程序&lt;/h1&gt;&lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; cla</summary>
      
    
    
    
    <category term="python" scheme="https://xxren8218.github.io/categories/python/"/>
    
    
    <category term="python基础" scheme="https://xxren8218.github.io/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>认识puthon</title>
    <link href="https://xxren8218.github.io/20210305/%E8%AE%A4%E8%AF%86puthon.html"/>
    <id>https://xxren8218.github.io/20210305/%E8%AE%A4%E8%AF%86puthon.html</id>
    <published>2021-03-05T05:45:12.000Z</published>
    <updated>2021-03-05T05:45:41.469Z</updated>
    
    <content type="html"><![CDATA[<p> 认识 Python</p><blockquote><p>人生苦短，我用 Python —— Life is short, you need Python</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/20210302195100.jpg" alt=""></p><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>Python 的起源</li><li>为什么要用 Python？</li><li>Python 的特点</li><li>Python 的优缺点</li></ul><h2 id="01-Python-的起源"><a href="#01-Python-的起源" class="headerlink" title="01. Python 的起源"></a>01. Python 的起源</h2><blockquote><p>Python 的创始人为吉多·范罗苏姆（Guido van Rossum）</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/20210302195127.jpg" alt=""></p><ol><li>1989 年的圣诞节期间，吉多·范罗苏姆为了在阿姆斯特丹打发时间，决心开发一个新的<strong>解释程序</strong>，作为 ABC 语言的一种继承（<strong>感觉下什么叫牛人</strong>）</li><li>ABC 是由吉多参加设计的一种教学语言，就吉多本人看来，ABC 这种语言非常优美和强大，是<strong>专门为非专业程序员设计的</strong>。但是 ABC 语言并没有成功，究其原因，吉多认为是<strong>非开放</strong>造成的。吉多决心在 Python 中避免这一错误，并获取了非常好的效果</li><li>之所以选中 Python（蟒蛇） 作为程序的名字，是因为他是 BBC 电视剧——蒙提·派森的飞行马戏团（Monty Python’s Flying Circus）的爱好者</li><li>1991 年，第一个 Python <strong>解释器</strong> 诞生，它是用 C 语言实现的，并能够调用 C 语言的库文件</li></ol><h3 id="1-1-解释器（科普）"><a href="#1-1-解释器（科普）" class="headerlink" title="1.1 解释器（科普）"></a>1.1 解释器（科普）</h3><p><strong>计算机不能直接理解任何除机器语言以外的语言</strong>，所以必须要把程序员所写的程序语言翻译成机器语言，计算机才能执行程序。<strong>将其他语言翻译成机器语言的工具，被称为编译器</strong></p><p>编译器翻译的方式有两种：一个是<strong>编译</strong>，另外一个是<strong>解释</strong>。两种方式之间的区别在于<strong>翻译时间点的不同</strong>。当编译器<strong>以解释方式运行的时候</strong>，也称之为<strong>解释器</strong></p><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/20210302195154.png" alt=""></p><ul><li><strong>编译型语言</strong>：程序在执行之前需要一个专门的编译过程，把程序编译成为机器语言的文件，运行时不需要重新翻译，直接使用编译的结果就行了。程序执行效率高，依赖编译器，跨平台性差些。如 C、C++</li><li><strong>解释型语言</strong>：解释型语言编写的程序不进行预先编译，以文本方式存储程序代码，会将代码一句一句直接运行。在发布程序时，看起来省了道编译工序，但是在运行程序的时候，必须先解释再运行</li></ul><h4 id="编译型语言和解释型语言对比"><a href="#编译型语言和解释型语言对比" class="headerlink" title="编译型语言和解释型语言对比"></a>编译型语言和解释型语言对比</h4><ul><li><strong>速度</strong> —— 编译型语言比解释型语言执行速度快</li><li><strong>跨平台性</strong> —— 解释型语言比编译型语言跨平台性好</li></ul><h3 id="1-2-Python-的设计目标"><a href="#1-2-Python-的设计目标" class="headerlink" title="1.2 Python 的设计目标"></a>1.2 Python 的设计目标</h3><p>1999 年，吉多·范罗苏姆向 DARPA 提交了一条名为 “Computer Programming for Everybody” 的资金申请，并在后来说明了他对 Python 的目标：</p><ul><li>一门<strong>简单直观的语言</strong>并与主要竞争者一样强大</li><li><strong>开源</strong>，以便任何人都可以为它做贡献</li><li>代码<strong>像纯英语那样容易理解</strong></li><li>适用于<strong>短期</strong>开发的日常任务</li></ul><p>这些想法中的基本都已经成为现实，Python 已经成为一门流行的编程语言</p><h3 id="1-3-Python-的设计哲学"><a href="#1-3-Python-的设计哲学" class="headerlink" title="1.3 Python 的设计哲学"></a>1.3 Python 的设计哲学</h3><ol><li>优雅</li><li>明确</li><li>简单</li></ol><!-- > 在 Python 解释器内运行 `import this` 可以获得完整的列表 --><ul><li>Python 开发者的哲学是：<strong>用一种方法，最好是只有一种方法来做一件事</strong></li><li>如果面临多种选择，Python 开发者一般会拒绝花俏的语法，而选择<strong>明确没有或者很少有歧义的语法</strong></li></ul><blockquote><p>在 Python 社区，吉多被称为“仁慈的独裁者”</p></blockquote><h2 id="02-为什么选择-Python？"><a href="#02-为什么选择-Python？" class="headerlink" title="02. 为什么选择 Python？"></a>02. 为什么选择 Python？</h2><ul><li>代码量少</li><li>……</li></ul><blockquote><p>同一样问题，用不同的语言解决，代码量差距还是很多的，一般情况下 <code>Python</code> 是 <code>Java</code> 的 <strong>1/5</strong>，所以说 <strong>人生苦短，我用 Python</strong></p></blockquote><h2 id="03-Python-特点"><a href="#03-Python-特点" class="headerlink" title="03. Python 特点"></a>03. Python 特点</h2><ul><li>Python 是<strong>完全面向对象的语言</strong><ul><li><strong>函数</strong>、<strong>模块</strong>、<strong>数字</strong>、<strong>字符串</strong>都是对象，<strong>在 Python 中一切皆对象</strong></li><li>完全支持继承、重载、多重继承</li><li>支持重载运算符，也支持泛型设计</li></ul></li><li>Python <strong>拥有一个强大的标准库</strong>，Python 语言的核心只包含 <strong>数字</strong>、<strong>字符串</strong>、<strong>列表</strong>、<strong>字典</strong>、<strong>文件</strong> 等常见类型和函数，而由 Python 标准库提供了 <strong>系统管理</strong>、<strong>网络通信</strong>、<strong>文本处理</strong>、<strong>数据库接口</strong>、<strong>图形系统</strong>、<strong>XML 处理</strong> 等额外的功能</li><li>Python 社区提供了<strong>大量的第三方模块</strong>，使用方式与标准库类似。它们的功能覆盖 <strong>科学计算</strong>、<strong>人工智能</strong>、<strong>机器学习</strong>、<strong>Web 开发</strong>、<strong>数据库接口</strong>、<strong>图形系统</strong> 多个领域</li></ul><h3 id="面向对象的思维方式"><a href="#面向对象的思维方式" class="headerlink" title="面向对象的思维方式"></a>面向对象的思维方式</h3><ul><li><strong>面向对象</strong> 是一种 <strong>思维方式</strong>，也是一门 <strong>程序设计技术</strong></li><li>要解决一个问题前，首先考虑 <strong>由谁</strong> 来做，怎么做事情是 <strong>谁</strong> 的职责，最后把事情做好就行！<ul><li><strong>对象</strong> 就是 <strong>谁</strong></li></ul></li><li>要解决复杂的问题，就可以找<strong>多个不同的对象</strong>，<strong>各司其职</strong>，共同实现，最终完成需求</li></ul><h2 id="04-Python-的优缺点"><a href="#04-Python-的优缺点" class="headerlink" title="04. Python 的优缺点"></a>04. Python 的优缺点</h2><h3 id="4-1-优点"><a href="#4-1-优点" class="headerlink" title="4.1 优点"></a>4.1 优点</h3><ul><li>简单、易学</li><li>免费、开源</li><li><strong>面向对象</strong></li><li>丰富的库</li><li>可扩展性<ul><li>如果需要一段关键代码运行得更快或者希望某些算法不公开，可以把这部分程序用 <code>C</code> 或 <code>C++</code> 编写，然后在 <code>Python</code> 程序中使用它们</li></ul></li><li>……</li></ul><h3 id="4-2-缺点"><a href="#4-2-缺点" class="headerlink" title="4.2 缺点"></a>4.2 缺点</h3><ul><li>运行速度</li><li>国内市场较小</li><li>中文资料匮乏</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; 认识 Python&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;人生苦短，我用 Python —— Life is short, you need Python&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/g</summary>
      
    
    
    
    <category term="python" scheme="https://xxren8218.github.io/categories/python/"/>
    
    
    <category term="python基础" scheme="https://xxren8218.github.io/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>vi-终端中的编辑器</title>
    <link href="https://xxren8218.github.io/20210305/vi-%E7%BB%88%E7%AB%AF%E4%B8%AD%E7%9A%84%E7%BC%96%E8%BE%91%E5%99%A8.html"/>
    <id>https://xxren8218.github.io/20210305/vi-%E7%BB%88%E7%AB%AF%E4%B8%AD%E7%9A%84%E7%BC%96%E8%BE%91%E5%99%A8.html</id>
    <published>2021-03-05T05:33:14.000Z</published>
    <updated>2021-03-05T05:38:24.231Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：vim的笔记。<span id="more"></span></p><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li><code>vi</code> 简介</li><li>打开和新建文件</li><li>三种工作模式</li><li>常用命令</li><li>分屏命令</li><li>常用命令速查图</li></ul><h2 id="01-vi-简介"><a href="#01-vi-简介" class="headerlink" title="01. vi 简介"></a>01. <code>vi</code> 简介</h2><h3 id="1-1-学习-vi-的目的"><a href="#1-1-学习-vi-的目的" class="headerlink" title="1.1 学习 vi 的目的"></a>1.1 学习 <code>vi</code> 的目的</h3><ul><li>在工作中，要对 <strong>服务器</strong> 上的文件进行 <strong>简单</strong> 的修改，可以使用 <code>ssh</code> 远程登录到服务器上，并且使用 <code>vi</code> 进行快速的编辑即可</li><li>常见需要修改的文件包括：<ul><li><strong>源程序</strong></li><li><strong>配置文件</strong>，例如 <code>ssh</code> 的配置文件 <code>~/.ssh/config</code></li></ul></li></ul><blockquote><ul><li>在没有图形界面的环境下，要编辑文件，<code>vi</code> 是最佳选择！</li><li>每一个要使用 Linux 的程序员，都应该或多或少的学习一些 <code>vi</code> 的常用命令</li></ul></blockquote><h3 id="1-2-vi-和-vim"><a href="#1-2-vi-和-vim" class="headerlink" title="1.2 vi 和 vim"></a>1.2 vi 和 vim</h3><ul><li>在很多 <code>Linux</code> 发行版中，直接把 <code>vi</code> 做成 <code>vim</code> 的软连接</li></ul><h4 id="vi"><a href="#vi" class="headerlink" title="vi"></a>vi</h4><ul><li><code>vi</code> 是 <code>Visual interface</code> 的简称，是 <code>Linux</code> 中 <strong>最经典</strong> 的文本编辑器</li><li><code>vi</code> 的核心设计思想 —— <strong>让程序员的手指始终保持在键盘的核心区域，就能完成所有的编辑操作</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/20210302200507.png" alt=""></p><ul><li><code>vi</code> 的特点：<ul><li><strong>没有图形界面</strong> 的 <strong>功能强大</strong> 的编辑器</li><li>只能是编辑 <strong>文本内容</strong>，不能对字体、段落进行排版</li><li><strong>不支持鼠标操作</strong></li><li><strong>没有菜单</strong></li><li><strong>只有命令</strong></li></ul></li><li><code>vi</code> 编辑器在 <strong>系统管理</strong>、<strong>服务器管理</strong> 编辑文件时，<strong>其功能永远不是图形界面的编辑器能比拟的</strong></li></ul><h4 id="vim"><a href="#vim" class="headerlink" title="vim"></a><code>vim</code></h4><p><strong>vim = vi improved</strong></p><ul><li><code>vim</code> 是从 <code>vi</code> 发展出来的一个文本编辑器，支持 <strong>代码补全</strong>、<strong>编译</strong> 及 <strong>错误跳转</strong> 等方便编程的功能特别丰富，在程序员中被广泛使用，被称为 <strong>编辑器之神</strong></li></ul><h4 id="查询软连接命令（知道）"><a href="#查询软连接命令（知道）" class="headerlink" title="查询软连接命令（知道）"></a>查询软连接命令（知道）</h4><ul><li>在很多 <code>Linux</code> 发行版中直接把 <code>vi</code> 做成 <code>vim</code> 的软连接</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查找 vi 的运行文件</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">which</span> vi</span><br><span class="line">$ ls -l /usr/bin/vi</span><br><span class="line">$ ls -l /etc/alternatives/vi</span><br><span class="line">$ ls -l /usr/bin/vim.basic</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找 vim 的运行文件</span></span><br><span class="line">$ <span class="built_in">which</span> vim</span><br><span class="line">$ ls -l /usr/bin/vim</span><br><span class="line">$ ls -l /etc/alternatives/vim</span><br><span class="line">$ ls -l /usr/bin/vim.basic </span><br></pre></td></tr></table></figure><h2 id="02-打开和新建文件"><a href="#02-打开和新建文件" class="headerlink" title="02. 打开和新建文件"></a>02. 打开和新建文件</h2><ul><li>在终端中输入 <code>vi</code> <strong>在后面跟上文件名</strong> 即可</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vi 文件名</span><br></pre></td></tr></table></figure><ul><li>如果文件已经存在，会直接打开该文件</li><li>如果文件不存在，会新建一个文件</li></ul><h3 id="2-1-打开文件并且定位行"><a href="#2-1-打开文件并且定位行" class="headerlink" title="2.1 打开文件并且定位行"></a>2.1 打开文件并且定位行</h3><ul><li>在日常工作中，有可能会遇到 <strong>打开一个文件，并定位到指定行</strong> 的情况</li><li><p>例如：在开发时，<strong>知道某一行代码有错误</strong>，可以 <strong>快速定位</strong> 到出错代码的位置</p></li><li><p>这个时候，可以使用以下命令打开文件</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vi 文件名 +行数</span><br></pre></td></tr></table></figure><blockquote><p>提示：如果只带上 <code>+</code> 而不指定行号，会直接定位到文件末尾</p></blockquote><h3 id="2-2-异常处理"><a href="#2-2-异常处理" class="headerlink" title="2.2 异常处理"></a>2.2 异常处理</h3><ul><li>如果 <code>vi</code> 异常退出，在磁盘上可能会保存有 <strong>交换文件</strong></li><li>下次再使用 <code>vi</code> 编辑该文件时，会看到以下屏幕信息，按下字母 <code>d</code> 可以 <strong>删除交换文件</strong> 即可</li></ul><blockquote><p>提示：按下键盘时，注意关闭输入法</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/20210302200513.png" alt=""></p><h2 id="03-三种工作模式"><a href="#03-三种工作模式" class="headerlink" title="03. 三种工作模式"></a>03. 三种工作模式</h2><ul><li><p><code>vi</code> 有三种基本工作模式：</p><ol><li><strong>命令模式</strong><ul><li><strong>打开文件首先进入命令模式</strong>，是使用 <code>vi</code> 的 <strong>入口</strong></li><li>通过 <strong>命令</strong> 对文件进行常规的编辑操作，例如：<strong>定位</strong>、<strong>翻页</strong>、<strong>复制</strong>、<strong>粘贴</strong>、<strong>删除</strong>……</li><li>在其他图形编辑器下，通过 <strong>快捷键</strong> 或者 <strong>鼠标</strong> 实现的操作，都在 <strong>命令模式</strong> 下实现</li></ul></li><li><strong>末行模式</strong> —— 执行 <strong>保存</strong>、<strong>退出</strong> 等操作 <ul><li>要退出 <code>vi</code> 返回到控制台，需要在末行模式下输入命令</li><li><strong>末行模式</strong> 是 <code>vi</code> 的 <strong>出口</strong></li></ul></li><li><strong>编辑模式</strong> —— 正常的编辑文字</li></ol></li></ul><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/20210302200518.png" alt=""></p><blockquote><p>提示：在 <code>Touch Bar</code> 的 Mac 电脑上 ，按 <code>ESC</code> 不方便，可以使用 <code>CTRL + [</code> 替代</p></blockquote><h3 id="末行模式命令"><a href="#末行模式命令" class="headerlink" title="末行模式命令"></a>末行模式命令</h3><div class="table-container"><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">英文</th><th>功能</th></tr></thead><tbody><tr><td style="text-align:center">w</td><td style="text-align:center">write</td><td>保存</td></tr><tr><td style="text-align:center">q</td><td style="text-align:center">quit</td><td>退出，如果没有保存，不允许退出</td></tr><tr><td style="text-align:center">q!</td><td style="text-align:center">quit</td><td>强行退出，不保存退出</td></tr><tr><td style="text-align:center">wq</td><td style="text-align:center">write &amp; quit</td><td>保存并退出</td></tr><tr><td style="text-align:center">x</td><td style="text-align:center"></td><td>保存并退出</td></tr></tbody></table></div><h2 id="04-常用命令"><a href="#04-常用命令" class="headerlink" title="04. 常用命令"></a>04. 常用命令</h2><h3 id="命令线路图"><a href="#命令线路图" class="headerlink" title="命令线路图"></a>命令线路图</h3><ol><li>重复次数<ul><li>在命令模式下，<strong>先输入一个数字</strong>，<strong>再跟上一个命令</strong>，可以让该命令 <strong>重复执行指定次数</strong> </li></ul></li><li>移动和选择（<strong>多练</strong>）<ul><li><code>vi</code> 之所以快，关键在于 <strong>能够快速定位到要编辑的代码行</strong></li><li><strong>移动命令</strong> 能够 和 <strong>编辑操作</strong> 命令 <strong>组合使用</strong></li></ul></li><li>编辑操作<ul><li><strong>删除</strong>、<strong>复制</strong>、<strong>粘贴</strong>、<strong>替换</strong>、<strong>缩排</strong></li></ul></li><li>撤销和重复</li><li>查找替换</li><li>编辑</li></ol><h4 id="学习提示"><a href="#学习提示" class="headerlink" title="学习提示"></a>学习提示</h4><ol><li><code>vi</code> 的命令较多，<strong>不要期望一下子全部记住</strong>，个别命令忘记了，只是会影响编辑速度而已</li><li>在使用 <code>vi</code> 命令时，注意 <strong>关闭中文输入法</strong></li></ol><h3 id="4-1-移动（基本）"><a href="#4-1-移动（基本）" class="headerlink" title="4.1 移动（基本）"></a>4.1 移动（基本）</h3><ul><li>要熟练使用 <code>vi</code>，首先应该学会怎么在 <strong>命令模式</strong> 下样快速移动光标</li><li><strong>编辑操作命令</strong>，能够和 <strong>移动命令</strong> 结合在一起使用</li></ul><h4 id="1-上、下、左、右"><a href="#1-上、下、左、右" class="headerlink" title="1) 上、下、左、右"></a>1) 上、下、左、右</h4><div class="table-container"><table><thead><tr><th style="text-align:center">命令</th><th>功能</th><th style="text-align:center">手指</th></tr></thead><tbody><tr><td style="text-align:center">h</td><td>向左</td><td style="text-align:center">食指</td></tr><tr><td style="text-align:center">j</td><td>向下</td><td style="text-align:center">食指</td></tr><tr><td style="text-align:center">k</td><td>向上</td><td style="text-align:center">中指</td></tr><tr><td style="text-align:center">l</td><td>向右</td><td style="text-align:center">无名指</td></tr></tbody></table></div><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/20210302200529.png" alt=""></p><h4 id="2-行内移动"><a href="#2-行内移动" class="headerlink" title="2) 行内移动"></a>2) 行内移动</h4><div class="table-container"><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">英文</th><th>功能</th></tr></thead><tbody><tr><td style="text-align:center">w</td><td style="text-align:center">word</td><td>向后移动一个单词</td></tr><tr><td style="text-align:center">b</td><td style="text-align:center">back</td><td>向前移动一个单词</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center"></td><td>行首</td></tr><tr><td style="text-align:center">^</td><td style="text-align:center"></td><td>行首，第一个不是空白字符的位置</td></tr><tr><td style="text-align:center">$</td><td style="text-align:center"></td><td>行尾</td></tr></tbody></table></div><h4 id="3-行数移动"><a href="#3-行数移动" class="headerlink" title="3) 行数移动"></a>3) 行数移动</h4><div class="table-container"><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">英文</th><th>功能</th></tr></thead><tbody><tr><td style="text-align:center">gg</td><td style="text-align:center">go</td><td>文件顶部</td></tr><tr><td style="text-align:center">G</td><td style="text-align:center">go</td><td>文件末尾</td></tr><tr><td style="text-align:center">数字gg</td><td style="text-align:center">go</td><td>移动到 数字 对应行数</td></tr><tr><td style="text-align:center">数字G</td><td style="text-align:center">go</td><td>移动到 数字 对应行数</td></tr><tr><td style="text-align:center">:数字</td><td style="text-align:center"></td><td>移动到 数字 对应行数</td></tr></tbody></table></div><h4 id="4-屏幕移动"><a href="#4-屏幕移动" class="headerlink" title="4) 屏幕移动"></a>4) 屏幕移动</h4><div class="table-container"><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">英文</th><th>功能</th></tr></thead><tbody><tr><td style="text-align:center">Ctrl + b</td><td style="text-align:center">back</td><td>向上翻页</td></tr><tr><td style="text-align:center">Ctrl + f</td><td style="text-align:center">forward</td><td>向下翻页</td></tr><tr><td style="text-align:center">H</td><td style="text-align:center">Head</td><td>屏幕顶部</td></tr><tr><td style="text-align:center">M</td><td style="text-align:center">Middle</td><td>屏幕中间</td></tr><tr><td style="text-align:center">L</td><td style="text-align:center">Low</td><td>屏幕底部</td></tr></tbody></table></div><h3 id="4-2-移动（程序）"><a href="#4-2-移动（程序）" class="headerlink" title="4.2 移动（程序）"></a>4.2 移动（程序）</h3><h4 id="1-段落移动"><a href="#1-段落移动" class="headerlink" title="1) 段落移动"></a>1) 段落移动</h4><ul><li><code>vi</code> 中使用 空行 来区分段落</li><li>在程序开发时，通常 <strong>一段功能相关的代码会写在一起</strong> —— 之间没有空行</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">命令</th><th>功能</th></tr></thead><tbody><tr><td style="text-align:center">{</td><td>上一段</td></tr><tr><td style="text-align:center">}</td><td>下一段</td></tr></tbody></table></div><h4 id="2-括号切换"><a href="#2-括号切换" class="headerlink" title="2) 括号切换"></a>2) 括号切换</h4><ul><li>在程序世界中，<code>()</code>、<code>[]</code>、<code>&#123;&#125;</code> 使用频率很高，而且 <strong>都是成对出现的</strong></li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">命令</th><th>功能</th></tr></thead><tbody><tr><td style="text-align:center">%</td><td>括号匹配及切换</td></tr></tbody></table></div><h4 id="3-标记"><a href="#3-标记" class="headerlink" title="3) 标记"></a>3) 标记</h4><ul><li>在开发时，某一块代码可能<strong>需要稍后处理</strong>，例如：编辑、查看</li><li>此时先使用 <code>m</code> 增加一个标记，这样可以 <strong>在需要时快速地跳转回来</strong> 或者 <strong>执行其他编辑操作</strong></li><li><strong>标记名称</strong> 可以是 <code>a~z</code> 或者 <code>A~Z</code> 之间的任意 <strong>一个</strong> 字母</li><li>添加了标记的 <strong>行如果被删除</strong>，<strong>标记同时被删除</strong></li><li>如果 <strong>在其他行添加了相同名称的标记</strong>，<strong>之前添加的标记也会被替换掉</strong></li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">英文</th><th>功能</th></tr></thead><tbody><tr><td style="text-align:center">mx</td><td style="text-align:center">mark</td><td>添加标记 x，x 是 a~z 或者 A~Z 之间的任意一个字母</td></tr><tr><td style="text-align:center">‘x</td><td style="text-align:center"></td><td>直接定位到标记 x 所在位置</td></tr></tbody></table></div><h3 id="4-3-选中文本（可视模式）"><a href="#4-3-选中文本（可视模式）" class="headerlink" title="4.3 选中文本（可视模式）"></a>4.3 选中文本（可视模式）</h3><ul><li>学习 <code>复制</code> 命令前，应该先学会 <strong>怎么样选中 要复制的代码</strong></li><li>在 <code>vi</code> 中要选择文本，需要先使用 <code>Visual</code> 命令切换到 <strong>可视模式</strong></li><li><code>vi</code> 中提供了 <strong>三种</strong> 可视模式，可以方便程序员选择 <strong>选中文本的方式</strong></li><li>按 <code>ESC</code> 可以放弃选中，返回到 <strong>命令模式</strong></li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">命令</th><th>模式</th><th>功能</th></tr></thead><tbody><tr><td style="text-align:center">v</td><td>可视模式</td><td>从光标位置开始按照正常模式选择文本</td></tr><tr><td style="text-align:center">V</td><td>可视行模式</td><td>选中光标经过的完整行</td></tr><tr><td style="text-align:center">Ctrl + v</td><td>可视块模式</td><td>垂直方向选中文本</td></tr></tbody></table></div><ul><li><strong>可视模式</strong>下，可以和 <strong>移动命令</strong> 连用，例如：<code>ggVG</code> 能够选中所有内容</li></ul><h3 id="4-4-撤销和恢复撤销"><a href="#4-4-撤销和恢复撤销" class="headerlink" title="4.4 撤销和恢复撤销"></a>4.4 撤销和恢复撤销</h3><ul><li>在学习编辑命令之前，先要知道怎样撤销之前一次 <strong>错误的</strong> 编辑动作！</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">英文</th><th>功能</th></tr></thead><tbody><tr><td style="text-align:center">u</td><td style="text-align:center">undo</td><td>撤销上次命令</td></tr><tr><td style="text-align:center">CTRL + r</td><td style="text-align:center">redo</td><td>恢复撤销的命令</td></tr></tbody></table></div><h3 id="4-5-删除文本"><a href="#4-5-删除文本" class="headerlink" title="4.5 删除文本"></a>4.5 删除文本</h3><div class="table-container"><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">英文</th><th>功能</th></tr></thead><tbody><tr><td style="text-align:center">x</td><td style="text-align:center">cut</td><td>删除光标所在字符，或者选中文字</td></tr><tr><td style="text-align:center">d(移动命令)</td><td style="text-align:center">delete</td><td>删除移动命令对应的内容</td></tr><tr><td style="text-align:center">dd</td><td style="text-align:center">delete</td><td>删除光标所在行，可以 ndd 复制多行</td></tr><tr><td style="text-align:center">D</td><td style="text-align:center">delete</td><td>删除至行尾</td></tr></tbody></table></div><blockquote><p>提示：如果使用 <strong>可视模式</strong> 已经选中了一段文本，那么无论使用 <code>d</code> 还是 <code>x</code>，都可以删除选中文本</p></blockquote><ul><li>删除命令可以和 <strong>移动命令</strong> 连用，以下是常见的组合命令：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">* dw        <span class="comment"># 从光标位置删除到单词末尾</span></span><br><span class="line">* d0        <span class="comment"># 从光标位置删除到一行的起始位置</span></span><br><span class="line">* d&#125;        <span class="comment"># 从光标位置删除到段落结尾</span></span><br><span class="line">* ndd       <span class="comment"># 从光标位置向下连续删除 n 行</span></span><br><span class="line">* d代码行G   <span class="comment"># 从光标所在行 删除到 指定代码行 之间的所有代码</span></span><br><span class="line">* d<span class="string">&#x27;a       # 从光标所在行 删除到 标记a 之间的所有代码</span></span><br></pre></td></tr></table></figure><h3 id="4-6-复制、粘贴"><a href="#4-6-复制、粘贴" class="headerlink" title="4.6 复制、粘贴"></a>4.6 复制、粘贴</h3><ul><li><code>vi</code> 中提供有一个 <strong>被复制文本的缓冲区</strong><ul><li><strong>复制</strong> 命令会将选中的文字保存在缓冲区 </li><li><strong>删除</strong> 命令删除的文字会被保存在缓冲区</li><li>在需要的位置，使用 <strong>粘贴</strong> 命令可以将缓冲区的文字插入到光标所在位置</li></ul></li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">英文</th><th>功能</th></tr></thead><tbody><tr><td style="text-align:center">y(移动命令)</td><td style="text-align:center">copy</td><td>复制</td></tr><tr><td style="text-align:center">yy</td><td style="text-align:center">copy</td><td>复制一行，可以 nyy 复制多行</td></tr><tr><td style="text-align:center">p</td><td style="text-align:center">paste</td><td>粘贴</td></tr></tbody></table></div><p><strong>提示</strong></p><ul><li>命令 <code>d</code>、<code>x</code> 类似于图形界面的 <strong>剪切操作</strong> —— <code>CTRL + X</code></li><li>命令 <code>y</code> 类似于图形界面的 <strong>复制操作</strong> —— <code>CTRL + C</code></li><li>命令 <code>p</code> 类似于图形界面的 <strong>粘贴操作</strong> —— <code>CTRL + V</code></li><li><code>vi</code> 中的 <strong>文本缓冲区同样只有一个</strong>，如果后续做过 <strong>复制、剪切</strong> 操作，之前缓冲区中的内容会被替换</li></ul><p><strong>注意</strong></p><ul><li><code>vi</code> 中的 <strong>文本缓冲区</strong> 和系统的 <strong>剪贴板</strong> 不是同一个</li><li>所以在其他软件中使用 <code>CTRL + C</code> 复制的内容，不能在 <code>vi</code> 中通过 <code>P</code> 命令粘贴</li><li>可以在 <strong>编辑模式</strong> 下使用 <strong>鼠标右键粘贴</strong></li></ul><h3 id="4-7-替换"><a href="#4-7-替换" class="headerlink" title="4.7 替换"></a>4.7 替换</h3><div class="table-container"><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">英文</th><th>功能</th><th>工作模式</th></tr></thead><tbody><tr><td style="text-align:center">r</td><td style="text-align:center">replace</td><td>替换当前字符</td><td>命令模式</td></tr><tr><td style="text-align:center">R</td><td style="text-align:center">replace</td><td>替换当前行光标后的字符</td><td>替换模式</td></tr></tbody></table></div><ul><li><code>R</code> 命令可以进入 <strong>替换模式</strong>，替换完成后，按下 <code>ESC</code> 可以回到 <strong>命令模式</strong></li><li><strong>替换命令</strong> 的作用就是不用进入 <strong>编辑模式</strong>，对文件进行 <strong>轻量级的修改</strong></li></ul><h3 id="4-8-缩排和重复执行"><a href="#4-8-缩排和重复执行" class="headerlink" title="4.8 缩排和重复执行"></a>4.8 缩排和重复执行</h3><div class="table-container"><table><thead><tr><th style="text-align:center">命令</th><th>功能</th></tr></thead><tbody><tr><td style="text-align:center">&gt;&gt;</td><td>向右增加缩进</td></tr><tr><td style="text-align:center">&lt;&lt;</td><td>向左减少缩进</td></tr><tr><td style="text-align:center">.</td><td>重复上次命令</td></tr></tbody></table></div><ul><li><strong>缩排命令</strong> 在开发程序时，<strong>统一增加代码的缩进</strong> 比较有用！<ul><li>一次性 <strong>在选中代码前增加 4 个空格</strong>，就叫做 <strong>增加缩进</strong></li><li>一次性 <strong>在选中代码前删除 4 个空格</strong>，就叫做 <strong>减少缩进</strong></li></ul></li><li>在 <strong>可视模式</strong> 下，缩排命令只需要使用 <strong>一个</strong> <code>&gt;</code> 或者 <code>&lt;</code> </li></ul><blockquote><p>在程序中，<strong>缩进</strong> 通常用来表示代码的归属关系</p><ul><li>前面空格越少，代码的级别越高</li><li>前面空格越多，代码的级别越低</li></ul></blockquote><h3 id="4-9-查找"><a href="#4-9-查找" class="headerlink" title="4.9 查找"></a>4.9 查找</h3><h4 id="常规查找"><a href="#常规查找" class="headerlink" title="常规查找"></a>常规查找</h4><div class="table-container"><table><thead><tr><th style="text-align:center">命令</th><th>功能</th></tr></thead><tbody><tr><td style="text-align:center">/str</td><td>查找 str</td></tr></tbody></table></div><ul><li>查找到指定内容之后，使用 <code>Next</code> 查找下一个出现的位置：<ul><li><code>n</code>: 查找下一个</li><li><code>N</code>: 查找上一个</li></ul></li><li>如果不想看到高亮显示，可以随便查找一个文件中不存在的内容即可</li></ul><h4 id="单词快速匹配"><a href="#单词快速匹配" class="headerlink" title="单词快速匹配"></a>单词快速匹配</h4><div class="table-container"><table><thead><tr><th style="text-align:center">命令</th><th>功能</th></tr></thead><tbody><tr><td style="text-align:center">*</td><td>向后查找当前光标所在单词</td></tr><tr><td style="text-align:center">#</td><td>向前查找当前光标所在单词</td></tr></tbody></table></div><ul><li>在开发中，通过单词快速匹配，可以快速看到这个单词在其他什么位置使用过</li></ul><h3 id="4-10-查找并替换"><a href="#4-10-查找并替换" class="headerlink" title="4.10 查找并替换"></a>4.10 查找并替换</h3><ul><li>在 <code>vi</code> 中查找和替换命令需要在 <strong>末行模式</strong> 下执行</li><li>记忆命令格式：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:%s&#x2F;&#x2F;&#x2F;g</span><br></pre></td></tr></table></figure><h4 id="1-全局替换"><a href="#1-全局替换" class="headerlink" title="1) 全局替换"></a>1) 全局替换</h4><ul><li><strong>一次性</strong>替换文件中的 <strong>所有出现的旧文本</strong></li><li>命令格式如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:%s&#x2F;旧文本&#x2F;新文本&#x2F;g</span><br></pre></td></tr></table></figure><h4 id="2-可视区域替换"><a href="#2-可视区域替换" class="headerlink" title="2) 可视区域替换"></a>2) 可视区域替换</h4><ul><li><strong>先选中</strong> 要替换文字的 <strong>范围</strong></li><li>命令格式如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:s&#x2F;旧文本&#x2F;新文本&#x2F;g</span><br></pre></td></tr></table></figure><h4 id="3-确认替换"><a href="#3-确认替换" class="headerlink" title="3) 确认替换"></a>3) 确认替换</h4><ul><li>如果把末尾的 <code>g</code> 改成 <code>gc</code> 在替换的时候，会有提示！<strong>推荐使用！</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:%s&#x2F;旧文本&#x2F;新文本&#x2F;gc</span><br></pre></td></tr></table></figure><ol><li><code>y</code> - <code>yes</code> 替换</li><li><code>n</code> - <code>no</code> 不替换</li><li><code>a</code> - <code>all</code> 替换所有</li><li><code>q</code> - <code>quit</code> 退出替换</li><li><code>l</code> - <code>last</code> 最后一个，并把光标移动到行首</li><li><code>^E</code> 向下滚屏</li><li><code>^Y</code> 向上滚屏</li></ol><h3 id="4-11-插入命令"><a href="#4-11-插入命令" class="headerlink" title="4.11 插入命令"></a>4.11 插入命令</h3><ul><li>在 <code>vi</code> 中除了常用的 <code>i</code> 进入 <strong>编辑模式</strong> 外，还提供了以下命令同样可以进入编辑模式：</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">英文</th><th>功能</th><th style="text-align:center">常用</th></tr></thead><tbody><tr><td style="text-align:center">i</td><td style="text-align:center">insert</td><td>在当前字符前插入文本</td><td style="text-align:center">常用</td></tr><tr><td style="text-align:center">I</td><td style="text-align:center">insert</td><td>在行首插入文本</td><td style="text-align:center">较常用</td></tr><tr><td style="text-align:center">a</td><td style="text-align:center">append</td><td>在当前字符后添加文本</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">A</td><td style="text-align:center">append</td><td>在行末添加文本</td><td style="text-align:center">较常用</td></tr><tr><td style="text-align:center">o</td><td style="text-align:center"></td><td>在当前行后面插入一空行</td><td style="text-align:center">常用</td></tr><tr><td style="text-align:center">O</td><td style="text-align:center"></td><td>在当前行前面插入一空行</td><td style="text-align:center">常用</td></tr></tbody></table></div><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/20210302200524.png" alt=""></p><h4 id="演练-1-——-编辑命令和数字连用"><a href="#演练-1-——-编辑命令和数字连用" class="headerlink" title="演练 1 —— 编辑命令和数字连用"></a>演练 1 —— 编辑命令和数字连用</h4><ul><li>在开发中，可能会遇到连续输入 <code>N</code> 个同样的字符</li></ul><blockquote><p>在 <code>Python</code> 中有简单的方法，但是其他语言中通常需要自己输入</p></blockquote><ul><li>例如：<code>**********</code> 连续 10 个星号</li></ul><p>要实现这个效果可以在 <strong>命令模式</strong> 下</p><ol><li>输入 <code>10</code>，表示要重复 10 次</li><li>输入 <code>i</code> 进入 <strong>编辑模式</strong></li><li>输入 <code>*</code> 也就是重复的文字</li><li>按下 <code>ESC</code> 返回到 <strong>命令模式</strong>，返回之后 <code>vi</code> 就会把第 <code>2、3</code> 两步的操作重复 <code>10</code> 次</li></ol><blockquote><p>提示：正常开发时，在 <strong>进入编辑模式之前，不要按数字</strong></p></blockquote><h4 id="演练-2-——-利用-可视块-给多行代码增加注释"><a href="#演练-2-——-利用-可视块-给多行代码增加注释" class="headerlink" title="演练 2 —— 利用 可视块 给多行代码增加注释"></a>演练 2 —— 利用 可视块 给多行代码增加注释</h4><ul><li>在开发中，可能会遇到一次性给多行代码 <strong>增加注释</strong> 的情况</li></ul><blockquote><p>在 <code>Python</code> 中，要给代码增加注释，可以在代码前增加一个 <code>#</code></p></blockquote><p>要实现这个效果可以在 <strong>命令模式</strong> 下</p><ol><li>移动到要添加注释的 <strong>第 1 行代码</strong>，按 <code>^</code> 来到行首</li><li>按 <code>CTRL + v</code> 进入 <strong>可视块</strong> 模式</li><li>使用 <code>j</code> 向下连续选中要添加的代码行</li><li>输入 <code>I</code> 进入 <strong>编辑模式</strong>，并在 <strong>行首插入</strong>，注意：一定要使用 <strong>I</strong></li><li>输入 <code>#</code> 也就是注释符号</li><li>按下 <code>ESC</code> 返回到 <strong>命令模式</strong>，返回之后 <code>vi</code> 会在之前选中的每一行代码 <strong>前</strong> 插入 <code>#</code></li></ol><h2 id="05-分屏命令"><a href="#05-分屏命令" class="headerlink" title="05. 分屏命令"></a>05. 分屏命令</h2><ul><li>属于 <code>vi</code> 的高级命令 —— 可以 <strong>同时编辑和查看多个文件</strong></li></ul><h3 id="5-1-末行命令扩展"><a href="#5-1-末行命令扩展" class="headerlink" title="5.1 末行命令扩展"></a>5.1 末行命令扩展</h3><p><strong>末行命令</strong> 主要是针对文件进行操作的：<strong>保存</strong>、<strong>退出</strong>、<strong>保存&amp;退出</strong>、<strong>搜索&amp;替换</strong>、<strong>另存</strong>、<strong>新建</strong>、<strong>浏览文件</strong></p><div class="table-container"><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">英文</th><th>功能</th></tr></thead><tbody><tr><td style="text-align:center">:e .</td><td style="text-align:center">edit</td><td>会打开内置的文件浏览器，浏览要当前目录下的文件</td></tr><tr><td style="text-align:center">:n 文件名</td><td style="text-align:center">new</td><td>新建文件</td></tr><tr><td style="text-align:center">:w 文件名</td><td style="text-align:center">write</td><td>另存为，但是仍然编辑当前文件，并不会切换文件</td></tr></tbody></table></div><blockquote><p>提示：切换文件之前，必须保证当前这个文件已经被保存！</p></blockquote><ul><li>已经学习过的 <strong>末行命令</strong>：</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">英文</th><th>功能</th></tr></thead><tbody><tr><td style="text-align:center">:w</td><td style="text-align:center">write</td><td>保存</td></tr><tr><td style="text-align:center">:q</td><td style="text-align:center">quit</td><td>退出，如果没有保存，不允许退出</td></tr><tr><td style="text-align:center">:q!</td><td style="text-align:center">quit</td><td>强行退出，不保存退出</td></tr><tr><td style="text-align:center">:wq</td><td style="text-align:center">write &amp; quit</td><td>保存并退出</td></tr><tr><td style="text-align:center">:x</td><td style="text-align:center"></td><td>保存并退出</td></tr><tr><td style="text-align:center">:%s///gc</td><td style="text-align:center"></td><td>确认搜索并替换</td></tr></tbody></table></div><blockquote><p>在实际开发中，可以使用 <code>w</code> 命令 <strong>阶段性的备份代码</strong></p></blockquote><h3 id="5-2-分屏命令"><a href="#5-2-分屏命令" class="headerlink" title="5.2 分屏命令"></a>5.2 分屏命令</h3><ul><li>使用 <strong>分屏命令</strong>，可以 <strong>同时编辑和查看多个文件</strong></li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">英文</th><th>功能</th></tr></thead><tbody><tr><td style="text-align:center">:sp [文件名]</td><td style="text-align:center">split</td><td>横向增加分屏</td></tr><tr><td style="text-align:center">:vsp [文件名]</td><td style="text-align:center">vertical split</td><td>纵向增加分屏</td></tr></tbody></table></div><h4 id="1-切换分屏窗口"><a href="#1-切换分屏窗口" class="headerlink" title="1) 切换分屏窗口"></a>1) 切换分屏窗口</h4><blockquote><p>分屏窗口都是基于 <code>CTRL + W</code> 这个快捷键的，<code>w</code> 对应的英文单词是 <code>window</code></p></blockquote><div class="table-container"><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">英文</th><th>功能</th></tr></thead><tbody><tr><td style="text-align:center">w</td><td style="text-align:center">window</td><td>切换到下一个窗口</td></tr><tr><td style="text-align:center">r</td><td style="text-align:center">reverse</td><td>互换窗口</td></tr><tr><td style="text-align:center">c</td><td style="text-align:center">close</td><td>关闭当前窗口，但是不能关闭最后一个窗口</td></tr><tr><td style="text-align:center">q</td><td style="text-align:center">quit</td><td>退出当前窗口，如果是最后一个窗口，则关闭 vi</td></tr><tr><td style="text-align:center">o</td><td style="text-align:center">other</td><td>关闭其他窗口</td></tr></tbody></table></div><h4 id="2-调整窗口大小"><a href="#2-调整窗口大小" class="headerlink" title="2) 调整窗口大小"></a>2) 调整窗口大小</h4><blockquote><p>分屏窗口都是基于 <code>CTRL + W</code> 这个快捷键的，<code>w</code> 对应的英文单词是 <code>window</code></p></blockquote><div class="table-container"><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">英文</th><th>功能</th></tr></thead><tbody><tr><td style="text-align:center">+</td><td style="text-align:center"></td><td>增加窗口高度</td></tr><tr><td style="text-align:center">-</td><td style="text-align:center"></td><td>减少窗口高度</td></tr><tr><td style="text-align:center">&gt;</td><td style="text-align:center"></td><td>增加窗口宽度</td></tr><tr><td style="text-align:center">&lt;</td><td style="text-align:center"></td><td>减少窗口宽度</td></tr><tr><td style="text-align:center">=</td><td style="text-align:center"></td><td>等分窗口大小</td></tr></tbody></table></div><blockquote><p>调整窗口宽高的命令可以和数字连用，例如：<code>5 CTRL + W +</code> 连续 5 次增加高度</p></blockquote><h2 id="06-常用命令速查图"><a href="#06-常用命令速查图" class="headerlink" title="06. 常用命令速查图"></a>06. 常用命令速查图</h2><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/20210302200535.png" alt=""></p><h3 id="vimrc"><a href="#vimrc" class="headerlink" title="vimrc"></a>vimrc</h3><ul><li><code>vimrc</code> 是 <code>vim</code> 的配置文件，可以设置 vim 的配置，包括：<strong>热键</strong>、<strong>配色</strong>、<strong>语法高亮</strong>、<strong>插件</strong> 等</li><li><code>Linux</code> 中 <code>vimrc</code> 有两个位置，<strong>家目录下的配置文件优先级更高</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/etc/vim/vimrc</span><br><span class="line">~/.vimrc</span><br></pre></td></tr></table></figure><ul><li>常用的插件有：<ul><li>代码补全</li><li>代码折叠</li><li>搜索</li><li>Git 集成</li><li>……</li></ul></li><li>网上有很多高手已经配置好的针对 <code>python</code> 开发的 <code>vimrc</code> 文件，可以下载过来直接使用，或者等大家多 <code>Linux</code> 比较熟悉后，再行学习！</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：vim的笔记。</summary>
    
    
    
    <category term="Linux" scheme="https://xxren8218.github.io/categories/Linux/"/>
    
    
    <category term="vim" scheme="https://xxren8218.github.io/tags/vim/"/>
    
  </entry>
  
</feed>
