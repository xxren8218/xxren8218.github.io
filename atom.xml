<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>X.X.Ren</title>
  
  <subtitle>个人博客</subtitle>
  <link href="https://xxren8218.github.io/atom.xml" rel="self"/>
  
  <link href="https://xxren8218.github.io/"/>
  <updated>2021-07-16T14:27:16.747Z</updated>
  <id>https://xxren8218.github.io/</id>
  
  <author>
    <name>任晓雄</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>07-求组和总和三</title>
    <link href="https://xxren8218.github.io/20210716/07-%E6%B1%82%E7%BB%84%E5%92%8C%E6%80%BB%E5%92%8C%E4%B8%89.html"/>
    <id>https://xxren8218.github.io/20210716/07-%E6%B1%82%E7%BB%84%E5%92%8C%E6%80%BB%E5%92%8C%E4%B8%89.html</id>
    <published>2021-07-16T14:26:03.000Z</published>
    <updated>2021-07-16T14:27:16.747Z</updated>
    
    <content type="html"><![CDATA[<h2 id="求组合总和三"><a href="#求组合总和三" class="headerlink" title="求组合总和三"></a>求组合总和三</h2><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/20210716222634.PNG" alt=""></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>这道题目和【组合总和】如下区别：</p><ol><li>本题candidates 中的每个数字在每个组合中只能使用一次。</li><li>本题数组candidates的元素是有重复的，而【组合总和】是无重复元素的数组candidates</li></ol><p>最后本题和【组合总和】要求一样，解集不能包含重复的组合。</p><p><strong>「本题的难点在于区别2中：集合（数组candidates）有重复元素，但还不能有重复的组合」</strong>。</p><p>一些同学可能想了：我把所有组合求出来，再用set或者map去重，这么做很容易超时！</p><p>所以要在搜索的过程中就去掉重复组合。</p><p>很多同学在去重的问题上想不明白，其实很多题解也没有讲清楚，反正代码是能过的，感觉是那么回事，稀里糊涂的先把题目过了。</p><p>这个去重为什么很难理解呢，<strong>「所谓去重，其实就是使用过的元素不能重复选取。」</strong>这么一说好像很简单！</p><p>都知道组合问题可以抽象为树形结构，那么“使用过”在这个树形结构上是有两个维度的，一个维度是同一树枝上使用过，一个维度是同一树层上使用过。<strong>「没有理解这两个层面上的“使用过” 是造成大家没有彻底理解去重的根本原因。」</strong></p><p>那么问题来了，我们是要同一树层上使用过，还是同一树枝上使用过呢？</p><p>回看一下题目，元素在同一个组合内是可以重复的，怎么重复都没事，但两个组合不能相同。</p><p><strong>「所以我们要去重的是同一树层上的“使用过”，同一树枝上的都是一个组合里的元素，不用去重」</strong>。</p><p>为了理解去重我们来举一个例子，candidates = [1, 1, 2], target = 3，（方便起见candidates已经排序了）</p><p>选择过程树形结构如图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/20210716222650.png" alt=""></p><p>可以看到图中，每个节点相对于 【组合总和】我多加了used数组，这个used数组下面会重点介绍。</p><h3 id="回溯三部曲"><a href="#回溯三部曲" class="headerlink" title="回溯三部曲"></a>回溯三部曲</h3><ul><li><strong>「递归函数参数」</strong></li></ul><p>与【组合总和】套路相同，此题还需要加一个bool型数组used，用来记录同一树枝上的元素是否使用过。</p><p>这个集合去重的重任就是used来完成的。</p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = []                 <span class="comment"># 存放组合集合</span></span><br><span class="line">path = []                   <span class="comment"># 符合条件的组合</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">backtracking</span>(<span class="params">candidates, target, Sum, startIndex, used</span>):</span></span><br></pre></td></tr></table></figure><ul><li><strong>「递归终止条件」</strong></li></ul><p>与【组合总和】套路相同，终止条件为 <code>sum &gt; target</code> 和 <code>sum == target</code>。</p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> Sum &gt; target:     <span class="comment"># 这个条件其实可以省略 </span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> Sum == target: </span><br><span class="line">    result.append(path)</span><br><span class="line">    <span class="keyword">return</span></span><br></pre></td></tr></table></figure><p><code>Sum &gt; target</code> 这个条件其实可以省略，因为和在递归单层遍历的时候，会有剪枝的操作，下面会介绍到。</p><ul><li><strong>「单层搜索的逻辑」</strong></li></ul><p>这里与【组合总和】最大的不同就是要去重了。</p><p>前面我们提到：要去重的是“同一树层上的使用过”，如何判断同一树层上元素（相同的元素）是否使用过了呢。</p><p><strong>「如果<code>candidates[i] == candidates[i - 1]</code> 并且 <code>used[i - 1] == False</code>，就说明：前一个树枝，使用了candidates[i - 1]，也就是说同一树层使用过candidates[i - 1]」</strong>。</p><p>此时for循环里就应该做continue的操作。</p><p>这块比较抽象，如图：</p><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/20210716222705.png" alt=""></p><p>我在图中将used的变化用橘黄色标注上，可以看出在candidates[i] == candidates[i - 1]相同的情况下：</p><ul><li>used[i - 1] == True，说明同一树支candidates[i - 1]使用过</li><li>used[i - 1] == False，说明同一树层candidates[i - 1]使用过</li></ul><p><strong>「这块去重的逻辑很抽象，网上搜的题解基本没有能讲清楚的，如果大家之前思考过这个问题或者刷过这道题目，看到这里一定会感觉通透了很多！」</strong></p><p>那么单层搜索的逻辑代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(startIndex, <span class="built_in">len</span>(candidates)):</span><br><span class="line">    <span class="keyword">if</span> Sum + candidates[i] &lt;= target:</span><br><span class="line">    <span class="comment"># used[i - 1] == True，说明同一树支candidates[i - 1]使用过</span></span><br><span class="line">    <span class="comment"># used[i - 1] == False，说明同一树层candidates[i - 1]使用过</span></span><br><span class="line">    <span class="comment"># 要对同一树层使用过的元素进行跳过</span></span><br><span class="line">    <span class="keyword">if</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> candidates[i] == candidates[i - <span class="number">1</span>] <span class="keyword">and</span> used[i - <span class="number">1</span>] == <span class="literal">False</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">        Sum += candidates[i]</span><br><span class="line">        path.append(candidates[i])</span><br><span class="line">        used[i] = <span class="literal">True</span></span><br><span class="line">        backtracking(candidates, target, Sum, i + <span class="number">1</span>, used) <span class="comment"># 和组合总和的区别1：这里是i+1，每个数字在每个组合中只能使用一次</span></span><br><span class="line">        used[i] = <span class="literal">False</span></span><br><span class="line">        Sum -= candidates[i]</span><br><span class="line">        path.pop()</span><br></pre></td></tr></table></figure><p><strong>「注意sum + candidates[i] &lt;= target为剪枝操作，在【组合总和】有讲解过！」</strong></p><p>整体代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.result = []</span><br><span class="line">        self.path = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">combinationSum2</span>(<span class="params">self, candidates, target</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type candidates: List[int]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: List[List[int]]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> candidates: <span class="keyword">return</span> []</span><br><span class="line">        used = [<span class="literal">False</span>]*<span class="built_in">len</span>(candidates)</span><br><span class="line">        <span class="comment"># 首先把给candidates排序，让其相同的元素都挨在一起。</span></span><br><span class="line">        candidates.sort()</span><br><span class="line">        self.backtracking(candidates, target, <span class="number">0</span>, <span class="number">0</span>, used)</span><br><span class="line">        <span class="keyword">return</span> self.result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">backtracking</span>(<span class="params">self, candidates, target, Sum, startIndex, used</span>):</span></span><br><span class="line">        <span class="keyword">if</span> Sum == target: self.result.append(self.path[:])</span><br><span class="line">        <span class="keyword">if</span> Sum &gt; target: <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(startIndex, <span class="built_in">len</span>(candidates)):</span><br><span class="line">            <span class="keyword">if</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> candidates[i] == candidates[i - <span class="number">1</span>] <span class="keyword">and</span> used[i - <span class="number">1</span>] == <span class="literal">False</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            self.path.append(candidates[i])</span><br><span class="line">            Sum += candidates[i]</span><br><span class="line">            used[i] = <span class="literal">True</span></span><br><span class="line">            self.backtracking(candidates, target, Sum, i + <span class="number">1</span>, used)</span><br><span class="line">            used[i] = <span class="literal">False</span></span><br><span class="line">            Sum -= candidates[i]</span><br><span class="line">            self.path.pop()</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本题同样是求组合总和，但就是因为其数组candidates有重复元素，而要求不能有重复的组合，所以相对于【组合求和】难度提升了不少。</p><p><strong>「关键是去重的逻辑，代码很简单，网上一搜一大把，但几乎没有能把这块代码含义讲明白的，基本都是给出代码，然后说这就是去重了，究竟怎么个去重法也是模棱两可」</strong>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;求组合总和三&quot;&gt;&lt;a href=&quot;#求组合总和三&quot; class=&quot;headerlink&quot; title=&quot;求组合总和三&quot;&gt;&lt;/a&gt;求组合总和三&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/xxren8218/blogim</summary>
      
    
    
    
    <category term="回溯法" scheme="https://xxren8218.github.io/categories/%E5%9B%9E%E6%BA%AF%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>06-求组和总和二</title>
    <link href="https://xxren8218.github.io/20210716/06-%E6%B1%82%E7%BB%84%E5%92%8C%E6%80%BB%E5%92%8C%E4%BA%8C.html"/>
    <id>https://xxren8218.github.io/20210716/06-%E6%B1%82%E7%BB%84%E5%92%8C%E6%80%BB%E5%92%8C%E4%BA%8C.html</id>
    <published>2021-07-16T14:23:43.000Z</published>
    <updated>2021-07-16T14:25:26.693Z</updated>
    
    <content type="html"><![CDATA[<h2 id="求组合总和"><a href="#求组合总和" class="headerlink" title="求组合总和"></a>求组合总和</h2><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/20210716222421.PNG" alt=""></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>题目中的<strong>「无限制重复被选取，吓得我赶紧想想 出现0 可咋办」</strong>，然后看到下面提示：1 &lt;= candidates[i] &lt;= 200，我就放心了。</p><p>本题和【求组合问题】和【求组合总和】区别是：本题没有数量要求，可以无限重复，但是有总和的限制，所以间接的也是有个数的限制。</p><p>本题搜索的过程抽象成树形结构如下：</p><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/20210716222435.jpg" alt=""></p><p>注意图中叶子节点的返回条件，因为本题没有组合数量要求，仅仅是总和的限制，所以递归没有层数的限制，只要选取的元素总和超过target，就返回！</p><p>而在[求组合问题)和[求组合总和] 中都可以知道要递归K层，因为要取k个元素的组合</p><p>回溯三部曲</p><ul><li>递归函数参数</li></ul><p>这里依然是定义两个全局变量，二维数组result存放结果集，数组path存放符合条件的结果。（这两个变量可以作为函数参数传入）</p><p>首先是题目中给出的参数，集合candidates, 和目标值target。</p><p>此外我还定义了int型的sum变量来统计单一结果path里的总和，其实这个Sum也可以不用，用target做相应的减法就可以了，最后如何target==0就说明找到符合的结果了，但为了代码逻辑清晰，我依然用了Sum。</p><p><strong>「本题还需要startIndex来控制for循环的起始位置，对于组合问题，什么时候需要startIndex呢？」</strong></p><p>我举过例子，如果是一个集合来求组合的话，就需要startIndex，例如【求组合问题】和【求组合总和】</p><p>如果是多个集合取组合，各个集合之间相互不影响，那么就不用startIndex，例如：【电话号码的字母组合】</p><p><strong>「注意以上我只是说求组合的情况，如果是排列问题，又是另一套分析的套路，后面我再讲解排列的时候就重点介绍」</strong>。</p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = []</span><br><span class="line">path = []</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">backtracking</span>(<span class="params">candidates, target, Sum, startIndex</span>) </span></span><br></pre></td></tr></table></figure><ul><li>递归终止条件</li></ul><p>在如下树形结构中：</p><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/20210716222453.jpg" alt=""></p><p>从叶子节点可以清晰看到，终止只有两种情况，Sum大于target和Sum等于target。</p><p>sum等于target的时候，需要收集结果，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> Sum &gt; target:</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> Sum == target:</span><br><span class="line">    result.append(path[:])</span><br><span class="line">    <span class="keyword">return</span></span><br></pre></td></tr></table></figure><ul><li>单层搜索的逻辑</li></ul><p>单层for循环依然是从startIndex开始，搜索candidates集合。</p><p><strong>「注意本题和[求组合问题]、[求组合总和]的一个区别是：本题元素为可重复选取的」</strong>。</p><p>如何重复选取呢，看代码，注释部分：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(startIndex, <span class="built_in">len</span>(candidates)):</span><br><span class="line">    Sum += candidates[i]</span><br><span class="line">    path.append(candidates[i])</span><br><span class="line">    backtracking(candidates, target, Sum, i) <span class="comment"># 关键点:不用i+1了，表示可以重复读取当前的数</span></span><br><span class="line">    <span class="built_in">sum</span> -= candidates[i];   <span class="comment"># 回溯</span></span><br><span class="line">    path.pop()        <span class="comment"># 回溯</span></span><br></pre></td></tr></table></figure><p>按照回溯算法的的模板，不难写出完整代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.result = []</span><br><span class="line">        self.path = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">combinationSum</span>(<span class="params">self, candidates, target</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type candidates: List[int]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: List[List[int]]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> candidates: <span class="keyword">return</span></span><br><span class="line">        self.backtracking(candidates, target, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> self.result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">backtracking</span>(<span class="params">self, candidates, target, Sum, startIndex</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> candidates: <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> Sum == target:</span><br><span class="line">            self.result.append(self.path[:])</span><br><span class="line">        <span class="keyword">if</span> Sum &gt; target:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(startIndex, <span class="built_in">len</span>(candidates)):</span><br><span class="line">            Sum += candidates[i]</span><br><span class="line">            self.path.append(candidates[i])</span><br><span class="line">            self.backtracking(candidates, target, Sum, i)</span><br><span class="line">            Sum -= candidates[i]</span><br><span class="line">            self.path.pop()</span><br></pre></td></tr></table></figure><h3 id="剪枝优化"><a href="#剪枝优化" class="headerlink" title="剪枝优化"></a>剪枝优化</h3><p>在这个树形结构中：</p><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/20210716222453.jpg" alt=""></p><p>以及上面的版本一的代码大家可以看到，对于sum已经大于target的情况，其实是依然进入了下一层递归，只是下一层递归结束判断的时候，会判断sum &gt; target的话就返回。</p><p>其实如果已经知道下一层的sum会大于target，就没有必要进入下一层递归了。</p><p>那么可以在for循环的搜索范围上做做文章了。</p><p><strong>「对总集合排序之后，如果下一层的sum（就是本层的 sum + candidates[i]）已经大于target，就可以结束本轮for循环的遍历」</strong>。</p><p>如图：</p><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/20210716222516.jpg" alt=""></p><p>for循环剪枝代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(startIndex, <span class="built_in">len</span>(candidates))： </span><br><span class="line"><span class="keyword">if</span> <span class="built_in">sum</span> + candidates[i] &gt; target:</span><br><span class="line">        <span class="keyword">continue</span></span><br></pre></td></tr></table></figure><p>整体代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.result = []</span><br><span class="line">        self.path = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">combinationSum</span>(<span class="params">self, candidates, target</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type candidates: List[int]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: List[List[int]]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> candidates: <span class="keyword">return</span></span><br><span class="line">        self.backtracking(candidates, target, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> self.result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">backtracking</span>(<span class="params">self, candidates, target, Sum, startIndex</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> candidates: <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> Sum == target:</span><br><span class="line">            self.result.append(self.path[:])</span><br><span class="line">        <span class="keyword">if</span> Sum &gt; target:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(startIndex, <span class="built_in">len</span>(candidates)):</span><br><span class="line">            <span class="keyword">if</span> Sum + candidates[i] &gt; target:  <span class="comment"># 剪枝判断</span></span><br><span class="line">                <span class="keyword">continue</span>                      <span class="comment"># 剪枝操作。</span></span><br><span class="line">            Sum += candidates[i]</span><br><span class="line">            self.path.append(candidates[i])</span><br><span class="line">            self.backtracking(candidates, target, Sum, i)</span><br><span class="line">            Sum -= candidates[i]</span><br><span class="line">            self.path.pop()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本题和我们之前讲过的【求组合问题】【求组合总和】有两点不同：</p><ul><li>组合没有数量要求</li><li>元素可无限重复选取</li></ul><p>针对这两个问题，我都做了详细的分析。</p><p>并且给出了对于组合问题，什么时候用startIndex，什么时候不用，并用【电话号码的字母组合】做了对比。</p><p>最后还给出了本题的剪枝优化，这个优化如果是初学者的话并不容易想到。</p><p><strong>「在求和问题中，排序之后加剪枝是常见的套路！」</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;求组合总和&quot;&gt;&lt;a href=&quot;#求组合总和&quot; class=&quot;headerlink&quot; title=&quot;求组合总和&quot;&gt;&lt;/a&gt;求组合总和&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/xxren8218/blogimages</summary>
      
    
    
    
    <category term="回溯法" scheme="https://xxren8218.github.io/categories/%E5%9B%9E%E6%BA%AF%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>18-最近公共祖先问题</title>
    <link href="https://xxren8218.github.io/20210716/18-%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88%E9%97%AE%E9%A2%98.html"/>
    <id>https://xxren8218.github.io/20210716/18-%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88%E9%97%AE%E9%A2%98.html</id>
    <published>2021-07-16T14:20:27.000Z</published>
    <updated>2021-07-16T14:23:07.222Z</updated>
    
    <content type="html"><![CDATA[<h2 id="最近公共祖先问题"><a href="#最近公共祖先问题" class="headerlink" title="最近公共祖先问题"></a>最近公共祖先问题</h2><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/20210716222145.PNG" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/20210716222203.PNG" alt=""></p><p>说明:</p><ul><li>所有节点的值都是唯一的。</li><li>p、q 为不同节点且均存在于给定的二叉树中。</li></ul><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>遇到这个题目首先想的是要是能自底向上查找就好了，这样就可以找到公共祖先了。</p><p>那么二叉树如何可以自底向上查找呢？</p><p>回溯啊，二叉树回溯的过程就是从低到上。</p><p>后序遍历就是天然的回溯过程，最先处理的一定是叶子节点。</p><p>接下来就看如何判断一个节点是节点q和节点p的公共公共祖先呢。</p><p><strong>「如果找到一个节点，发现左子树出现结点p，右子树出现节点q，或者 左子树出现结点q，右子树出现节点p，那么该节点就是节点p和q的最近公共祖先。」</strong></p><p>使用后序遍历，回溯的过程，就是从低向上遍历节点，一旦发现如何这个条件的节点，就是最近公共节点了。</p><p>递归三部曲：</p><ul><li>确定递归函数返回值以及参数</li></ul><p>需要递归函数返回值，来告诉我们是否找到节点q或者p，那么返回值为bool类型就可以了。</p><p>但我们还要返回最近公共节点，可以利用上题目中返回值是节点 ，那么如果遇到p或者q，就把q或者p返回，返回值不为空，就说明找到了q或者p。</p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lowestCommonAncestor</span>(<span class="params">root, p, q</span>)</span></span><br></pre></td></tr></table></figure><ul><li>确定终止条件</li></ul><p>如果找到了 节点p或者q，或者遇到空节点，就返回。</p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> root == q <span class="keyword">or</span> root == p <span class="keyword">or</span> <span class="keyword">not</span> root: <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure><ul><li>确定单层递归逻辑</li></ul><p>值得注意的是 本题函数有返回值，是因为回溯的过程需要递归函数的返回值做判断，但本题我们依然要遍历树的所有节点。</p><p><strong>递归函数有返回值就是要遍历某一条边，但有返回值也要看如何处理返回值！</strong></p><p>如果递归函数有返回值，如何区分要搜索一条边，还是搜索整个树呢？</p><p>搜索一条边的写法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 递归函数(root.left): <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> 递归函数(root.right): <span class="keyword">return</span></span><br></pre></td></tr></table></figure><p>搜索整个树写法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">left = 递归函数(root.left)</span><br><span class="line">right = 递归函数(root.right)</span><br><span class="line">left与right的逻辑处理</span><br></pre></td></tr></table></figure><p>看出区别了没？</p><p><strong>「在递归函数有返回值的情况下：如果要搜索一条边，递归函数返回值不为空的时候，立刻返回，如果搜索整个树，直接用一个变量left、right接住返回值，这个left、right后序还有逻辑处理的需要，也就是后序遍历中处理中间节点的逻辑（也是回溯）」</strong></p><p>那么为什么要遍历整颗树呢？直观上来看，找到最近公共祖先，直接一路返回就可以了</p><p>如图:</p><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/20210716222225.png" alt=""></p><p>就像图中一样直接返回7，多美滋滋。</p><p>但事实上还要遍历根节点右子树（即使此时已经找到了目标节点了），也就是图中的节点4、15、20。</p><p>因为在如下代码的后序遍历中，如果想利用left和right做逻辑处理， 不能立刻返回，而是要等left与right逻辑处理完之后才能返回。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">left = 递归函数(root.left)</span><br><span class="line">right = 递归函数(root.right)</span><br><span class="line">left与right的逻辑处理</span><br></pre></td></tr></table></figure><p>所以此时大家要知道我们要遍历整棵树。知道这一点，对本题就有一定深度的理解了。</p><p>那么先用left和right接住左子树和右子树的返回值，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">left = lowestCommonAncestor(root.left, p, q)</span><br><span class="line">right = lowestCommonAncestor(root.right, p, q)</span><br></pre></td></tr></table></figure><p><strong>「如果left 和 right都不为空，说明此时root就是最近公共节点。这个比较好理解」</strong></p><p><strong>「如果left为空，right不为空，就返回right，说明目标节点是通过right返回的，反之依然」</strong>。</p><p>这里有的同学就理解不了了，为什么left为空，right不为空，目标节点通过right返回呢？</p><p>如图：</p><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/20210716222237.jpg" alt=""></p><p>图中节点10的左子树返回null，右子树返回目标值7，那么此时节点10的处理逻辑就是把右子树的返回值（最近公共祖先7）返回上去！</p><p>这里点也很重要，可能刷过这道题目的同学，都不清楚结果究竟是如何从底层一层一层传到头结点的。</p><p>那么如果left和right都为空，则返回left或者right都是可以的，也就是返回空。</p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> left <span class="keyword">and</span> right: <span class="keyword">return</span> right</span><br><span class="line"><span class="keyword">elif</span> left <span class="keyword">and</span> <span class="keyword">not</span> right: <span class="keyword">return</span> left</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><p>那么寻找最小公共祖先，完整流程图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/20210716222253.png" alt=""></p><p><strong>「从图中，大家可以看到，我们是如何回溯遍历整颗二叉树，将结果返回给头结点的！」</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lowestCommonAncestor</span>(<span class="params">self, root, p, q</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :type p: TreeNode</span></span><br><span class="line"><span class="string">        :type q: TreeNode</span></span><br><span class="line"><span class="string">        :rtype: TreeNode</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">return</span> self.dfs(root, p, q)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span>(<span class="params">self, root, p, q</span>):</span></span><br><span class="line">        <span class="keyword">if</span> root == p <span class="keyword">or</span> root == q <span class="keyword">or</span> <span class="keyword">not</span> root: <span class="keyword">return</span> root</span><br><span class="line">        left = self.dfs(root.left, p, q)    </span><br><span class="line">        right = self.dfs(root.right, p, q)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> left <span class="keyword">and</span> right: <span class="keyword">return</span> root</span><br><span class="line">        <span class="keyword">elif</span> <span class="keyword">not</span> left <span class="keyword">and</span> right: <span class="keyword">return</span> right</span><br><span class="line">        <span class="keyword">elif</span> left <span class="keyword">and</span> <span class="keyword">not</span> right: <span class="keyword">return</span> left</span><br><span class="line">        <span class="keyword">else</span>: </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这道题目刷过的同学未必真正了解这里面回溯的过程，以及结果是如何一层一层传上去的。</p><p><strong>「那么我给大家归纳如下三点」</strong>：</p><ol><li>求最小公共祖先，需要从底向上遍历，那么二叉树，只能通过后序遍历（即：回溯）实现从低向上的遍历方式。</li><li>在回溯的过程中，必然要遍历整颗二叉树，即使已经找到结果了，依然要把其他节点遍历完，因为要使用递归函数的返回值（也就是代码中的left和right）做逻辑判断。</li><li>要理解如果返回值left为空，right不为空为什么要返回right，为什么可以用返回right传给上一层结果。</li></ol><p>可以说这里每一步，都是有难度的，都需要对二叉树，递归和回溯有一定的理解。</p><p>本题没有给出迭代法，因为迭代法不适合模拟回溯的过程。理解递归的解法就够了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;最近公共祖先问题&quot;&gt;&lt;a href=&quot;#最近公共祖先问题&quot; class=&quot;headerlink&quot; title=&quot;最近公共祖先问题&quot;&gt;&lt;/a&gt;最近公共祖先问题&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/xxren821</summary>
      
    
    
    
    <category term="二叉树" scheme="https://xxren8218.github.io/categories/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
    
  </entry>
  
  <entry>
    <title>05-电话号码的字母组合</title>
    <link href="https://xxren8218.github.io/20210715/05-%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88.html"/>
    <id>https://xxren8218.github.io/20210715/05-%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88.html</id>
    <published>2021-07-15T13:57:48.000Z</published>
    <updated>2021-07-15T13:58:54.892Z</updated>
    
    <content type="html"><![CDATA[<h2 id="电话号码的字母组合"><a href="#电话号码的字母组合" class="headerlink" title="电话号码的字母组合"></a>电话号码的字母组合</h2><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/20210715215824.PNG" alt=""></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>从示例上来说，输入”23”，最直接的想法就是两层for循环遍历了吧，正好把组合的情况都输出了。</p><p>如果输入”233”呢，那么就三层for循环，如果”2333”呢，就四层for循环…….</p><p>大家应该感觉出和【求组合问题】遇到的一样的问题，就是这for循环的层数如何写出来，此时又是回溯法登场的时候了。</p><p>理解本题后，要解决如下三个问题：</p><ol><li>数字和字母如何映射</li><li>两个字母就两个for循环，三个字符我就三个for循环，以此类推，然后发现代码根本写不出来</li><li>输入1 * #按键等等异常情况</li></ol><h3 id="数字和字母如何映射"><a href="#数字和字母如何映射" class="headerlink" title="数字和字母如何映射"></a>数字和字母如何映射</h3><p>可以使用map或者定义一个数组，来做映射，我这里定义一个数组，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">letterMap = [</span><br><span class="line">    <span class="string">&quot;&quot;</span>,     <span class="comment"># 0</span></span><br><span class="line">    <span class="string">&quot;&quot;</span>,     <span class="comment"># 1</span></span><br><span class="line">    <span class="string">&quot;abc&quot;</span>,  <span class="comment"># 2</span></span><br><span class="line">    <span class="string">&quot;def&quot;</span>,  <span class="comment"># 3</span></span><br><span class="line">    <span class="string">&quot;ghi&quot;</span>,  <span class="comment"># 4</span></span><br><span class="line">    <span class="string">&quot;jkl&quot;</span>,  <span class="comment"># 5</span></span><br><span class="line">    <span class="string">&quot;mno&quot;</span>,  <span class="comment"># 6</span></span><br><span class="line">    <span class="string">&quot;pqrs&quot;</span>, <span class="comment"># 7</span></span><br><span class="line">    <span class="string">&quot;tuv&quot;</span>,  <span class="comment"># 8</span></span><br><span class="line">    <span class="string">&quot;wxyz&quot;</span>, <span class="comment"># 9</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="回溯法来解决n个for循环的问题"><a href="#回溯法来解决n个for循环的问题" class="headerlink" title="回溯法来解决n个for循环的问题"></a>回溯法来解决n个for循环的问题</h3><p>输入：”23”，抽象为树形结构，如图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/20210715215839.png" alt=""></p><p>图中可以看出遍历的深度，就是输入”23”的长度，而叶子节点就是我们要收集的结果，输出[“ad”, “ae”, “af”, “bd”, “be”, “bf”, “cd”, “ce”, “cf”]。</p><p>回溯三部曲：</p><ul><li>确定回溯函数参数</li></ul><p>首先需要一个字符串s来收集叶子节点的结果，然后用一个字符串数组result保存起来，这两个变量我依然定义为全局。</p><p>再来看参数，参数指定是有题目中给的digits，然后还要有一个参数就是index。</p><p>注意这个index可不是[<code>求组合总和</code>]中的startIndex了。</p><p>这个index是记录遍历第几个数字了，就是用来遍历digits的（题目中给出数字字符串），同时index也表示树的深度。</p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = []</span><br><span class="line">s = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">backtracking</span>(<span class="params">digits, index</span>) </span></span><br></pre></td></tr></table></figure><ul><li>确定终止条件</li></ul><p>例如输入用例”23”，两个数字，那么根节点往下递归两层就可以了，叶子节点就是要收集的结果集。</p><p>那么终止条件就是如果index 等于 输入的数字个数<code>len(digits)</code>了（本来index就是用来遍历digits的）。</p><p>然后收集结果，结束本层递归。</p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> index == <span class="built_in">len</span>(digits): </span><br><span class="line">result.append(s)</span><br><span class="line">    <span class="keyword">return</span></span><br></pre></td></tr></table></figure><ul><li>确定单层遍历逻辑</li></ul><p>首先要取index指向的数字，并找到对应的字符集（手机键盘的字符集）。</p><p>然后for循环来处理这个字符集，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">digit = <span class="built_in">int</span>(digits[index])        <span class="comment"># 将index指向的数字转为int</span></span><br><span class="line">letters = letterMap[digit]      <span class="comment"># 取数字对应的字符集</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(letters)):</span><br><span class="line">    s += letters[i]            <span class="comment"># 处理</span></span><br><span class="line">    backtracking(digits, index + <span class="number">1</span>)    <span class="comment"># 递归，注意index+1，一下层要处理下一个数字了</span></span><br><span class="line">    s = s[:-<span class="number">1</span>]                       <span class="comment"># 回溯</span></span><br></pre></td></tr></table></figure><p><strong>「注意这里for循环，可不像是在[求组合问题]和[求组合总和]中从startIndex开始遍历的」</strong>。</p><p><strong>「因为本题每一个数字代表的是不同集合，也就是求不同集合之间的组合，而[77. 组合]和[216.组合总和III]都是是求同一个集合中的组合！」</strong></p><h3 id="输入1-按键等等异常情况"><a href="#输入1-按键等等异常情况" class="headerlink" title="输入1 * #按键等等异常情况"></a>输入1 * #按键等等异常情况</h3><p>代码中最好考虑这些异常情况，但题目的测试数据中应该没有异常情况的数据，所以我就没有加了。</p><p><strong>「但是要知道会有这些异常，如果是现场面试中，一定要考虑到！」</strong></p><p>最终代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.result = []</span><br><span class="line">        self.s = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        self.letterMap = [</span><br><span class="line">            <span class="string">&quot;&quot;</span>,     <span class="comment"># 0</span></span><br><span class="line">            <span class="string">&quot;&quot;</span>,     <span class="comment"># 1</span></span><br><span class="line">            <span class="string">&quot;abc&quot;</span>,  <span class="comment"># 2</span></span><br><span class="line">            <span class="string">&quot;def&quot;</span>,  <span class="comment"># 3</span></span><br><span class="line">            <span class="string">&quot;ghi&quot;</span>,  <span class="comment"># 4</span></span><br><span class="line">            <span class="string">&quot;jkl&quot;</span>,  <span class="comment"># 5</span></span><br><span class="line">            <span class="string">&quot;mno&quot;</span>,  <span class="comment"># 6</span></span><br><span class="line">            <span class="string">&quot;pqrs&quot;</span>, <span class="comment"># 7</span></span><br><span class="line">            <span class="string">&quot;tuv&quot;</span>,  <span class="comment"># 8</span></span><br><span class="line">            <span class="string">&quot;wxyz&quot;</span>, <span class="comment"># 9</span></span><br><span class="line">        ]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">letterCombinations</span>(<span class="params">self, digits</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type digits: str</span></span><br><span class="line"><span class="string">        :rtype: List[str]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> digits: <span class="keyword">return</span> []</span><br><span class="line">        self.backtrackong(digits, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> self.result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">backtrackong</span>(<span class="params">self, digits, index</span>):</span></span><br><span class="line">        <span class="keyword">if</span> index == <span class="built_in">len</span>(digits):</span><br><span class="line">            self.result.append(self.s)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        digit = <span class="built_in">int</span>(digits[index])</span><br><span class="line">        letters = self.letterMap[digit]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(letters)):</span><br><span class="line">            self.s += letters[i]</span><br><span class="line">            self.backtrackong(digits, index + <span class="number">1</span>)</span><br><span class="line">            self.s = self.s[:-<span class="number">1</span>]</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本篇将题目的三个要点一一列出，并重点强调了和前面讲解过的[77. 组合]和[216.组合总和III]的区别，本题是多个集合求组合，所以在回溯的搜索过程中，都有一些细节需要注意的。</p><p>其实本题不算难，但也处处是细节，大家还要自己亲自动手写一写。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;电话号码的字母组合&quot;&gt;&lt;a href=&quot;#电话号码的字母组合&quot; class=&quot;headerlink&quot; title=&quot;电话号码的字母组合&quot;&gt;&lt;/a&gt;电话号码的字母组合&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/xxre</summary>
      
    
    
    
    <category term="回溯法" scheme="https://xxren8218.github.io/categories/%E5%9B%9E%E6%BA%AF%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>17-二叉搜素树的众数</title>
    <link href="https://xxren8218.github.io/20210715/17-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A0%E6%A0%91%E7%9A%84%E4%BC%97%E6%95%B0.html"/>
    <id>https://xxren8218.github.io/20210715/17-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A0%E6%A0%91%E7%9A%84%E4%BC%97%E6%95%B0.html</id>
    <published>2021-07-15T13:56:03.000Z</published>
    <updated>2021-07-15T13:57:13.270Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二叉搜素树的众数"><a href="#二叉搜素树的众数" class="headerlink" title="二叉搜素树的众数"></a>二叉搜素树的众数</h2><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/20210715215704.PNG" alt=""></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>这道题目呢，递归法我从两个维度来做。</p><p>首先如果不是二叉搜索树的话，应该怎么解题，是二叉搜索树，又应该如何解题，两种方式做一个比较，可以加深大家对二叉树的理解。</p><h3 id="递归法：不是二叉搜索树"><a href="#递归法：不是二叉搜索树" class="headerlink" title="递归法：不是二叉搜索树"></a>递归法：不是二叉搜索树</h3><p>如果不是二叉搜索树，最直观的方法一定是把这个树都遍历了，用map统计频率，把频率排个序，最后取前面高频的元素的集合。</p><p>具体步骤如下：</p><ol><li>这个树都遍历了，用map统计频率</li></ol><p>至于用前中后序那种遍历也不重要，因为就是要全遍历一遍，怎么个遍历法都行，层序遍历都没毛病！</p><p>这里采用前序遍历，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Map = &#123;&#125; key:元素，value:出现频率</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">traversal</span>(<span class="params">cur</span>):</span>  <span class="comment"># 前序遍历</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> cur: <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> cur.val <span class="keyword">not</span> <span class="keyword">in</span> Map:</span><br><span class="line">        Map[cur.val] = <span class="number">0</span></span><br><span class="line">    Map[cur.val] += <span class="number">1</span> <span class="comment"># 统计元素频率</span></span><br><span class="line">    traversal(cur.left)</span><br><span class="line">    traversal(cur.right)</span><br></pre></td></tr></table></figure><ol><li>把统计的出来的出现频率（即map中的value）排个序</li></ol><p>直接对map中的value排序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map = <span class="built_in">sorted</span>( Map.items(),key = <span class="keyword">lambda</span> x:x[<span class="number">1</span>],reverse = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><ol><li>取前面高频的元素</li></ol><p>那么把前面高频的元素取出来就可以了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(Map)):</span><br><span class="line">    <span class="keyword">if</span> v &gt;= <span class="number">2</span>:</span><br><span class="line">        result.append(k)</span><br></pre></td></tr></table></figure><p>整体代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;二叉搜素树的众数&quot;&gt;&lt;a href=&quot;#二叉搜素树的众数&quot; class=&quot;headerlink&quot; title=&quot;二叉搜素树的众数&quot;&gt;&lt;/a&gt;二叉搜素树的众数&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/xxren821</summary>
      
    
    
    
    <category term="二叉树" scheme="https://xxren8218.github.io/categories/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
    
  </entry>
  
  <entry>
    <title>16-二叉搜索树的最小绝对差</title>
    <link href="https://xxren8218.github.io/20210715/16-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E7%BB%9D%E5%AF%B9%E5%B7%AE.html"/>
    <id>https://xxren8218.github.io/20210715/16-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E7%BB%9D%E5%AF%B9%E5%B7%AE.html</id>
    <published>2021-07-15T13:52:04.000Z</published>
    <updated>2021-07-15T13:55:34.167Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二叉搜索树的最小绝对差"><a href="#二叉搜索树的最小绝对差" class="headerlink" title="二叉搜索树的最小绝对差"></a>二叉搜索树的最小绝对差</h2><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/20210715215250.PNG" alt=""></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>题目中要求在二叉搜索树上任意两节点的差的绝对值的最小值。</p><p><strong>「注意是二叉搜索树」</strong>，二叉搜索树可是有序的。</p><p>遇到在二叉搜索树上求什么最值啊，差值之类的，就把它想成在一个有序数组上求最值，求差值，这样就简单多了。</p><h3 id="递归法"><a href="#递归法" class="headerlink" title="递归法"></a>递归法</h3><p>那么二叉搜索树采用中序遍历，其实就是一个有序数组。</p><p><strong>「在一个有序数组上求两个数最小差值，这是不是就是一道送分题了。」</strong></p><p>最直观的想法，就是把二叉搜索树转换成有序数组，然后遍历一遍数组，就统计出来最小差值了。</p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">li = []</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">traversal</span>(<span class="params">root</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span></span><br><span class="line">    traversal(root.left)</span><br><span class="line">    li.append(root.val)</span><br><span class="line">    traversal(root.right)</span><br></pre></td></tr></table></figure><p>以上代码是把二叉搜索树转化为有序数组了，其实在二叉搜素树中序遍历的过程中，我们就可以直接计算了。</p><p>需要用一个pre节点记录一下cur节点的前一个节点。</p><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/20210715215520.png" alt=""></p><p>一些同学不知道在递归中如何记录前一个节点的指针，其实实现起来是很简单的，大家只要看过一次，写过一次，就掌握了。</p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">result = <span class="built_in">float</span>(<span class="string">&#x27;INF&#x27;</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">traversal</span>(<span class="params">cur</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> cur: <span class="keyword">return</span></span><br><span class="line">    traversal(cur.left)     <span class="comment"># 左</span></span><br><span class="line">    <span class="keyword">if</span> pre:                 <span class="comment"># 中</span></span><br><span class="line">        result = <span class="built_in">min</span>(result, cur.val - pre.val)</span><br><span class="line">    pre = cur <span class="comment"># 记录前一个</span></span><br><span class="line">    traversal(cur.right)    <span class="comment"># 右</span></span><br></pre></td></tr></table></figure><p>是不是看上去也并不复杂！</p><p>整体代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.pre = <span class="literal">None</span></span><br><span class="line">        self.result = <span class="built_in">float</span>(<span class="string">&#x27;INF&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getMinimumDifference</span>(<span class="params">self, root</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span></span><br><span class="line">        self.traversal(root)</span><br><span class="line">        <span class="keyword">return</span> self.result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">traversal</span>(<span class="params">self, cur</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> cur: <span class="keyword">return</span></span><br><span class="line">        self.traversal(cur.left)</span><br><span class="line">        <span class="keyword">if</span> self.pre:</span><br><span class="line">            self.result = <span class="built_in">min</span>(self.result, <span class="built_in">abs</span>(cur.val - self.pre.val))</span><br><span class="line">        self.pre = cur</span><br><span class="line">        self.traversal(cur.right)</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><strong>「遇到在二叉搜索树上求什么最值，求差值之类的，都要思考一下二叉搜索树可是有序的，要利用好这一特点。」</strong></p><p>同时要学会在递归遍历的过程中如何记录前后两个指针，这也是一个小技巧，学会了还是很受用的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;二叉搜索树的最小绝对差&quot;&gt;&lt;a href=&quot;#二叉搜索树的最小绝对差&quot; class=&quot;headerlink&quot; title=&quot;二叉搜索树的最小绝对差&quot;&gt;&lt;/a&gt;二叉搜索树的最小绝对差&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net</summary>
      
    
    
    
    <category term="二叉树" scheme="https://xxren8218.github.io/categories/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
    
  </entry>
  
  <entry>
    <title>04-求组合总和</title>
    <link href="https://xxren8218.github.io/20210713/04-%E6%B1%82%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C.html"/>
    <id>https://xxren8218.github.io/20210713/04-%E6%B1%82%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C.html</id>
    <published>2021-07-13T10:23:07.000Z</published>
    <updated>2021-07-13T10:24:30.544Z</updated>
    
    <content type="html"><![CDATA[<h2 id="求组合总和"><a href="#求组合总和" class="headerlink" title="求组合总和"></a>求组合总和</h2><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/20210713182331.PNG" alt=""></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>本题就是在[1,2,3,4,5,6,7,8,9]这个集合中找到和为n的k个数的组合。</p><p>相对于求组合问题，无非就是多了一个限制，本题是要找到和为n的k个数的组合，而整个集合已经是固定的了[1,…,9]。</p><p>想到这一点了，做过[77. 组合]之后，本题是简单一些了。</p><p>本题k相当于了树的深度，9（因为整个集合就是9个数）就是树的宽度。</p><p>例如 k = 2，n = 4的话，就是在集合[1,2,3,4,5,6,7,8,9]中求 k（个数） = 2, n（和） = 4的组合。</p><p>选取过程如图：</p><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/20210713182351.png" alt=""></p><p>图中，可以看出，只有最后取到集合（1，3）和为4 符合条件。</p><h3 id="回溯三部曲"><a href="#回溯三部曲" class="headerlink" title="回溯三部曲"></a>回溯三部曲</h3><ul><li><strong>「确定递归函数参数」</strong></li></ul><p>和求组合问题一样，依然需要一维数组path来存放符合条件的结果，二维数组result来存放结果集。</p><p>这里我依然定义path 和 result为全局变量。</p><p>至于为什么取名为path？从上面树形结构中，可以看出，结果其实就是一条根节点到叶子节点的路径。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result = [] <span class="comment"># 存放符合条件结果的集合</span></span><br><span class="line">path = [] <span class="comment"># 用来存放符合条件结果</span></span><br></pre></td></tr></table></figure><p>接下来还需要如下参数：</p><ul><li>targetSum（int）目标和，也就是题目中的n。</li><li>k（int）就是题目中要求k个数的集合。</li><li>Sum（int）为已经收集的元素的总和，也就是path里元素的总和。</li><li>startIndex（int）为下一层for循环搜索的起始位置。</li></ul><p>所以代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = [] <span class="comment"># 存放符合条件结果的集合</span></span><br><span class="line">path = []   <span class="comment"># 用来存放符合条件单一结果</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">backtracking</span>(<span class="params">targetSum, k, Sum, startIndex</span>):</span>  </span><br></pre></td></tr></table></figure><p>其实这里sum这个参数也可以省略，每次targetSum减去选取的元素数值，然后判断如果targetSum为0了，说明收集到符合条件的结果了，我这里为了直观便于理解，还是加一个Sum参数。</p><p>还要强调一下，回溯法中递归函数参数很难一次性确定下来，一般先写逻辑，需要啥参数了，填什么参数。</p><ul><li>确定终止条件</li></ul><p>什么时候终止呢？</p><p>在上面已经说了，k其实就已经限制树的深度，因为就取k个元素，树再往下深了没有意义。</p><p>所以如果len(path) 和 k相等了，就终止。</p><p>如果此时path里收集到的元素和（Sum） 和targetSum（就是题目描述的n）相同了，就用result收集当前的结果。</p><p>所以 终止代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(path) == k:</span><br><span class="line">    <span class="keyword">if</span> Sum == targetSum: result.append(path[:])</span><br><span class="line">    <span class="keyword">return</span> <span class="comment"># 如果len(path) == k 但Sum != targetSum 直接返回</span></span><br></pre></td></tr></table></figure><ul><li><strong>「单层搜索过程」</strong></li></ul><p>本题和求组合问题的区别之一就是集合固定的就是9个数[1,…,9]，所以for循环固定i&lt;=9</p><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/20210713182405.png" alt=""></p><p>处理过程就是 path收集每次选取的元素，相当于树型结构里的边，Sum来统计path里元素的总和。</p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(startindex, <span class="number">10</span>):</span><br><span class="line">    Sum += i</span><br><span class="line">    path.append(i)</span><br><span class="line">    backtracking(targetSum, k, Sum, i + <span class="number">1</span>)  <span class="comment"># 注意i+1调整startIndex</span></span><br><span class="line">    Sum -= i <span class="comment"># 回溯 </span></span><br><span class="line">    path.pop() <span class="comment"># 回溯 </span></span><br></pre></td></tr></table></figure><p><strong>「别忘了处理过程 和 回溯过程是一一对应的，处理有加，回溯就要有减！」</strong></p><p>参照回溯算法中的模板，不难写出如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.res = [] <span class="comment"># 存放结果集 </span></span><br><span class="line">        self.path = [] <span class="comment"># 符合条件的结果</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">combinationSum3</span>(<span class="params">self, k, n</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type k: int</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: List[List[int]]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.backtracking(n, k, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> self.res</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">backtracking</span>(<span class="params">self, targetSum, k, Sum, startindex</span>):</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">targetSum：目标和，也就是题目中的n。 </span></span><br><span class="line"><span class="string">     k：题目中要求k个数的集合。 </span></span><br><span class="line"><span class="string">     Sum：已经收集的元素的总和，也就是path里元素的总和。 </span></span><br><span class="line"><span class="string">     startIndex：下一层for循环搜索的起始位置。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(self.path) == k:</span><br><span class="line">            <span class="keyword">if</span> Sum == targetSum:</span><br><span class="line">                self.res.append(self.path[:]) <span class="comment"># 注意append的不能是引用。</span></span><br><span class="line">            <span class="keyword">return</span> <span class="comment"># 如果path.size() == k 但sum != targetSum 直接返回</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(startindex, <span class="number">10</span>):</span><br><span class="line">            Sum += i <span class="comment"># 处理</span></span><br><span class="line">            self.path.append(i) <span class="comment"># 处理</span></span><br><span class="line">            self.backtracking(targetSum, k, Sum, i + <span class="number">1</span>) <span class="comment"># 注意i+1调整startIndex</span></span><br><span class="line">            Sum -= i <span class="comment"># 回溯</span></span><br><span class="line">            self.path.pop() <span class="comment"># 回溯</span></span><br></pre></td></tr></table></figure><h3 id="剪枝"><a href="#剪枝" class="headerlink" title="剪枝"></a>剪枝</h3><p>这道题目，剪枝操作其实是很容易想到了，想必大家看上面的树形图的时候已经想到了。</p><p>如图：</p><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/20210713182418.jpg" alt=""></p><p>已选元素总和如果已经大于n（图中数值为4）了，那么往后遍历就没有意义了，直接剪掉。</p><p>那么剪枝的地方一定是在递归终止的地方剪，剪枝代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">sum</span> &gt; targetSum: <span class="comment"># 剪枝操作</span></span><br><span class="line">    <span class="keyword">return</span></span><br></pre></td></tr></table></figure><p>最终代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.res = [] <span class="comment"># 存放结果集 </span></span><br><span class="line">        self.path = [] <span class="comment"># 符合条件的结果</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">combinationSum3</span>(<span class="params">self, k, n</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type k: int</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: List[List[int]]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.backtracking(n, k, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> self.res</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">backtracking</span>(<span class="params">self, targetSum, k, Sum, startindex</span>):</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">targetSum：目标和，也就是题目中的n。 </span></span><br><span class="line"><span class="string">     k：题目中要求k个数的集合。 </span></span><br><span class="line"><span class="string">     Sum：已经收集的元素的总和，也就是path里元素的总和。 </span></span><br><span class="line"><span class="string">     startIndex：下一层for循环搜索的起始位置。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> Sum &gt; targetSum:  <span class="comment"># 剪枝操作</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(self.path) == k:</span><br><span class="line">            <span class="keyword">if</span> Sum == targetSum:</span><br><span class="line">                self.res.append(self.path[:]) <span class="comment"># 注意append的不能是引用。</span></span><br><span class="line">            <span class="keyword">return</span> <span class="comment"># 如果path.size() == k 但sum != targetSum 直接返回</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(startindex, <span class="number">10</span>):</span><br><span class="line">            Sum += i <span class="comment"># 处理</span></span><br><span class="line">            self.path.append(i) <span class="comment"># 处理</span></span><br><span class="line">            self.backtracking(targetSum, k, Sum, i + <span class="number">1</span>) <span class="comment"># 注意i+1调整startIndex</span></span><br><span class="line">            Sum -= i <span class="comment"># 回溯</span></span><br><span class="line">            self.path.pop() <span class="comment"># 回溯</span></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>开篇就介绍了本题与组合问题的区别，相对来说加了元素总和的限制，如果做完77组合问题。再做本题再合适不过。</p><p>分析完区别，依然把问题抽象为树形结构，按照回溯三部曲进行讲解，最后给出剪枝的优化。</p><p>相信做完本题，大家对组合问题应该有初步了解了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;求组合总和&quot;&gt;&lt;a href=&quot;#求组合总和&quot; class=&quot;headerlink&quot; title=&quot;求组合总和&quot;&gt;&lt;/a&gt;求组合总和&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/xxren8218/blogimages</summary>
      
    
    
    
    <category term="回溯法" scheme="https://xxren8218.github.io/categories/%E5%9B%9E%E6%BA%AF%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>03-回溯算法的剪枝策略</title>
    <link href="https://xxren8218.github.io/20210713/03-%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%E7%9A%84%E5%89%AA%E6%9E%9D%E7%AD%96%E7%95%A5.html"/>
    <id>https://xxren8218.github.io/20210713/03-%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%E7%9A%84%E5%89%AA%E6%9E%9D%E7%AD%96%E7%95%A5.html</id>
    <published>2021-07-13T10:21:36.000Z</published>
    <updated>2021-07-13T10:22:51.105Z</updated>
    
    <content type="html"><![CDATA[<h2 id="回溯算法的剪枝策略"><a href="#回溯算法的剪枝策略" class="headerlink" title="回溯算法的剪枝策略"></a>回溯算法的剪枝策略</h2><p>在上文中，我们通过回溯搜索法，解决了n个数中求k个数的组合问题。</p><p>文中的回溯法是可以剪枝优化的，本篇我们继续来看一下题目77. 组合。</p><p>链接：<a href="https://leetcode-cn.com/problems/combinations/">https://leetcode-cn.com/problems/combinations/</a></p><p><strong>「看本篇之前，需要先看[回溯算法：求组合问题！]</strong>。</p><p>大家先回忆一下[77. 组合]给出的回溯法的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.res = []</span><br><span class="line">        self.path = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">combine</span>(<span class="params">self, n, k</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :type k: int</span></span><br><span class="line"><span class="string">        :rtype: List[List[int]]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.backtracking(n, k, <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> self.res</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">backtracking</span>(<span class="params">self, n, k, startindex</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(self.path) == k:</span><br><span class="line">            <span class="comment"># 注意此处传递的不能是引用。即append(a)不能传递引用，若是引用，a变，整体都变。</span></span><br><span class="line">            path = self.path[:]</span><br><span class="line">            self.res.append(path)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 也可下面(节省空间复杂度)</span></span><br><span class="line">            <span class="comment"># self.res.append(self.path[:])</span></span><br><span class="line">         </span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(startindex, n + <span class="number">1</span>):</span><br><span class="line">            self.path.append(i)</span><br><span class="line">            self.backtracking(n, k, i + <span class="number">1</span>)</span><br><span class="line">            self.path.pop()</span><br></pre></td></tr></table></figure><h3 id="剪枝优化"><a href="#剪枝优化" class="headerlink" title="剪枝优化"></a>剪枝优化</h3><p>我们说过，回溯法虽然是暴力搜索，但也有时候可以有点剪枝优化一下的。</p><p>在遍历的过程中有如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(startindex, n + <span class="number">1</span>):</span><br><span class="line">    self.path.append(i)</span><br><span class="line">    self.backtracking(n, k, i + <span class="number">1</span>)</span><br><span class="line">    self.path.pop()</span><br></pre></td></tr></table></figure><p>这个遍历的范围是可以剪枝优化的，怎么优化呢？</p><p>来举一个例子，n = 4，k = 4的话，那么第一层for循环的时候，从元素2开始的遍历都没有意义了。在第二层for循环，从元素3开始的遍历都没有意义了。</p><p>这么说有点抽象，如图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/20210713182238.png" alt=""></p><p>图中每一个节点（图中为矩形），就代表本层的一个for循环，那么每一层的for循环从第二个数开始遍历的话，都没有意义，都是无效遍历。</p><p><strong>「所以，可以剪枝的地方就在递归中每一层的for循环所选择的起始位置」</strong>。</p><p><strong>「如果for循环选择的起始位置之后的元素个数 已经不足 我们需要的元素个数了，那么就没有必要搜索了」</strong>。</p><p>注意代码中i，就是for循环里选择的起始位置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(startindex, n + <span class="number">1</span>):</span><br></pre></td></tr></table></figure><p>接下来看一下优化过程如下：</p><ol><li>已经选择的元素个数：len(path)</li><li>还需要的元素个数为: k - len(path)</li><li>在集合n中至多要从该起始位置 : n - (k - len(path)) + 1，开始遍历</li></ol><p>为什么有个+1呢，因为包括起始位置，我们要是一个左闭的集合。</p><p>举个例子，n = 4，k = 3， 目前已经选取的元素为0（len(path)为0），n - (k - 0) + 1 即 4 - ( 3 - 0) + 1 = 2。</p><p>从2开始搜索都是合理的，可以是组合[2, 3, 4]。</p><p>这里大家想不懂的话，建议也举一个例子，就知道是不是要+1了。</p><p>所以优化之后的for循环是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(startindex, n - (k - <span class="built_in">len</span>(path)) + <span class="number">1</span>): <span class="comment"># i为本次搜索的起始位置</span></span><br></pre></td></tr></table></figure><p>优化后的代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.res = []</span><br><span class="line">        self.path = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">combine</span>(<span class="params">self, n, k</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :type k: int</span></span><br><span class="line"><span class="string">        :rtype: List[List[int]]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.backtracking(n, k, <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> self.res</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">backtracking</span>(<span class="params">self, n, k, startindex</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(self.path) == k:</span><br><span class="line">            </span><br><span class="line">            self.res.append(self.path[:])</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="comment"># 此处有两 + 1，一个是循环至多的起始位置，一个是range()函数的半闭半开区间。</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(startindex, n - (k - <span class="built_in">len</span>(self.path)) + <span class="number">1</span> + <span class="number">1</span>):</span><br><span class="line">            self.path.append(i)</span><br><span class="line">            self.backtracking(n, k, i + <span class="number">1</span>)</span><br><span class="line">            self.path.pop()</span><br></pre></td></tr></table></figure><p><code>这个代码运行后，将之前的代码的416ms的时间降低到了28ms。</code></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本篇我们针对求组合问题的回溯法代码做了剪枝优化，这个优化如果不画图的话，其实不好理解，也不好讲清楚。</p><p>所以我依然是把整个回溯过程抽象为一颗树形结构，然后可以直观的看出，剪枝究竟是剪的哪里。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;回溯算法的剪枝策略&quot;&gt;&lt;a href=&quot;#回溯算法的剪枝策略&quot; class=&quot;headerlink&quot; title=&quot;回溯算法的剪枝策略&quot;&gt;&lt;/a&gt;回溯算法的剪枝策略&lt;/h2&gt;&lt;p&gt;在上文中，我们通过回溯搜索法，解决了n个数中求k个数的组合问题。&lt;/p&gt;
&lt;p&gt;文中</summary>
      
    
    
    
    <category term="回溯法" scheme="https://xxren8218.github.io/categories/%E5%9B%9E%E6%BA%AF%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>15-验证二叉搜索树</title>
    <link href="https://xxren8218.github.io/20210713/15-%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91.html"/>
    <id>https://xxren8218.github.io/20210713/15-%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91.html</id>
    <published>2021-07-13T10:20:16.000Z</published>
    <updated>2021-07-13T10:21:08.620Z</updated>
    
    <content type="html"><![CDATA[<h2 id="验证二叉搜索树"><a href="#验证二叉搜索树" class="headerlink" title="验证二叉搜索树"></a>验证二叉搜索树</h2><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/20210713182047.PNG" alt=""></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>要知道中序遍历下，输出的二叉搜索树节点的数值是有序序列。</p><p>有了这个特性，<strong>「验证二叉搜索树，就相当于变成了判断一个序列是不是递增的了。」</strong></p><h2 id="递归法"><a href="#递归法" class="headerlink" title="递归法"></a>递归法</h2><p>可以递归中序遍历将二叉搜索树转变成一个数组，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">li = []</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">traversal</span>(<span class="params">root</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span></span><br><span class="line">    traversal(root.left)</span><br><span class="line">    li.append(root.val) <span class="comment"># 将二叉搜索树转换为有序数组</span></span><br><span class="line">    traversal(root.right)</span><br></pre></td></tr></table></figure><p>然后只要比较一下，这个数组是否是有序的，<strong>「注意二叉搜索树中不能有重复元素」</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">traversal(root)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(li)):</span><br><span class="line">    <span class="comment"># 注意要小于等于，搜索树里不能有相同元素</span></span><br><span class="line">    <span class="keyword">if</span> li[i] &lt;= li[i - <span class="number">1</span>]: </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>整体代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.li = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValidBST</span>(<span class="params">self, root</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span></span><br><span class="line">        self.traversal(root)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(self.li)):</span><br><span class="line">        <span class="comment"># 注意要小于等于，搜索树里不能有相同元素</span></span><br><span class="line">            <span class="keyword">if</span> self.li[i] &lt;= self.li[i - <span class="number">1</span>]: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 递归将二叉搜索树变为有序数组</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">traversal</span>(<span class="params">self, root</span>):</span></span><br><span class="line">    <span class="comment"># 注意为空的判断</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span></span><br><span class="line">        self.traversal(root.left)</span><br><span class="line">        self.li.append(root.val)</span><br><span class="line">        self.traversal(root.right)</span><br></pre></td></tr></table></figure><p>以上代码中，我们把二叉树转变为数组来判断，是最直观的，但其实不用转变成数组，可以在递归遍历的过程中直接判断是否有序。</p><p>这道题目比较容易陷入一个陷阱：</p><ul><li>陷阱1</li></ul><p><strong>「不能单纯的比较左节点小于中间节点，右节点大于中间节点就完事了」</strong>。</p><p>写出了类似这样的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> root.val &gt; root.left.val <span class="keyword">and</span> root.val &lt; root.right.val:</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"><span class="keyword">else</span>: </span><br><span class="line">    <span class="keyword">return</span> false</span><br></pre></td></tr></table></figure><p><strong>我们要比较的是 左子树所有节点小于中间节点，右子树所有节点大于中间节点</strong>。所以以上代码的判断逻辑是错误的。</p><p>例如：[10,5,15,null,null,6,20] 这个case：</p><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/20210713182101.png" alt=""></p><p>节点10小于左节点5，大于右节点15，但右子树里出现了一个6 这就不符合了！</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这道题目是一个简单题，但对于没接触过的同学还是有难度的。</p><p>所以初学者刚开始学习算法的时候，看到简单题目没有思路很正常，千万别怀疑自己智商，学习过程都是这样的，大家智商都差不多，哈哈。</p><p>只要把基本类型的题目都做过，总结过之后，思路自然就开阔了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;验证二叉搜索树&quot;&gt;&lt;a href=&quot;#验证二叉搜索树&quot; class=&quot;headerlink&quot; title=&quot;验证二叉搜索树&quot;&gt;&lt;/a&gt;验证二叉搜索树&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/xxren8218/bl</summary>
      
    
    
    
    <category term="二叉树" scheme="https://xxren8218.github.io/categories/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
    
  </entry>
  
  <entry>
    <title>14-二叉搜索树</title>
    <link href="https://xxren8218.github.io/20210713/14-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91.html"/>
    <id>https://xxren8218.github.io/20210713/14-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91.html</id>
    <published>2021-07-13T10:18:55.000Z</published>
    <updated>2021-07-13T10:20:01.433Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h2><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/20210713181931.PNG" alt=""></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>之前我们讲了都是普通二叉树，那么接下来看看二叉搜索树。</p><p>二叉搜索树是一个有序树：</p><ul><li>若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值；</li><li>若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值；</li><li>它的左、右子树也分别为二叉搜索树</li></ul><p>这就决定了，二叉搜索树，递归遍历和迭代遍历和普通二叉树都不一样。</p><p>本题，其实就是在二叉搜索树中搜索一个节点。那么我们来看看应该如何遍历。</p><h3 id="递归法"><a href="#递归法" class="headerlink" title="递归法"></a>递归法</h3><ul><li>确定递归函数的参数和返回值</li></ul><p>递归函数的参数传入的就是根节点和要搜索的数值，返回的就是以这个搜索数值所在的节点。</p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">searchBST</span>(<span class="params">root, val</span>):</span></span><br></pre></td></tr></table></figure><ul><li>确定终止条件</li></ul><p>如果root为空，或者找到这个数值了，就返回root节点。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> root <span class="keyword">or</span> root.val == val: <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure><ul><li>确定单层递归的逻辑</li></ul><p>看看二叉搜索树的单层递归逻辑有何不同。</p><p>因为二叉搜索树的节点是有序的，所以可以有方向的去搜索。</p><p>如果root.val &gt; val，搜索左子树，如果root.val &lt; val，就搜索右子树，最后如果都没有搜索到，就返回None。</p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> root.val &gt; val: </span><br><span class="line">    <span class="keyword">return</span> searchBST(root.left, val) <span class="comment"># 注意这里加了return </span></span><br><span class="line"><span class="keyword">if</span> root.val &lt; val: </span><br><span class="line">    <span class="keyword">return</span> searchBST(root.right, val)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><p>这里可能会疑惑，在递归遍历的时候，什么时候直接return 递归函数的返回值，什么时候不用加这个 return呢。</p><p>如果要搜索一条边，递归函数就要加返回值，这里也是一样的道理。</p><p><strong>「因为搜索到目标节点了，就要立即return了，这样才是找到节点就返回（搜索某一条边），如果不加return，就是遍历整棵树了。」</strong></p><p>整体代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">searchBST</span>(<span class="params">self, root, val</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :type val: int</span></span><br><span class="line"><span class="string">        :rtype: TreeNode</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root <span class="keyword">or</span> root.val == val: <span class="keyword">return</span> root</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> root.val &gt; val:</span><br><span class="line">            <span class="keyword">return</span> self.searchBST(root.left, val) <span class="comment"># 注意这里加了return </span></span><br><span class="line">        <span class="keyword">if</span> root.val &lt; val:</span><br><span class="line">            <span class="keyword">return</span> self.searchBST(root.right, val)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><h3 id="迭代法"><a href="#迭代法" class="headerlink" title="迭代法"></a>迭代法</h3><p>一提到二叉树遍历的迭代法，可能立刻想起使用栈来模拟深度遍历，使用队列来模拟广度遍历。</p><p><strong>对于二叉搜索树可就不一样了，因为二叉搜索树的特殊性，也就是节点的有序性，可以不使用辅助栈或者队列就可以写出迭代法。</strong></p><p>对于一般二叉树，递归过程中还有回溯的过程，例如走一个左方向的分支走到头了，那么要调头，在走右分支。</p><p>而<strong>「对于二叉搜索树，不需要回溯的过程，因为节点的有序性就帮我们确定了搜索的方向。」</strong></p><p>例如要搜索元素为3的节点，<strong>「我们不需要搜索其他节点，也不需要做回溯，查找的路径已经规划好了。」</strong></p><p>中间节点如果大于3就向左走，如果小于3就向右走，如图：</p><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/20210713181949.png" alt=""></p><p>所以迭代法代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">searchBST</span>(<span class="params">self, root, val</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :type val: int</span></span><br><span class="line"><span class="string">        :rtype: TreeNode</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root <span class="keyword">or</span> root.val == val: <span class="keyword">return</span> root</span><br><span class="line">        <span class="keyword">while</span> root:</span><br><span class="line">            <span class="keyword">if</span> root.val &gt; val: </span><br><span class="line">                root = root.left</span><br><span class="line">            <span class="keyword">elif</span> root.val &lt; val:</span><br><span class="line">                root = root.right</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure><p>第一次看到了如此简单的迭代法，是不是感动的痛哭流涕，哭一会~</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本篇我们介绍了二叉搜索树的遍历方式，因为二叉搜索树的有序性，遍历的时候要比普通二叉树简单很多。</p><p>但是一些同学很容易忽略二叉搜索树的特性，所以写出遍历的代码就未必真的简单了。</p><p>所以针对二叉搜索树的题目，一样要利用其特性。</p><p>文中我依然给出递归和迭代两种方式，可以看出写法都非常简单，就是利用了二叉搜索树有序的特点。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;二叉搜索树&quot;&gt;&lt;a href=&quot;#二叉搜索树&quot; class=&quot;headerlink&quot; title=&quot;二叉搜索树&quot;&gt;&lt;/a&gt;二叉搜索树&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/xxren8218/blogimages</summary>
      
    
    
    
    <category term="二叉树" scheme="https://xxren8218.github.io/categories/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
    
  </entry>
  
  <entry>
    <title>02-回溯求组合问题</title>
    <link href="https://xxren8218.github.io/20210712/02-%E5%9B%9E%E6%BA%AF%E6%B3%95%E6%B1%82%E7%BB%84%E5%90%88%E9%97%AE%E9%A2%98.html"/>
    <id>https://xxren8218.github.io/20210712/02-%E5%9B%9E%E6%BA%AF%E6%B3%95%E6%B1%82%E7%BB%84%E5%90%88%E9%97%AE%E9%A2%98.html</id>
    <published>2021-07-12T14:01:19.000Z</published>
    <updated>2021-07-15T14:12:47.145Z</updated>
    
    <content type="html"><![CDATA[<h2 id="回溯法求组合问题"><a href="#回溯法求组合问题" class="headerlink" title="回溯法求组合问题"></a>回溯法求组合问题</h2><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/20210712220203.PNG" alt=""></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>本题这是回溯法的经典题目。</p><p>直接的解法当然是使用for循环，例如示例中k为2，很容易想到 用两个for循环，这样就可以输出 和示例中一样的结果。</p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">res = []</span><br><span class="line">n = <span class="number">4</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">       res.append([i,j])</span><br></pre></td></tr></table></figure><p>输入：n = 100, k = 3 那么就三层for循环，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">res = []</span><br><span class="line">n = <span class="number">100</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span>  <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(j + <span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">res.append([i,j,k])</span><br></pre></td></tr></table></figure><p><strong>「如果n为100，k为50呢，那就50层for循环，是不是开始窒息」</strong>。</p><p><strong>「此时就会发现虽然想暴力搜索，但是用for循环嵌套连暴力都写不出来！」</strong></p><p>咋整？</p><p>回溯搜索法来了，虽然回溯法也是暴力，但至少能写出来，不像for循环嵌套k层让人绝望。</p><p>那么回溯法怎么暴力搜呢？</p><p>上面我们说了<strong>「要解决 n为100，k为50的情况，暴力写法需要嵌套50层for循环，那么回溯法就用递归来解决嵌套层数的问题」</strong>。</p><p>递归来做层叠嵌套（可以理解是开k层for循环），<strong>「每一次的递归中嵌套一个for循环，那么递归就可以用于解决多层嵌套循环的问题了」</strong>。</p><p>此时递归的层数大家应该知道了，例如：n为100，k为50的情况下，就是递归50层。</p><p>一些同学本来对递归就懵，回溯法中递归还要嵌套for循环，可能就直接晕倒了！</p><p>如果脑洞模拟回溯搜索的过程，绝对可以让人窒息，所以需要抽象图形结构来进一步理解。</p><p><strong>「我们在上篇文章中说道回溯法解决的问题都可以抽象为树形结构（N叉树），用树形结构来理解回溯就容易多了」</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/20210712220222.png" alt=""></p><p>可以看出这个棵树，一开始集合是 1，2，3，4， 从左向右取数，取过的数，不在重复取。</p><p>第一次取1，集合变为2，3，4 ，因为k为2，我们只需要再取一个数就可以了，分别取2，3，4，得到集合[1,2] [1,3] [1,4]，以此类推。</p><p><strong>「每次从集合中选取元素，可选择的范围随着选择的进行而收缩，调整可选择的范围」</strong>。</p><p><strong>「图中可以发现n相当于树的宽度，k相当于树的深度」</strong>。</p><p>那么如何在这个树上遍历，然后收集到我们要的结果集呢？</p><p><strong>「图中每次搜索到了叶子节点，我们就找到了一个结果」</strong>。</p><p>相当于只需要把达到叶子节点的结果收集起来，就可以求得 n个数中k个数的组合集合。</p><p>在上文中我们提到了回溯法三部曲，那么我们按照回溯法三部曲开始正式讲解代码了。</p><h3 id="回溯三部曲"><a href="#回溯三部曲" class="headerlink" title="回溯三部曲"></a>回溯三部曲</h3><ul><li>递归函数的返回值以及参数</li></ul><p>在这里要定义两个全局变量，一个用来存放符合条件单一结果，一个用来存放符合条件结果的集合。</p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result = [] <span class="comment"># 存放符合条件结果的集合</span></span><br><span class="line">path = [] <span class="comment"># 用来存放符合条件结果</span></span><br></pre></td></tr></table></figure><p>其实不定义这两个全局遍历也是可以的，把这两个变量放进递归函数的参数里，但函数里参数太多影响可读性，所以我定义全局变量了。</p><p>函数里一定有两个参数，既然是集合n里面取k的数，那么n和k是两个int型的参数。</p><p>然后还需要一个参数，为int型变量startIndex，这个参数用来记录本层递归的中，集合从哪里开始遍历（集合就是[1,…,n] ）。</p><p>为什么要有这个startIndex呢？</p><p><strong>「每次从集合中选取元素，可选择的范围随着选择的进行而收缩，调整可选择的范围，就是要靠startIndex」</strong>。</p><p>从下图中红线部分可以看出，在集合[1,2,3,4]取1之后，下一层递归，就要在[2,3,4]中取数了，那么下一层递归如何知道从[2,3,4]中取数呢，靠的就是startIndex。</p><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/20210712220240.png" alt=""></p><p>所以需要startIndex来记录下一层递归，搜索的起始位置。</p><p>那么整体代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = [] <span class="comment"># 存放符合条件结果的集合</span></span><br><span class="line">path = []   <span class="comment"># 用来存放符合条件单一结果</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">backtracking</span>(<span class="params">n, k, startIndex</span>):</span> </span><br></pre></td></tr></table></figure><ul><li>回溯函数终止条件</li></ul><p>什么时候到达所谓的叶子节点了呢？</p><p>path这个数组的大小如果达到k，说明我们找到了一个子集大小为k的组合了，在图中path存的就是根节点到叶子节点的路径。</p><p>如图红色部分：</p><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/20210712220254.png" alt=""></p><p>此时用result二维数组，把path保存起来，并终止本层递归。</p><p>所以终止条件代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(path) == k:</span><br><span class="line">    result.append(path)</span><br><span class="line">    <span class="keyword">return</span></span><br></pre></td></tr></table></figure><ul><li>单层搜索的过程</li></ul><p>回溯法的搜索过程就是一个树型结构的遍历过程，在如下图中，可以看出for循环用来横向遍历，递归的过程是纵向遍历。</p><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/20210712220308.jpg" alt=""></p><p>如此我们才遍历完图中的这棵树。</p><p>for循环每次从startIndex开始遍历，然后用path保存取到的节点i。</p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(startindex, n + <span class="number">1</span>): <span class="comment"># 控制树的横向遍历</span></span><br><span class="line">    path.append(i) <span class="comment"># 处理节点 </span></span><br><span class="line">    backtracking(n, k, i + <span class="number">1</span>); <span class="comment"># 递归：控制树的纵向遍历，注意下一层搜索要从i + 1开始</span></span><br><span class="line">    path.pop() <span class="comment"># 回溯，撤销处理的节点</span></span><br></pre></td></tr></table></figure><p>可以看出backtracking（递归函数）通过不断调用自己一直往深处遍历，总会遇到叶子节点，遇到了叶子节点就要返回。</p><p>backtracking的下面部分就是回溯的操作了，撤销本次处理的结果。</p><p>关键地方都讲完了，组合问题完整代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.res = []</span><br><span class="line">        self.path = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">combine</span>(<span class="params">self, n, k</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :type k: int</span></span><br><span class="line"><span class="string">        :rtype: List[List[int]]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.backtracking(n, k, <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> self.res</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">backtracking</span>(<span class="params">self, n, k, startindex</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(self.path) == k:</span><br><span class="line">            <span class="comment"># 注意此处传递的不能是引用。即append(a)不能传递引用，若是引用，a变，整体都变。</span></span><br><span class="line">            path = self.path[:]</span><br><span class="line">            self.res.append(path)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 也可下面(节省空间复杂度)</span></span><br><span class="line">            <span class="comment"># self.res.append(self.path[:])</span></span><br><span class="line">         </span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(startindex, n + <span class="number">1</span>):</span><br><span class="line">            self.path.append(i)</span><br><span class="line">            self.backtracking(n, k, i + <span class="number">1</span>)</span><br><span class="line">            self.path.pop()</span><br></pre></td></tr></table></figure><p>还记得我们在上文中给出的回溯法模板么？</p><p>如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">backtracking</span>(<span class="params">参数</span>):</span></span><br><span class="line">    <span class="keyword">if</span> 终止条件:</span><br><span class="line">        存放结果</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> (选择：本层集合中元素（树中节点孩子的数量就是集合的大小）):</span><br><span class="line">        处理节点</span><br><span class="line">        backtracking(路径，选择列表) <span class="comment"># 递归</span></span><br><span class="line">        回溯，撤销处理结果</span><br></pre></td></tr></table></figure><p><strong>「对比一下本题的代码，是不是发现有点像！」</strong> 所以有了这个模板，就有解题的大体方向，不至于毫无头绪。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>组合问题是回溯法解决的经典问题，我们开始的时候给大家列举一个很形象的例子，就是n为100，k为50的话，直接想法就需要50层for循环。</p><p>从而引出了回溯法就是解决这种k层for循环嵌套的问题。</p><p>然后进一步把回溯法的搜索过程抽象为树形结构，可以直观的看出搜索的过程。</p><p>接着用回溯法三部曲，逐步分析了函数参数、终止条件和单层搜索的过程。</p><p><strong>「本题其实是可以剪枝优化的，大家可以思考一下，具体如何剪枝」</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;回溯法求组合问题&quot;&gt;&lt;a href=&quot;#回溯法求组合问题&quot; class=&quot;headerlink&quot; title=&quot;回溯法求组合问题&quot;&gt;&lt;/a&gt;回溯法求组合问题&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/xxren821</summary>
      
    
    
    
    <category term="回溯法" scheme="https://xxren8218.github.io/categories/%E5%9B%9E%E6%BA%AF%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>01-回溯法的框架</title>
    <link href="https://xxren8218.github.io/20210712/01-%E5%9B%9E%E6%BA%AF%E6%B3%95%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A1%86%E6%9E%B6.html"/>
    <id>https://xxren8218.github.io/20210712/01-%E5%9B%9E%E6%BA%AF%E6%B3%95%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A1%86%E6%9E%B6.html</id>
    <published>2021-07-12T13:58:58.000Z</published>
    <updated>2021-07-15T14:11:45.973Z</updated>
    
    <content type="html"><![CDATA[<h2 id="回溯法概述"><a href="#回溯法概述" class="headerlink" title="回溯法概述"></a>回溯法概述</h2><h3 id="什么是回溯法？"><a href="#什么是回溯法？" class="headerlink" title="什么是回溯法？"></a>什么是回溯法？</h3><p>回溯法也可以叫做回溯搜索法，它是一种搜索的方式。回溯是递归的副产品，只要有递归就会有回溯。</p><p><strong>「所以以下讲解中，回溯函数也就是递归函数，指的都是一个函数」</strong>。</p><h3 id="回溯法的效率？"><a href="#回溯法的效率？" class="headerlink" title="回溯法的效率？"></a>回溯法的效率？</h3><p>回溯法的性能如何呢，这里要和大家说清楚了，<strong>「虽然回溯法很难，很不好理解，但是回溯法并不是什么高效的算法」</strong>。</p><p><strong>「因为回溯的本质是穷举，穷举所有可能，然后选出我们想要的答案」</strong>，如果想让回溯法高效一些，可以加一些剪枝的操作，但也改不了回溯法就是穷举的本质。</p><p>那么既然回溯法并不高效为什么还要用它呢？</p><p>因为没得选，一些问题能暴力搜出来就不错了，撑死了再剪枝一下，还没有更高效的解法。</p><p>此时大家应该好奇了，都什么问题，这么牛逼，只能暴力搜索。</p><h3 id="回溯法解决的问题？"><a href="#回溯法解决的问题？" class="headerlink" title="回溯法解决的问题？"></a>回溯法解决的问题？</h3><p>回溯法，一般可以解决如下几种问题：</p><ul><li>组合问题：N个数里面按一定规则找出k个数的集合</li><li>排列问题：N个数按一定规则全排列，有几种排列方式</li><li>切割问题：一个字符串按一定规则有几种切割方式</li><li>子集问题：一个N个数的集合里有多少符合条件的子集</li><li>棋盘问题：N皇后，解数独等等</li></ul><p><strong>「相信大家看着这些之后会发现，每个问题，都不简单！」</strong></p><p>另外，会有一些同学可能分不清什么是组合，什么是排列？</p><p><strong>「组合是不强调元素顺序的，排列是强调元素顺序」</strong>。</p><p>例如：{1, 2} 和 {2, 1} 在组合上，就是一个集合，因为不强调顺序，而要是排列的话，{1, 2} 和 {2, 1} 就是两个集合了。</p><p>记住组合无序，排列有序，就可以了。</p><h3 id="如何理解回溯法？"><a href="#如何理解回溯法？" class="headerlink" title="如何理解回溯法？"></a>如何理解回溯法？</h3><p><strong>「回溯法解决的问题都可以抽象为树形结构」</strong>，是的，我指的是所有回溯法的问题都可以抽象为树形结构！</p><p>因为回溯法解决的都是在集合中递归查找子集，<strong>「集合的大小就构成了树的宽度，递归的深度，都构成的树的深度」</strong>。</p><p>递归就要有终止条件，所以必然是一颗高度有限的树（N叉树）。</p><p>这块可能初学者还不太理解，后面的回溯算法解决的所有题目中，我都会强调这一点并画图举相应的例子，现在有一个印象就行。</p><h3 id="回溯法模板？"><a href="#回溯法模板？" class="headerlink" title="回溯法模板？"></a>回溯法模板？</h3><p>这里给出回溯算法模板。</p><p>前面我们说了递归三部曲，这里我再给大家列出回溯三部曲。</p><ul><li><p>回溯函数模板返回值以及参数</p><p>在回溯算法中，我的习惯是函数起名字为backtracking，这个起名大家随意。</p><p>回溯算法中函数返回值一般为void。</p><p>再来看一下参数，因为回溯算法需要的参数可不像二叉树递归的时候那么容易一次性确定下来，所以一般是先写逻辑，然后需要什么参数，就填什么参数。</p><p>但后面的回溯题目的讲解中，为了方便大家理解，我在一开始就帮大家把参数确定下来。</p><p>回溯函数伪代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">backtracking</span>(<span class="params">参数</span>):</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>回溯函数终止条件:</p><p>既然是树形结构，就知道遍历树形结构一定要有终止条件。</p><p>所以回溯也有要终止条件。</p><p>什么时候达到了终止条件，树中就可以看出，一般来说搜到叶子节点了，也就找到了满足条件的一条答案，把这个答案存放起来，并结束本层递归。</p><p>所以回溯函数终止条件伪代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 终止条件:</span><br><span class="line">    存放结果</span><br><span class="line">    <span class="keyword">return</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>回溯搜索的遍历过程</p><p>在上面我们提到了，回溯法一般是在集合中递归搜索，集合的大小构成了树的宽度，递归的深度构成的树的深度。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/20210712220015.png" alt=""></p><p>  回溯函数遍历过程伪代码如下：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> (选择：本层集合中元素（树中节点孩子的数量就是集合的大小）):</span><br><span class="line">    处理节点</span><br><span class="line">    backtracking(路径，选择列表)  <span class="comment"># 递归</span></span><br><span class="line">    回溯，撤销处理结果</span><br></pre></td></tr></table></figure><p>  for循环就是遍历集合区间，可以理解一个节点有多少个孩子，这个for循环就执行多少次。</p><p>  backtracking这里自己调用自己，实现递归。</p><p>  大家可以从图中看出<strong>「for循环可以理解是横向遍历，backtracking（递归）就是纵向遍历」</strong>，这样就把这棵树全遍历完了，一般来说，搜索叶子节点就是找的其中一个结果了。</p><ul><li><p>分析完过程，回溯算法模板框架如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">backtracking</span>(<span class="params">参数</span>):</span></span><br><span class="line">    <span class="keyword">if</span> 终止条件:</span><br><span class="line">        存放结果</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> (选择：本层集合中元素（树中节点孩子的数量就是集合的大小）):</span><br><span class="line">        处理节点</span><br><span class="line">        backtracking(路径，选择列表) <span class="comment"># 递归</span></span><br><span class="line">        回溯，撤销处理结果</span><br></pre></td></tr></table></figure></li></ul><p><strong>「这份模板很重要，后面做回溯法的题目都靠它了！」</strong></p><p>如果从来没有学过回溯算法的录友们，看到这里会有点懵，后面开始讲解具体题目的时候就会好一些了，已经做过回溯法题目的录友，看到这里应该会感同身受了。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本篇我们讲解了，什么是回溯算法，知道了回溯和递归是相辅相成的。</p><p>接着提到了回溯法的效率，回溯法其实就是暴力查找，并不是什么高效的算法。</p><p>然后列出了回溯法可以解决几类问题，可以看出每一类问题都不简单。</p><p>最后我们讲到回溯法解决的问题都可以抽象为树形结构（N叉树），并给出了回溯法的模板。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;回溯法概述&quot;&gt;&lt;a href=&quot;#回溯法概述&quot; class=&quot;headerlink&quot; title=&quot;回溯法概述&quot;&gt;&lt;/a&gt;回溯法概述&lt;/h2&gt;&lt;h3 id=&quot;什么是回溯法？&quot;&gt;&lt;a href=&quot;#什么是回溯法？&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="回溯法" scheme="https://xxren8218.github.io/categories/%E5%9B%9E%E6%BA%AF%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>13-合并两个二叉树</title>
    <link href="https://xxren8218.github.io/20210712/13-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E4%BA%8C%E5%8F%89%E6%A0%91.html"/>
    <id>https://xxren8218.github.io/20210712/13-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E4%BA%8C%E5%8F%89%E6%A0%91.html</id>
    <published>2021-07-12T13:55:46.000Z</published>
    <updated>2021-07-12T13:58:32.364Z</updated>
    
    <content type="html"><![CDATA[<h2 id="合并两个二叉树"><a href="#合并两个二叉树" class="headerlink" title="合并两个二叉树"></a>合并两个二叉树</h2><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/20210712215821.PNG" alt=""></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>相信这道题目很多同学疑惑的点是如何同时遍历两个二叉树呢？</p><p>其实和遍历一个树逻辑是一样的，只不过传入两个树的节点，同时操作。</p><h3 id="递归法"><a href="#递归法" class="headerlink" title="递归法"></a>递归法</h3><p>二叉树使用递归，就要想使用前中后哪种遍历方式？</p><p><strong>「本题使用哪种遍历都是可以的！」</strong></p><p>我们下面以前序遍历为例。</p><p>那么我们来按照递归三部曲来解决：</p><ol><li><strong>确定递归函数的参数和返回值：</strong></li></ol><p>首先那么要合入两个二叉树，那么参数至少是要传入两个二叉树的根节点，返回值就是合并之后二叉树的根节点。</p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mergeTrees</span>(<span class="params">t1, t2</span>):</span></span><br></pre></td></tr></table></figure><ol><li><strong>确定终止条件：</strong></li></ol><p>因为是传入了两个树，那么就有两个树遍历的节点t1 和 t2，如果t1 == None 了，两个树合并就应该是 t2 了（如果t2也为None也无所谓，合并之后就是None）。</p><p>反过来如果t2 == None，那么两个数合并就是t1（如果t1也为None也无所谓，合并之后就是NULL）。</p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> t1 == <span class="literal">None</span>: <span class="keyword">return</span> t2; <span class="comment"># 如果t1为空，合并之后就应该是t2</span></span><br><span class="line"><span class="keyword">if</span> t2 == <span class="literal">None</span>: <span class="keyword">return</span> t1; <span class="comment"># 如果t2为空，合并之后就应该是t1</span></span><br></pre></td></tr></table></figure><ol><li><strong>确定单层递归的逻辑：</strong></li></ol><p>单层递归的逻辑就比较好些了，这里我们用重复利用一下t1这个树，t1就是合并之后树的根节点（就是修改了原来树的结构）。</p><p>那么单层递归中，就要把两棵树的元素加到一起。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t1.val += t2.val</span><br></pre></td></tr></table></figure><p>接下来t1 的左子树是：合并 t1左子树 t2左子树之后的左子树。</p><p>t1 的右子树：是 合并 t1右子树 t2右子树之后的右子树。</p><p>最终t1就是合并之后的根节点。</p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">t1.left = mergeTrees(t1.left, t2.left)</span><br><span class="line">t1.right = mergeTrees(t1.right, t2.right)</span><br><span class="line"><span class="keyword">return</span> t1</span><br></pre></td></tr></table></figure><p>此时前序遍历，完整代码就写出来了，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeTrees</span>(<span class="params">self, root1, root2</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type root1: TreeNode</span></span><br><span class="line"><span class="string">        :type root2: TreeNode</span></span><br><span class="line"><span class="string">        :rtype: TreeNode</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root1: <span class="keyword">return</span> root2</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root2: <span class="keyword">return</span> root1</span><br><span class="line">        root1.val += root2.val</span><br><span class="line">        root1.left = self.mergeTrees(root1.left, root2.left)</span><br><span class="line">        root1.right = self.mergeTrees(root1.right, root2.right)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root1</span><br></pre></td></tr></table></figure><p>那么中序遍历也是可以的，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeTrees</span>(<span class="params">self, root1, root2</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type root1: TreeNode</span></span><br><span class="line"><span class="string">        :type root2: TreeNode</span></span><br><span class="line"><span class="string">        :rtype: TreeNode</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root1: <span class="keyword">return</span> root2</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root2: <span class="keyword">return</span> root1</span><br><span class="line">        </span><br><span class="line">        root1.left = self.mergeTrees(root1.left, root2.left)</span><br><span class="line">        root1.val += root2.val</span><br><span class="line">        root1.right = self.mergeTrees(root1.right, root2.right)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root1</span><br></pre></td></tr></table></figure><p>后序遍历依然可以，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeTrees</span>(<span class="params">self, root1, root2</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type root1: TreeNode</span></span><br><span class="line"><span class="string">        :type root2: TreeNode</span></span><br><span class="line"><span class="string">        :rtype: TreeNode</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root1: <span class="keyword">return</span> root2</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root2: <span class="keyword">return</span> root1</span><br><span class="line">        </span><br><span class="line">        root1.left = self.mergeTrees(root1.left, root2.left)</span><br><span class="line">        root1.right = self.mergeTrees(root1.right, root2.right)</span><br><span class="line">        root1.val += root2.val</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root1</span><br></pre></td></tr></table></figure><p><strong>「但是前序遍历是最好理解的，我建议大家用前序遍历来做就OK。」</strong></p><p>如上的方法修改了t1的结构，当然也可以不修改t1和t2的结构，重新定一个树。</p><p>不修改输入树的结构，前序遍历，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeTrees</span>(<span class="params">self, root1, root2</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type root1: TreeNode</span></span><br><span class="line"><span class="string">        :type root2: TreeNode</span></span><br><span class="line"><span class="string">        :rtype: TreeNode</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root1: <span class="keyword">return</span> root2</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root2: <span class="keyword">return</span> root1</span><br><span class="line">        </span><br><span class="line">        root = TreeNode(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        root.val = root1.val + root2.val</span><br><span class="line">        root.left = self.mergeTrees(root1.left, root2.left)    </span><br><span class="line">        root.right = self.mergeTrees(root1.right, root2.right)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure><h3 id="迭代法"><a href="#迭代法" class="headerlink" title="迭代法"></a>迭代法</h3><p>使用迭代法，如何同时处理两棵树呢？</p><p>思路: 求二叉树对称的时候就是把两个树的节点同时加入队列进行比较。这里也一样。</p><p>本题我们也使用队列，模拟的层序遍历，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeTrees</span>(<span class="params">self, root1, root2</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type root1: TreeNode</span></span><br><span class="line"><span class="string">        :type root2: TreeNode</span></span><br><span class="line"><span class="string">        :rtype: TreeNode</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root1: <span class="keyword">return</span> root2</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root2: <span class="keyword">return</span> root1</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 此时root1和root2比存在。</span></span><br><span class="line">        queue = [root1,root2]</span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            node1 = queue.pop(<span class="number">0</span>)</span><br><span class="line">            node2 = queue.pop(<span class="number">0</span>)</span><br><span class="line">            <span class="comment"># 此时两个节点一定不为空，val相加</span></span><br><span class="line">            node1.val += node2.val</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 如果两棵树左节点都不为空，加入队列</span></span><br><span class="line">            <span class="keyword">if</span> node1.left <span class="keyword">and</span> node2.left:</span><br><span class="line">                queue.append(node1.left)</span><br><span class="line">                queue.append(node2.left)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 如果两棵树右节点都不为空，加入队列</span></span><br><span class="line">            <span class="keyword">if</span> node1.right <span class="keyword">and</span> node2.right:</span><br><span class="line">                queue.append(node1.right)</span><br><span class="line">                queue.append(node2.right)</span><br><span class="line">                </span><br><span class="line"><span class="comment"># 当root1的左节点 为空 root2左节点不为空，就赋值过去</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node1.left <span class="keyword">and</span> node2.left:</span><br><span class="line">                node1.left = node2.left</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 当root1的右节点 为空 root2左节点不为空，就赋值过去</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node1.right <span class="keyword">and</span> node2.right:</span><br><span class="line">                node1.right = node2.right</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> root1</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>合并二叉树，也是二叉树操作的经典题目，如果没有接触过的话，其实并不简单，因为我们习惯了操作一个二叉树，一起操作两个二叉树，还会有点懵懵的。</p><p>这不是我们第一次操作两颗二叉树了，在<code>对称二叉树</code>中也一起操作了两棵二叉树。</p><p>迭代法中，一般一起操作两个树都是使用队列模拟类似层序遍历，同时处理两个树的节点，这种方式最好理解，如果用模拟递归的思路的话，要复杂一些。</p><p><strong>就酱，学到了的话，就分享给身边需要的同学吧！</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;合并两个二叉树&quot;&gt;&lt;a href=&quot;#合并两个二叉树&quot; class=&quot;headerlink&quot; title=&quot;合并两个二叉树&quot;&gt;&lt;/a&gt;合并两个二叉树&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/xxren8218/bl</summary>
      
    
    
    
    <category term="二叉树" scheme="https://xxren8218.github.io/categories/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
    
  </entry>
  
  <entry>
    <title>36-离线推荐处理&amp;实时推荐</title>
    <link href="https://xxren8218.github.io/20210710/36-%E7%A6%BB%E7%BA%BF%E6%8E%A8%E8%8D%90%E5%A4%84%E7%90%86-%E5%AE%9E%E6%97%B6%E6%8E%A8%E8%8D%90.html"/>
    <id>https://xxren8218.github.io/20210710/36-%E7%A6%BB%E7%BA%BF%E6%8E%A8%E8%8D%90%E5%A4%84%E7%90%86-%E5%AE%9E%E6%97%B6%E6%8E%A8%E8%8D%90.html</id>
    <published>2021-07-10T14:50:29.000Z</published>
    <updated>2021-07-10T14:51:29.256Z</updated>
    
    <content type="html"><![CDATA[<h2 id="离线推荐数据缓存-amp-实时推荐"><a href="#离线推荐数据缓存-amp-实时推荐" class="headerlink" title="离线推荐数据缓存 &amp; 实时推荐"></a>离线推荐数据缓存 &amp; 实时推荐</h2><h3 id="1-1-离线数据缓存之离线召回集"><a href="#1-1-离线数据缓存之离线召回集" class="headerlink" title="1.1 离线数据缓存之离线召回集"></a>1.1 离线数据缓存之离线召回集</h3><ul><li><p>这里主要是利用我们前面训练的ALS模型进行协同过滤召回，但是注意，我们ALS模型召回的是用户最感兴趣的类别，而我们需要的是用户可能感兴趣的广告的集合，因此我们还需要根据召回的类别匹配出对应的广告。</p><p>所以这里我们除了需要我们训练的ALS模型以外，还需要有一个广告和类别的对应关系。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从HDFS中加载广告基本信息数据，返回spark dafaframe对象</span></span><br><span class="line">df = spark.read.csv(<span class="string">&quot;hdfs://localhost:8020/csv/ad_feature.csv&quot;</span>, header=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意：由于本数据集中存在NULL字样的数据，无法直接设置schema，只能先将NULL类型的数据处理掉，然后进行类型转换</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pyspark.sql.types <span class="keyword">import</span> StructType, StructField, IntegerType, FloatType</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换掉NULL字符串，替换掉</span></span><br><span class="line">df = df.replace(<span class="string">&quot;NULL&quot;</span>, <span class="string">&quot;-1&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更改df表结构：更改列类型和列名称</span></span><br><span class="line">ad_feature_df = df.\</span><br><span class="line">    withColumn(<span class="string">&quot;adgroup_id&quot;</span>, df.adgroup_id.cast(IntegerType())).withColumnRenamed(<span class="string">&quot;adgroup_id&quot;</span>, <span class="string">&quot;adgroupId&quot;</span>).\</span><br><span class="line">    withColumn(<span class="string">&quot;cate_id&quot;</span>, df.cate_id.cast(IntegerType())).withColumnRenamed(<span class="string">&quot;cate_id&quot;</span>, <span class="string">&quot;cateId&quot;</span>).\</span><br><span class="line">    withColumn(<span class="string">&quot;campaign_id&quot;</span>, df.campaign_id.cast(IntegerType())).withColumnRenamed(<span class="string">&quot;campaign_id&quot;</span>, <span class="string">&quot;campaignId&quot;</span>).\</span><br><span class="line">    withColumn(<span class="string">&quot;customer&quot;</span>, df.customer.cast(IntegerType())).withColumnRenamed(<span class="string">&quot;customer&quot;</span>, <span class="string">&quot;customerId&quot;</span>).\</span><br><span class="line">    withColumn(<span class="string">&quot;brand&quot;</span>, df.brand.cast(IntegerType())).withColumnRenamed(<span class="string">&quot;brand&quot;</span>, <span class="string">&quot;brandId&quot;</span>).\</span><br><span class="line">    withColumn(<span class="string">&quot;price&quot;</span>, df.price.cast(FloatType()))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里我们只需要adgroupId、和cateId</span></span><br><span class="line">_ = ad_feature_df.select(<span class="string">&quot;adgroupId&quot;</span>, <span class="string">&quot;cateId&quot;</span>)</span><br><span class="line"><span class="comment"># 由于这里数据集其实很少，所以我们再直接转成Pandas dataframe来处理，把数据载入内存</span></span><br><span class="line">pdf = _.toPandas()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 手动释放一些内存</span></span><br><span class="line"><span class="keyword">del</span> df</span><br><span class="line"><span class="keyword">del</span> ad_feature_df</span><br><span class="line"><span class="keyword">del</span> _</span><br><span class="line"><span class="keyword">import</span> gc</span><br><span class="line">gc.collect()</span><br></pre></td></tr></table></figure><ul><li>根据指定的类别找到对应的广告</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">pdf.where(pdf.cateId==<span class="number">11156</span>).dropna().adgroupId <span class="comment"># 举个例子，随便找个cateId看看他的adgroupId都有哪些。</span></span><br><span class="line"></span><br><span class="line">np.random.choice(pdf.where(pdf.cateId==<span class="number">11156</span>).dropna().adgroupId.astype(np.int64), <span class="number">200</span>) <span class="comment"># 在召回的用户感兴趣的类别上随机挑选200个物品。</span></span><br></pre></td></tr></table></figure><p>显示结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">313       138953.0</span><br><span class="line">314       467512.0</span><br><span class="line">1661      140008.0</span><br><span class="line">1666      238772.0</span><br><span class="line">1669      237471.0</span><br><span class="line">1670      238761.0</span><br><span class="line">...   </span><br><span class="line">843456    352273.0</span><br><span class="line">846728    818681.0</span><br><span class="line">846729    838953.0</span><br><span class="line">846810    845337.0</span><br><span class="line">Name: adgroupId, Length: 731, dtype: float64</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>利用ALS模型进行类别的召回</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加载als模型，注意必须先有spark上下文管理器，即sparkContext，但这里sparkSession创建后，自动创建了sparkContext</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pyspark.ml.recommendation <span class="keyword">import</span> ALSModel</span><br><span class="line"><span class="comment"># 从hdfs加载之前存储的模型</span></span><br><span class="line">als_model = ALSModel.load(<span class="string">&quot;hdfs://localhost:8020/models/userCateRatingALSModel.obj&quot;</span>)</span><br><span class="line"><span class="comment"># 返回模型中关于用户的所有属性   df:   id   features</span></span><br><span class="line">als_model.userFactors</span><br></pre></td></tr></table></figure><p>显示结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DataFrame[id: int, features: array&lt;float&gt;]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">cateId_df = pd.DataFrame(pdf.cateId.unique(),columns=[<span class="string">&quot;cateId&quot;</span>])</span><br><span class="line">cateId_df</span><br></pre></td></tr></table></figure><p>显示结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">cateId</span><br><span class="line">01</span><br><span class="line">12</span><br><span class="line">23</span><br><span class="line">34</span><br><span class="line">45</span><br><span class="line">56</span><br><span class="line">67</span><br><span class="line">......</span><br><span class="line">676612948</span><br><span class="line">676712955</span><br><span class="line">676812960</span><br><span class="line">6769 rows × 1 columns</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cateId_df.insert(<span class="number">0</span>, <span class="string">&quot;userId&quot;</span>, np.array([<span class="number">8</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6769</span>)]))</span><br><span class="line">cateId_df</span><br></pre></td></tr></table></figure><p>显示结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> userId cateId</span><br><span class="line">081</span><br><span class="line">182</span><br><span class="line">283</span><br><span class="line">384</span><br><span class="line">485</span><br><span class="line">.........</span><br><span class="line">6766812948</span><br><span class="line">6767812955</span><br><span class="line">6768812960</span><br><span class="line">6769 rows × 2 columns</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>传入 userid、cataId的df，对应预测值进行排序（也可以用之前的recommandForAllusers，这样是为了另外一种ALS的用法）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">als_model.transform(spark.createDataFrame(cateId_df)).sort(<span class="string">&quot;prediction&quot;</span>, ascending=<span class="literal">False</span>).na.drop().show()</span><br></pre></td></tr></table></figure><p>显示结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">+------+------+----------+</span><br><span class="line">|userId|cateId|prediction|</span><br><span class="line">+------+------+----------+</span><br><span class="line">|     8|  7214|  9.917084|</span><br><span class="line">|     8|   877|  7.479664|</span><br><span class="line">|     8|  7266| 7.4762917|</span><br><span class="line">|     8| 10856| 7.3395424|</span><br><span class="line">|     8|  4766|  7.149538|</span><br><span class="line">|     8|  7282| 6.6835284|</span><br><span class="line">|     8|  7270| 6.2145095|</span><br><span class="line">|     8|   201| 6.0623236|</span><br><span class="line">|     8|  4267| 5.9155636|</span><br><span class="line">|     8|  7267|  5.838009|</span><br><span class="line">|     8|  5392| 5.6882005|</span><br><span class="line">|     8|  6261| 5.6804466|</span><br><span class="line">|     8|  6306| 5.2992325|</span><br><span class="line">|     8| 11050|  5.245261|</span><br><span class="line">|     8|  8655| 5.1701374|</span><br><span class="line">|     8|  4610|  5.139578|</span><br><span class="line">|     8|   932|   5.12694|</span><br><span class="line">|     8| 12276| 5.0776596|</span><br><span class="line">|     8|  8071|  4.979195|</span><br><span class="line">|     8|  6580| 4.8523283|</span><br><span class="line">+------+------+----------+</span><br><span class="line">only showing top 20 rows</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 存储用户召回，使用redis第9号数据库，类型：sets类型</span></span><br><span class="line">client = redis.StrictRedis(host=<span class="string">&quot;192.168.199.188&quot;</span>, port=<span class="number">6379</span>, db=<span class="number">9</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> als_model.userFactors.select(<span class="string">&quot;id&quot;</span>).collect():</span><br><span class="line">    </span><br><span class="line">    userId = r.<span class="built_in">id</span></span><br><span class="line">    </span><br><span class="line">    cateId_df = pd.DataFrame(pdf.cateId.unique(),columns=[<span class="string">&quot;cateId&quot;</span>])</span><br><span class="line">    cateId_df.insert(<span class="number">0</span>, <span class="string">&quot;userId&quot;</span>, np.array([userId <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6769</span>)]))</span><br><span class="line">    ret = <span class="built_in">set</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 利用模型，传入datasets(userId, cateId)，这里控制了userId一样，所以相当于是在求某用户对所有分类的兴趣程度（评分）</span></span><br><span class="line">    cateId_list = als_model.transform(spark.createDataFrame(cateId_df)).sort(<span class="string">&quot;prediction&quot;</span>, ascending=<span class="literal">False</span>).na.drop()</span><br><span class="line">    <span class="comment"># 从前20个分类中选出500个进行召回</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> cateId_list.head(<span class="number">20</span>):</span><br><span class="line">        need = <span class="number">500</span> - <span class="built_in">len</span>(ret)    <span class="comment"># 如果不足500个，那么随机选出need个广告</span></span><br><span class="line">        ret = ret.union(np.random.choice(pdf.where(pdf.cateId==i.cateId).adgroupId.dropna().astype(np.int64), need))</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(ret) &gt;= <span class="number">500</span>:    <span class="comment"># 如果达到500个则退出</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    client.sadd(userId, *ret)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 如果redis所在机器，内存不足，会抛出异常</span></span><br></pre></td></tr></table></figure><h3 id="2-1-离线数据缓存之离线特征"><a href="#2-1-离线数据缓存之离线特征" class="headerlink" title="2.1 离线数据缓存之离线特征"></a>2.1 离线数据缓存之离线特征</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># &quot;pid&quot;, 广告资源位，属于场景特征，也就是说，每一种广告通常是可以防止在多种资源外下的</span></span><br><span class="line"><span class="comment"># 因此这里对于pid，应该是由广告系统发起推荐请求时，向推荐系统明确要推荐的用户是谁，以及对应的资源位，或者说有哪些</span></span><br><span class="line"><span class="comment"># 这样如果有多个资源位，那么每个资源位都会对应相应的一个推荐列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要进行缓存的特征值</span></span><br><span class="line"></span><br><span class="line">feature_cols_from_ad = [</span><br><span class="line">    <span class="string">&quot;price&quot;</span>    <span class="comment"># 来自广告基本信息中</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户特征</span></span><br><span class="line">feature_cols_from_user = [</span><br><span class="line">    <span class="string">&quot;cms_group_id&quot;</span>,</span><br><span class="line">    <span class="string">&quot;final_gender_code&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age_level&quot;</span>,</span><br><span class="line">    <span class="string">&quot;shopping_level&quot;</span>,</span><br><span class="line">    <span class="string">&quot;occupation&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pvalue_level&quot;</span>,</span><br><span class="line">    <span class="string">&quot;new_user_class_level&quot;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>从HDFS中加载广告基本信息数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">_ad_feature_df = spark.read.csv(<span class="string">&quot;hdfs://localhost:9000/datasets/ad_feature.csv&quot;</span>, header=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更改表结构，转换为对应的数据类型</span></span><br><span class="line"><span class="keyword">from</span> pyspark.sql.types <span class="keyword">import</span> StructType, StructField, IntegerType, FloatType</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换掉NULL字符串</span></span><br><span class="line">_ad_feature_df = _ad_feature_df.replace(<span class="string">&quot;NULL&quot;</span>, <span class="string">&quot;-1&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 更改df表结构：更改列类型和列名称</span></span><br><span class="line">ad_feature_df = _ad_feature_df.\</span><br><span class="line">    withColumn(<span class="string">&quot;adgroup_id&quot;</span>, _ad_feature_df.adgroup_id.cast(IntegerType())).withColumnRenamed(<span class="string">&quot;adgroup_id&quot;</span>, <span class="string">&quot;adgroupId&quot;</span>).\</span><br><span class="line">    withColumn(<span class="string">&quot;cate_id&quot;</span>, _ad_feature_df.cate_id.cast(IntegerType())).withColumnRenamed(<span class="string">&quot;cate_id&quot;</span>, <span class="string">&quot;cateId&quot;</span>).\</span><br><span class="line">    withColumn(<span class="string">&quot;campaign_id&quot;</span>, _ad_feature_df.campaign_id.cast(IntegerType())).withColumnRenamed(<span class="string">&quot;campaign_id&quot;</span>, <span class="string">&quot;campaignId&quot;</span>).\</span><br><span class="line">    withColumn(<span class="string">&quot;customer&quot;</span>, _ad_feature_df.customer.cast(IntegerType())).withColumnRenamed(<span class="string">&quot;customer&quot;</span>, <span class="string">&quot;customerId&quot;</span>).\</span><br><span class="line">    withColumn(<span class="string">&quot;brand&quot;</span>, _ad_feature_df.brand.cast(IntegerType())).withColumnRenamed(<span class="string">&quot;brand&quot;</span>, <span class="string">&quot;brandId&quot;</span>).\</span><br><span class="line">    withColumn(<span class="string">&quot;price&quot;</span>, _ad_feature_df.price.cast(FloatType()))</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foreachPartition</span>(<span class="params">partition</span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">import</span> redis</span><br><span class="line">    <span class="keyword">import</span> json</span><br><span class="line">    client = redis.StrictRedis(host=<span class="string">&quot;192.168.199.188&quot;</span>, port=<span class="number">6379</span>, db=<span class="number">10</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> partition:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;price&quot;</span>: r.price</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># 转成json字符串再保存，能保证数据再次倒出来时，能有效的转换成python类型</span></span><br><span class="line">        client.hset(<span class="string">&quot;ad_features&quot;</span>, r.adgroupId, json.dumps(data))</span><br><span class="line">        </span><br><span class="line">ad_feature_df.foreachPartition(foreachPartition)</span><br></pre></td></tr></table></figure><ul><li>从HDFS加载用户基本信息数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark.sql.types <span class="keyword">import</span> StructType, StructField, StringType, IntegerType, LongType, FloatType</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建表结构schema对象</span></span><br><span class="line">schema = StructType([</span><br><span class="line">    StructField(<span class="string">&quot;userId&quot;</span>, IntegerType()),</span><br><span class="line">    StructField(<span class="string">&quot;cms_segid&quot;</span>, IntegerType()),</span><br><span class="line">    StructField(<span class="string">&quot;cms_group_id&quot;</span>, IntegerType()),</span><br><span class="line">    StructField(<span class="string">&quot;final_gender_code&quot;</span>, IntegerType()),</span><br><span class="line">    StructField(<span class="string">&quot;age_level&quot;</span>, IntegerType()),</span><br><span class="line">    StructField(<span class="string">&quot;pvalue_level&quot;</span>, IntegerType()),</span><br><span class="line">    StructField(<span class="string">&quot;shopping_level&quot;</span>, IntegerType()),</span><br><span class="line">    StructField(<span class="string">&quot;occupation&quot;</span>, IntegerType()),</span><br><span class="line">    StructField(<span class="string">&quot;new_user_class_level&quot;</span>, IntegerType())</span><br><span class="line">])</span><br><span class="line"><span class="comment"># 利用schema从hdfs加载</span></span><br><span class="line">user_profile_df = spark.read.csv(<span class="string">&quot;hdfs://localhost:8020/csv/user_profile.csv&quot;</span>, header=<span class="literal">True</span>, schema=schema)</span><br><span class="line">user_profile_df</span><br></pre></td></tr></table></figure><p>显示结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DataFrame[userId: int, cms_segid: int, cms_group_id: int, final_gender_code: int, age_level: int, pvalue_level: int, shopping_level: int, occupation: int, new_user_class_level: int]</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foreachPartition2</span>(<span class="params">partition</span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">import</span> redis</span><br><span class="line">    <span class="keyword">import</span> json</span><br><span class="line">    client = redis.StrictRedis(host=<span class="string">&quot;192.168.199.188&quot;</span>, port=<span class="number">6379</span>, db=<span class="number">10</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> partition:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;cms_group_id&quot;</span>: r.cms_group_id,</span><br><span class="line">            <span class="string">&quot;final_gender_code&quot;</span>: r.final_gender_code,</span><br><span class="line">            <span class="string">&quot;age_level&quot;</span>: r.age_level,</span><br><span class="line">            <span class="string">&quot;shopping_level&quot;</span>: r.shopping_level,</span><br><span class="line">            <span class="string">&quot;occupation&quot;</span>: r.occupation,</span><br><span class="line">            <span class="string">&quot;pvalue_level&quot;</span>: r.pvalue_level,</span><br><span class="line">            <span class="string">&quot;new_user_class_level&quot;</span>: r.new_user_class_level</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># 转成json字符串再保存，能保证数据再次倒出来时，能有效的转换成python类型</span></span><br><span class="line">        client.hset(<span class="string">&quot;user_features1&quot;</span>, r.userId, json.dumps(data))</span><br><span class="line">        </span><br><span class="line">user_profile_df.foreachPartition(foreachPartition2)</span><br></pre></td></tr></table></figure><h2 id="二-实时产生推荐结果"><a href="#二-实时产生推荐结果" class="headerlink" title="二. 实时产生推荐结果"></a>二. 实时产生推荐结果</h2><h3 id="2-1-推荐任务处理"><a href="#2-1-推荐任务处理" class="headerlink" title="2.1 推荐任务处理"></a>2.1 推荐任务处理</h3><ul><li>CTR预测模型 + 特征 ==&gt; 预测结果 ==&gt; TOP-N列表</li><li>数据缓存取出之后 还原成对应的onehot编码</li><li>热编码中：”pvalue_level”特征对应关系:</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+------------+----------------------+</span><br><span class="line">|pvalue_level|pl_onehot_feature     |</span><br><span class="line">+------------+----------------------+</span><br><span class="line">|          -1|                   0.0|</span><br><span class="line">|           3|                   3.0|</span><br><span class="line">|           1|                   2.0|</span><br><span class="line">|           2|                   1.0|</span><br><span class="line">+------------+----------------------+</span><br></pre></td></tr></table></figure><ul><li>“new_user_class_level”的特征对应关系：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+--------------------+------------------------+</span><br><span class="line">|new_user_class_level|nucl_onehot_feature     |</span><br><span class="line">+--------------------+------------------------+</span><br><span class="line">|                  -1|                     0.0|</span><br><span class="line">|                   3|                     2.0|</span><br><span class="line">|                   1|                     4.0|</span><br><span class="line">|                   4|                     3.0|</span><br><span class="line">|                   2|                     1.0|</span><br><span class="line">+--------------------+------------------------+</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pvalue_level_rela = &#123;-<span class="number">1</span>: <span class="number">0</span>, <span class="number">3</span>:<span class="number">3</span>, <span class="number">1</span>:<span class="number">2</span>, <span class="number">2</span>:<span class="number">1</span>&#125;</span><br><span class="line">new_user_class_level_rela = &#123;-<span class="number">1</span>:<span class="number">0</span>, <span class="number">3</span>:<span class="number">2</span>, <span class="number">1</span>:<span class="number">4</span>, <span class="number">4</span>:<span class="number">3</span>, <span class="number">2</span>:<span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure><ul><li>“cms_group_id”特征对应关系：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">+------------+-------------------------+</span><br><span class="line">|cms_group_id|min(cms_group_id_feature)|</span><br><span class="line">+------------+-------------------------+</span><br><span class="line">|           7|                      9.0|</span><br><span class="line">|          11|                      6.0|</span><br><span class="line">|           3|                      0.0|</span><br><span class="line">|           8|                      8.0|</span><br><span class="line">|           0|                     12.0|</span><br><span class="line">|           5|                      3.0|</span><br><span class="line">|           6|                     10.0|</span><br><span class="line">|           9|                      5.0|</span><br><span class="line">|           1|                      7.0|</span><br><span class="line">|          10|                      4.0|</span><br><span class="line">|           4|                      1.0|</span><br><span class="line">|          12|                     11.0|</span><br><span class="line">|           2|                      2.0|</span><br><span class="line">+------------+-------------------------+</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">cms_group_id_rela &#x3D; &#123;</span><br><span class="line">    7: 9,</span><br><span class="line">    11: 6,</span><br><span class="line">    3: 0,</span><br><span class="line">    8: 8,</span><br><span class="line">    0: 12,</span><br><span class="line">    5: 3,</span><br><span class="line">    6: 10,</span><br><span class="line">    9: 5,</span><br><span class="line">    1: 7,</span><br><span class="line">    10: 4,</span><br><span class="line">    4: 1,</span><br><span class="line">    12: 11,</span><br><span class="line">    2: 2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>“final_gender_code”特征对应关系：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+-----------------+------------------------------+</span><br><span class="line">|final_gender_code|min(final_gender_code_feature)|</span><br><span class="line">+-----------------+------------------------------+</span><br><span class="line">|                1|                           1.0|</span><br><span class="line">|                2|                           0.0|</span><br><span class="line">+-----------------+------------------------------+</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">final_gender_code_rela &#x3D; &#123;1:1, 2:0&#125;</span><br></pre></td></tr></table></figure><ul><li>“age_level”特征对应关系：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+---------+----------------------+</span><br><span class="line">|age_level|min(age_level_feature)|</span><br><span class="line">+---------+----------------------+</span><br><span class="line">|        3|                   0.0|</span><br><span class="line">|        0|                   6.0|</span><br><span class="line">|        5|                   2.0|</span><br><span class="line">|        6|                   5.0|</span><br><span class="line">|        1|                   4.0|</span><br><span class="line">|        4|                   1.0|</span><br><span class="line">|        2|                   3.0|</span><br><span class="line">+---------+----------------------+</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">age_level_rela &#x3D; &#123;3:0, 0:6, 5:2, 6:5, 1:4, 4:1, 2:3&#125;</span><br></pre></td></tr></table></figure><ul><li>“shopping_level”特征对应关系：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">|shopping_level|min(shopping_level_feature)|</span><br><span class="line">+--------------+---------------------------+</span><br><span class="line">|             3|                        0.0|</span><br><span class="line">|             1|                        2.0|</span><br><span class="line">|             2|                        1.0|</span><br><span class="line">+--------------+---------------------------+</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shopping_level_rela &#x3D; &#123;3:0, 1:2, 2:1&#125;</span><br></pre></td></tr></table></figure><ul><li>“occupation”特征对应关系：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+----------+-----------------------+</span><br><span class="line">|occupation|min(occupation_feature)|</span><br><span class="line">+----------+-----------------------+</span><br><span class="line">|         0|                    0.0|</span><br><span class="line">|         1|                    1.0|</span><br><span class="line">+----------+-----------------------+</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">occupation_rela &#x3D; &#123;0:0, 1:1&#125;</span><br><span class="line"></span><br><span class="line">pid_rela &#x3D; &#123;</span><br><span class="line">    &quot;430548_1007&quot;: 0, </span><br><span class="line">    &quot;430549_1007&quot;: 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>特征获取</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> pyspark.ml.linalg <span class="keyword">import</span> DenseVector</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_datasets</span>(<span class="params">userId, pid</span>):</span></span><br><span class="line">    client_of_recall = redis.StrictRedis(host=<span class="string">&quot;192.168.199.88&quot;</span>, port=<span class="number">6379</span>, db=<span class="number">9</span>)</span><br><span class="line">    client_of_features = redis.StrictRedis(host=<span class="string">&quot;192.168.199.88&quot;</span>, port=<span class="number">6379</span>, db=<span class="number">10</span>)</span><br><span class="line">    <span class="comment"># 获取用户特征</span></span><br><span class="line">    user_feature = json.loads(client_of_features.hget(<span class="string">&quot;user_features&quot;</span>, userId))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 获取用户召回集</span></span><br><span class="line">    recall_sets = client_of_recall.smembers(userId)</span><br><span class="line">    </span><br><span class="line">    result = []</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 遍历召回集</span></span><br><span class="line">    <span class="keyword">for</span> adgroupId <span class="keyword">in</span> recall_sets:</span><br><span class="line">        adgroupId = <span class="built_in">int</span>(adgroupId)</span><br><span class="line">        <span class="comment"># 获取该广告的特征值</span></span><br><span class="line">        ad_feature = json.loads(client_of_features.hget(<span class="string">&quot;ad_features&quot;</span>, adgroupId))</span><br><span class="line">        </span><br><span class="line">        features = &#123;&#125;</span><br><span class="line">        features.update(user_feature)</span><br><span class="line">        features.update(ad_feature)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> k,v <span class="keyword">in</span> features.items():</span><br><span class="line">            <span class="keyword">if</span> v <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                features[k] = -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">        features_col = [</span><br><span class="line">            <span class="comment"># 特征值</span></span><br><span class="line">            <span class="string">&quot;price&quot;</span>,</span><br><span class="line">            <span class="string">&quot;cms_group_id&quot;</span>,</span><br><span class="line">            <span class="string">&quot;final_gender_code&quot;</span>,</span><br><span class="line">            <span class="string">&quot;age_level&quot;</span>,</span><br><span class="line">            <span class="string">&quot;shopping_level&quot;</span>,</span><br><span class="line">            <span class="string">&quot;occupation&quot;</span>,</span><br><span class="line">            <span class="string">&quot;pid&quot;</span>, </span><br><span class="line">            <span class="string">&quot;pvalue_level&quot;</span>,</span><br><span class="line">            <span class="string">&quot;new_user_class_level&quot;</span></span><br><span class="line">        ]</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        &quot;cms_group_id&quot;, 类别型特征，约13个分类 ==&gt; 13维</span></span><br><span class="line"><span class="string">        &quot;final_gender_code&quot;, 类别型特征，2个分类 ==&gt; 2维</span></span><br><span class="line"><span class="string">        &quot;age_level&quot;, 类别型特征，7个分类 ==&gt;7维</span></span><br><span class="line"><span class="string">        &quot;shopping_level&quot;, 类别型特征，3个分类 ==&gt; 3维</span></span><br><span class="line"><span class="string">        &quot;occupation&quot;, 类别型特征，2个分类 ==&gt; 2维</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">        price = <span class="built_in">float</span>(features[<span class="string">&quot;price&quot;</span>])</span><br><span class="line"></span><br><span class="line">        pid_value = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]<span class="comment">#[0,0]</span></span><br><span class="line">        cms_group_id_value = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">13</span>)]</span><br><span class="line">        final_gender_code_value = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]</span><br><span class="line">        age_level_value = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>)]</span><br><span class="line">        shopping_level_value = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">        occupation_value = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]</span><br><span class="line">        pvalue_level_value = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">        new_user_class_level_value = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line"></span><br><span class="line">        pid_value[pid_rela[pid]] = <span class="number">1</span></span><br><span class="line">        cms_group_id_value[cms_group_id_rela[<span class="built_in">int</span>(features[<span class="string">&quot;cms_group_id&quot;</span>])]] = <span class="number">1</span></span><br><span class="line">        final_gender_code_value[final_gender_code_rela[<span class="built_in">int</span>(features[<span class="string">&quot;final_gender_code&quot;</span>])]] = <span class="number">1</span></span><br><span class="line">        age_level_value[age_level_rela[<span class="built_in">int</span>(features[<span class="string">&quot;age_level&quot;</span>])]] = <span class="number">1</span></span><br><span class="line">        shopping_level_value[shopping_level_rela[<span class="built_in">int</span>(features[<span class="string">&quot;shopping_level&quot;</span>])]] = <span class="number">1</span></span><br><span class="line">        occupation_value[occupation_rela[<span class="built_in">int</span>(features[<span class="string">&quot;occupation&quot;</span>])]] = <span class="number">1</span></span><br><span class="line">        pvalue_level_value[pvalue_level_rela[<span class="built_in">int</span>(features[<span class="string">&quot;pvalue_level&quot;</span>])]] = <span class="number">1</span></span><br><span class="line">        new_user_class_level_value[new_user_class_level_rela[<span class="built_in">int</span>(features[<span class="string">&quot;new_user_class_level&quot;</span>])]] = <span class="number">1</span></span><br><span class="line"><span class="comment">#         print(pid_value)</span></span><br><span class="line"><span class="comment">#         print(cms_group_id_value)</span></span><br><span class="line"><span class="comment">#         print(final_gender_code_value)</span></span><br><span class="line"><span class="comment">#         print(age_level_value)</span></span><br><span class="line"><span class="comment">#         print(shopping_level_value)</span></span><br><span class="line"><span class="comment">#         print(occupation_value)</span></span><br><span class="line"><span class="comment">#         print(pvalue_level_value)</span></span><br><span class="line"><span class="comment">#         print(new_user_class_level_value)</span></span><br><span class="line">        </span><br><span class="line">        vector = DenseVector([price] + pid_value + cms_group_id_value + final_gender_code_value\</span><br><span class="line">        + age_level_value + shopping_level_value + occupation_value + pvalue_level_value + new_user_class_level_value)</span><br><span class="line">        </span><br><span class="line">        result.append((userId, adgroupId, vector))</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="comment"># create_datasets(88, &quot;430548_1007&quot;)</span></span><br></pre></td></tr></table></figure><ul><li>载入训练好的模型</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from pyspark.ml.classification import LogisticRegressionModel</span><br><span class="line">CTR_model &#x3D; LogisticRegressionModel.load(&quot;hdfs:&#x2F;&#x2F;localhost:9000&#x2F;models&#x2F;CTRModel_AllOneHot.obj&quot;)</span><br><span class="line">pdf &#x3D; pd.DataFrame(create_datasets(8, &quot;430548_1007&quot;), columns&#x3D;[&quot;userId&quot;, &quot;adgroupId&quot;, &quot;features&quot;])</span><br><span class="line">datasets &#x3D; spark.createDataFrame(pdf)</span><br><span class="line">datasets.show()</span><br></pre></td></tr></table></figure><p>显示结果:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">+------+---------+--------------------+</span><br><span class="line">|userId|adgroupId|            features|</span><br><span class="line">+------+---------+--------------------+</span><br><span class="line">|     8|   445914|[9.89999961853027...|</span><br><span class="line">|     8|   258252|[7.59999990463256...|</span><br><span class="line">|     8|   129682|[8.5,1.0,0.0,1.0,...|</span><br><span class="line">|     8|   763027|[68.0,1.0,0.0,1.0...|</span><br><span class="line">|     8|   292027|[16.0,1.0,0.0,1.0...|</span><br><span class="line">|     8|   430023|[34.2000007629394...|</span><br><span class="line">|     8|   133457|[169.0,1.0,0.0,1....|</span><br><span class="line">|     8|   816999|[5.0,1.0,0.0,1.0,...|</span><br><span class="line">|     8|   221714|[4.80000019073486...|</span><br><span class="line">|     8|   186334|[106.0,1.0,0.0,1....|</span><br><span class="line">|     8|   169717|[2.20000004768371...|</span><br><span class="line">|     8|    31314|[15.8000001907348...|</span><br><span class="line">|     8|   815312|[2.29999995231628...|</span><br><span class="line">|     8|   199445|[5.0,1.0,0.0,1.0,...|</span><br><span class="line">|     8|   746178|[16.7999992370605...|</span><br><span class="line">|     8|   290950|[6.5,1.0,0.0,1.0,...|</span><br><span class="line">|     8|   221585|[18.5,1.0,0.0,1.0...|</span><br><span class="line">|     8|   692672|[47.0,1.0,0.0,1.0...|</span><br><span class="line">|     8|   797982|[33.0,1.0,0.0,1.0...|</span><br><span class="line">|     8|   815219|[2.40000009536743...|</span><br><span class="line">+------+---------+--------------------+</span><br><span class="line">only showing top 20 rows</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">prediction &#x3D; CTR_model.transform(datasets).sort(&quot;probability&quot;)</span><br><span class="line">prediction.show()</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">+------+---------+--------------------+--------------------+--------------------+----------+</span><br><span class="line">|userId|adgroupId|            features|       rawPrediction|         probability|prediction|</span><br><span class="line">+------+---------+--------------------+--------------------+--------------------+----------+</span><br><span class="line">|     8|   631204|[19888.0,1.0,0.0,...|[2.69001234046578...|[0.93643471623189...|       0.0|</span><br><span class="line">|     8|   583215|[3750.0,1.0,0.0,1...|[2.69016170680037...|[0.93644360664433...|       0.0|</span><br><span class="line">|     8|   275819|[3280.0,1.0,0.0,1...|[2.69016605691669...|[0.93644386554961...|       0.0|</span><br><span class="line">|     8|   401433|[1200.0,1.0,0.0,1...|[2.69018530849532...|[0.93644501133142...|       0.0|</span><br><span class="line">|     8|    29466|[640.0,1.0,0.0,1....|[2.69019049161265...|[0.93644531980785...|       0.0|</span><br><span class="line">|     8|   173327|[356.0,1.0,0.0,1....|[2.69019312019358...|[0.93644547624893...|       0.0|</span><br><span class="line">|     8|   241402|[269.0,1.0,0.0,1....|[2.69019392542787...|[0.93644552417271...|       0.0|</span><br><span class="line">|     8|   351366|[246.0,1.0,0.0,1....|[2.69019413830591...|[0.93644553684221...|       0.0|</span><br><span class="line">|     8|   229827|[238.0,1.0,0.0,1....|[2.69019421235044...|[0.93644554124900...|       0.0|</span><br><span class="line">|     8|   164807|[228.0,1.0,0.0,1....|[2.69019430490611...|[0.93644554675747...|       0.0|</span><br><span class="line">|     8|   227731|[199.0,1.0,0.0,1....|[2.69019457331754...|[0.93644556273205...|       0.0|</span><br><span class="line">|     8|   265403|[198.0,1.0,0.0,1....|[2.69019458257311...|[0.93644556328290...|       0.0|</span><br><span class="line">|     8|   569939|[188.0,1.0,0.0,1....|[2.69019467512877...|[0.93644556879138...|       0.0|</span><br><span class="line">|     8|   277335|[181.5,1.0,0.0,1....|[2.69019473528996...|[0.93644557237189...|       0.0|</span><br><span class="line">|     8|   575633|[180.0,1.0,0.0,1....|[2.69019474917331...|[0.93644557319816...|       0.0|</span><br><span class="line">|     8|   201867|[179.0,1.0,0.0,1....|[2.69019475842887...|[0.93644557374900...|       0.0|</span><br><span class="line">|     8|    25542|[176.0,1.0,0.0,1....|[2.69019478619557...|[0.93644557540155...|       0.0|</span><br><span class="line">|     8|   133457|[169.0,1.0,0.0,1....|[2.69019485098454...|[0.93644557925748...|       0.0|</span><br><span class="line">|     8|   494224|[169.0,1.0,0.0,1....|[2.69019485098454...|[0.93644557925748...|       0.0|</span><br><span class="line">|     8|   339382|[163.0,1.0,0.0,1....|[2.69019490651794...|[0.93644558256256...|       0.0|</span><br><span class="line">+------+---------+--------------------+--------------------+--------------------+----------+</span><br><span class="line">only showing top 20 rows</span><br></pre></td></tr></table></figure><ul><li>TOP-20</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># TOP-20</span></span><br><span class="line">prediction.select(<span class="string">&quot;adgroupId&quot;</span>).head(<span class="number">20</span>)</span><br></pre></td></tr></table></figure><p>显示结果:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[Row(adgroupId=631204),</span><br><span class="line"> Row(adgroupId=583215),</span><br><span class="line"> Row(adgroupId=275819),</span><br><span class="line"> Row(adgroupId=401433),</span><br><span class="line"> Row(adgroupId=29466),</span><br><span class="line"> Row(adgroupId=173327),</span><br><span class="line"> Row(adgroupId=241402),</span><br><span class="line"> Row(adgroupId=351366),</span><br><span class="line"> Row(adgroupId=229827),</span><br><span class="line"> Row(adgroupId=164807),</span><br><span class="line"> Row(adgroupId=227731),</span><br><span class="line"> Row(adgroupId=265403),</span><br><span class="line"> Row(adgroupId=569939),</span><br><span class="line"> Row(adgroupId=277335),</span><br><span class="line"> Row(adgroupId=575633),</span><br><span class="line"> Row(adgroupId=201867),</span><br><span class="line"> Row(adgroupId=25542),</span><br><span class="line"> Row(adgroupId=133457),</span><br><span class="line"> Row(adgroupId=494224),</span><br><span class="line"> Row(adgroupId=339382)]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[i.adgroupId for i in prediction.select(&quot;adgroupId&quot;).head(20)]</span><br></pre></td></tr></table></figure><p>显示结果:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[631204,</span><br><span class="line"> 583215,</span><br><span class="line"> 275819,</span><br><span class="line"> 401433,</span><br><span class="line"> 29466,</span><br><span class="line"> 173327,</span><br><span class="line"> 241402,</span><br><span class="line"> 351366,</span><br><span class="line"> 229827,</span><br><span class="line"> 164807,</span><br><span class="line"> 227731,</span><br><span class="line"> 265403,</span><br><span class="line"> 569939,</span><br><span class="line"> 277335,</span><br><span class="line"> 575633,</span><br><span class="line"> 201867,</span><br><span class="line"> 25542,</span><br><span class="line"> 133457,</span><br><span class="line"> 494224,</span><br><span class="line"> 339382]</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="推荐服务"><a href="#推荐服务" class="headerlink" title="推荐服务"></a>推荐服务</h3><ul><li>离线推荐<ul><li>先召回对召回结果排序</li><li>为每一个用户都进行召回并排序的过程并且把拍好顺序的结果放到数据库中</li><li>如果需要推荐结果的时候 直接到数据库中按照user_id查询，返回推荐结果</li><li>优点 结构比较简单 推荐服务只需要不断计算，把结果保存到数据库中即可</li><li>缺点 实时性差 如果数据1天不更新 1天之内推荐结果一样的，不能反映用户的实时兴趣 </li></ul></li><li>实时推荐<ul><li>排序的模型加载好</li><li>召回阶段的结果缓存</li><li>所有用户的特征缓存</li><li>所有物品的特征缓存</li><li>把推荐的服务暴露出去（django flask) 需要推荐结果的服务把 用户id 传递过来<ul><li>根据id 找到召回结果</li><li>根据id 找到缓存的用户特征</li><li>根据召回结果的物品id 找到物品的特征</li><li>用户特征+物品特征-》逻辑回归模型 就可以预测点击率</li><li>所有召回的物品的点记率都预测并排序 推荐topN</li><li>实时通过LR模型进行排序的好处<ul><li>随时修改召回集</li><li>随时调整用户的特征</li><li>当用户需要推荐服务的时候，获取到最新的召回集和用户特征 得到最新的排序结果 更能体现出用户的实时兴趣</li></ul></li></ul></li></ul></li></ul><p>召回（群策群力）</p><ul><li>协同过滤</li><li>基于内容召回</li><li>基于流行度召回</li></ul><p>排序（根据自身特征和物品特征预估）</p><ul><li>LR CTR预估</li></ul><h3 id="SparkML-和SparkMLlib-区别"><a href="#SparkML-和SparkMLlib-区别" class="headerlink" title="SparkML 和SparkMLlib 区别"></a>SparkML 和SparkMLlib 区别</h3><ul><li>spark mllib 基于RDD<ul><li>数据准备 需要创建一个 基于LabeledPoint的RDD</li><li>LabeledPoint（目标，[特征]）</li><li>已经停止更新了 处于维护状态</li></ul></li><li>spark ML 基于dataframe<ul><li>数据准备 需要把所有的特征放到一列中 dataframe还需要有一列是 目标值</li><li>model = lr.setLabelCol(‘affairs’).setFeaturesCol(‘feautures’).fit(trainDF)</li><li>spark ML 与 sklearn更类似</li><li>最新的API放到 spark ML中的</li></ul></li></ul><h3 id="缺失值处理"><a href="#缺失值处理" class="headerlink" title="缺失值处理"></a>缺失值处理</h3><ul><li>分类特征<ul><li>把缺失作为单独的特征处理</li><li>算法预测</li></ul></li><li>连续的特征<ul><li>算法预测</li><li>平均值 默认值 中位数填充</li></ul></li></ul><h3 id="利用spark-处理-onehot"><a href="#利用spark-处理-onehot" class="headerlink" title="利用spark 处理 onehot"></a>利用spark 处理 onehot</h3><ul><li>稀疏向量 大部分维度上的值都是0 sparseVector (向量的维度,[非零元素的索引],[非零元素的值])</li><li>对应的API：stringindexer onehotEncoder pipline </li></ul><p>239146001</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;离线推荐数据缓存-amp-实时推荐&quot;&gt;&lt;a href=&quot;#离线推荐数据缓存-amp-实时推荐&quot; class=&quot;headerlink&quot; title=&quot;离线推荐数据缓存 &amp;amp; 实时推荐&quot;&gt;&lt;/a&gt;离线推荐数据缓存 &amp;amp; 实时推荐&lt;/h2&gt;&lt;h3 id=&quot;1</summary>
      
    
    
    
    <category term="机器学习" scheme="https://xxren8218.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="大数据的lambda架构" scheme="https://xxren8218.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%9A%84lambda%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="推荐系统基础" scheme="https://xxren8218.github.io/tags/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>35-逻辑回归(LR)实现CTR预估</title>
    <link href="https://xxren8218.github.io/20210710/35-%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92-LR-%E5%AE%9E%E7%8E%B0CTR%E9%A2%84%E4%BC%B0.html"/>
    <id>https://xxren8218.github.io/20210710/35-%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92-LR-%E5%AE%9E%E7%8E%B0CTR%E9%A2%84%E4%BC%B0.html</id>
    <published>2021-07-10T14:49:27.000Z</published>
    <updated>2021-07-10T14:50:05.750Z</updated>
    
    <content type="html"><![CDATA[<h2 id="LR实现CTR预估"><a href="#LR实现CTR预估" class="headerlink" title="LR实现CTR预估"></a>LR实现CTR预估</h2><h3 id="1-Spark逻辑回归-LR-模型使用介绍"><a href="#1-Spark逻辑回归-LR-模型使用介绍" class="headerlink" title="1. Spark逻辑回归(LR)模型使用介绍"></a>1. Spark逻辑回归(LR)模型使用介绍</h3><ul><li>先通过小案例来看看逻辑回归的模型怎么处理。</li><li><code>pyspark.ml</code>需要准备<code>DataFrame</code>的数据。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark.ml.feature <span class="keyword">import</span> VectorAssembler</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 样本数据集</span></span><br><span class="line">sample_dataset = [</span><br><span class="line">    (<span class="number">0</span>, <span class="string">&quot;male&quot;</span>, <span class="number">37</span>, <span class="number">10</span>, <span class="string">&quot;no&quot;</span>, <span class="number">3</span>, <span class="number">18</span>, <span class="number">7</span>, <span class="number">4</span>),</span><br><span class="line">    (<span class="number">0</span>, <span class="string">&quot;female&quot;</span>, <span class="number">27</span>, <span class="number">4</span>, <span class="string">&quot;no&quot;</span>, <span class="number">4</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">4</span>),</span><br><span class="line">    (<span class="number">0</span>, <span class="string">&quot;female&quot;</span>, <span class="number">32</span>, <span class="number">15</span>, <span class="string">&quot;yes&quot;</span>, <span class="number">1</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">4</span>),</span><br><span class="line">    (<span class="number">0</span>, <span class="string">&quot;male&quot;</span>, <span class="number">57</span>, <span class="number">15</span>, <span class="string">&quot;yes&quot;</span>, <span class="number">5</span>, <span class="number">18</span>, <span class="number">6</span>, <span class="number">5</span>),</span><br><span class="line">    (<span class="number">0</span>, <span class="string">&quot;male&quot;</span>, <span class="number">22</span>, <span class="number">0.75</span>, <span class="string">&quot;no&quot;</span>, <span class="number">2</span>, <span class="number">17</span>, <span class="number">6</span>, <span class="number">3</span>),</span><br><span class="line">    (<span class="number">0</span>, <span class="string">&quot;female&quot;</span>, <span class="number">32</span>, <span class="number">1.5</span>, <span class="string">&quot;no&quot;</span>, <span class="number">2</span>, <span class="number">17</span>, <span class="number">5</span>, <span class="number">5</span>),</span><br><span class="line">    (<span class="number">0</span>, <span class="string">&quot;female&quot;</span>, <span class="number">22</span>, <span class="number">0.75</span>, <span class="string">&quot;no&quot;</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">3</span>),</span><br><span class="line">    (<span class="number">0</span>, <span class="string">&quot;male&quot;</span>, <span class="number">57</span>, <span class="number">15</span>, <span class="string">&quot;yes&quot;</span>, <span class="number">2</span>, <span class="number">14</span>, <span class="number">4</span>, <span class="number">4</span>),</span><br><span class="line">    (<span class="number">0</span>, <span class="string">&quot;female&quot;</span>, <span class="number">32</span>, <span class="number">15</span>, <span class="string">&quot;yes&quot;</span>, <span class="number">4</span>, <span class="number">16</span>, <span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">    (<span class="number">0</span>, <span class="string">&quot;male&quot;</span>, <span class="number">22</span>, <span class="number">1.5</span>, <span class="string">&quot;no&quot;</span>, <span class="number">4</span>, <span class="number">14</span>, <span class="number">4</span>, <span class="number">5</span>),</span><br><span class="line">    (<span class="number">0</span>, <span class="string">&quot;male&quot;</span>, <span class="number">37</span>, <span class="number">15</span>, <span class="string">&quot;yes&quot;</span>, <span class="number">2</span>, <span class="number">20</span>, <span class="number">7</span>, <span class="number">2</span>),</span><br><span class="line">    (<span class="number">0</span>, <span class="string">&quot;male&quot;</span>, <span class="number">27</span>, <span class="number">4</span>, <span class="string">&quot;yes&quot;</span>, <span class="number">4</span>, <span class="number">18</span>, <span class="number">6</span>, <span class="number">4</span>),</span><br><span class="line">    (<span class="number">0</span>, <span class="string">&quot;male&quot;</span>, <span class="number">47</span>, <span class="number">15</span>, <span class="string">&quot;yes&quot;</span>, <span class="number">5</span>, <span class="number">17</span>, <span class="number">6</span>, <span class="number">4</span>),</span><br><span class="line">    (<span class="number">0</span>, <span class="string">&quot;female&quot;</span>, <span class="number">22</span>, <span class="number">1.5</span>, <span class="string">&quot;no&quot;</span>, <span class="number">2</span>, <span class="number">17</span>, <span class="number">5</span>, <span class="number">4</span>),</span><br><span class="line">    (<span class="number">0</span>, <span class="string">&quot;female&quot;</span>, <span class="number">27</span>, <span class="number">4</span>, <span class="string">&quot;no&quot;</span>, <span class="number">4</span>, <span class="number">14</span>, <span class="number">5</span>, <span class="number">4</span>),</span><br><span class="line">    (<span class="number">0</span>, <span class="string">&quot;female&quot;</span>, <span class="number">37</span>, <span class="number">15</span>, <span class="string">&quot;yes&quot;</span>, <span class="number">1</span>, <span class="number">17</span>, <span class="number">5</span>, <span class="number">5</span>),</span><br><span class="line">    (<span class="number">0</span>, <span class="string">&quot;female&quot;</span>, <span class="number">37</span>, <span class="number">15</span>, <span class="string">&quot;yes&quot;</span>, <span class="number">2</span>, <span class="number">18</span>, <span class="number">4</span>, <span class="number">3</span>),</span><br><span class="line">    (<span class="number">0</span>, <span class="string">&quot;female&quot;</span>, <span class="number">22</span>, <span class="number">0.75</span>, <span class="string">&quot;no&quot;</span>, <span class="number">3</span>, <span class="number">16</span>, <span class="number">5</span>, <span class="number">4</span>),</span><br><span class="line">    (<span class="number">0</span>, <span class="string">&quot;female&quot;</span>, <span class="number">22</span>, <span class="number">1.5</span>, <span class="string">&quot;no&quot;</span>, <span class="number">2</span>, <span class="number">16</span>, <span class="number">5</span>, <span class="number">5</span>),</span><br><span class="line">    (<span class="number">0</span>, <span class="string">&quot;female&quot;</span>, <span class="number">27</span>, <span class="number">10</span>, <span class="string">&quot;yes&quot;</span>, <span class="number">2</span>, <span class="number">14</span>, <span class="number">1</span>, <span class="number">5</span>),</span><br><span class="line">    (<span class="number">1</span>, <span class="string">&quot;female&quot;</span>, <span class="number">32</span>, <span class="number">15</span>, <span class="string">&quot;yes&quot;</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">3</span>, <span class="number">2</span>),</span><br><span class="line">    (<span class="number">1</span>, <span class="string">&quot;female&quot;</span>, <span class="number">27</span>, <span class="number">7</span>, <span class="string">&quot;yes&quot;</span>, <span class="number">4</span>, <span class="number">16</span>, <span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">    (<span class="number">1</span>, <span class="string">&quot;male&quot;</span>, <span class="number">42</span>, <span class="number">15</span>, <span class="string">&quot;yes&quot;</span>, <span class="number">3</span>, <span class="number">18</span>, <span class="number">6</span>, <span class="number">2</span>),</span><br><span class="line">    (<span class="number">1</span>, <span class="string">&quot;female&quot;</span>, <span class="number">42</span>, <span class="number">15</span>, <span class="string">&quot;yes&quot;</span>, <span class="number">2</span>, <span class="number">14</span>, <span class="number">3</span>, <span class="number">2</span>),</span><br><span class="line">    (<span class="number">1</span>, <span class="string">&quot;male&quot;</span>, <span class="number">27</span>, <span class="number">7</span>, <span class="string">&quot;yes&quot;</span>, <span class="number">2</span>, <span class="number">17</span>, <span class="number">5</span>, <span class="number">4</span>),</span><br><span class="line">    (<span class="number">1</span>, <span class="string">&quot;male&quot;</span>, <span class="number">32</span>, <span class="number">10</span>, <span class="string">&quot;yes&quot;</span>, <span class="number">4</span>, <span class="number">14</span>, <span class="number">4</span>, <span class="number">3</span>),</span><br><span class="line">    (<span class="number">1</span>, <span class="string">&quot;male&quot;</span>, <span class="number">47</span>, <span class="number">15</span>, <span class="string">&quot;yes&quot;</span>, <span class="number">3</span>, <span class="number">16</span>, <span class="number">4</span>, <span class="number">2</span>),</span><br><span class="line">    (<span class="number">0</span>, <span class="string">&quot;male&quot;</span>, <span class="number">37</span>, <span class="number">4</span>, <span class="string">&quot;yes&quot;</span>, <span class="number">2</span>, <span class="number">20</span>, <span class="number">6</span>, <span class="number">4</span>)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">columns = [<span class="string">&quot;affairs&quot;</span>, <span class="string">&quot;gender&quot;</span>, <span class="string">&quot;age&quot;</span>, <span class="string">&quot;label&quot;</span>, <span class="string">&quot;children&quot;</span>, <span class="string">&quot;religiousness&quot;</span>, <span class="string">&quot;education&quot;</span>, <span class="string">&quot;occupation&quot;</span>, <span class="string">&quot;rating&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># pandas构建dataframe，方便（若不用pd预先创建的话，写Spark的DataFrame的话，还得写Schema，是比较麻烦的。）</span></span><br><span class="line">pdf = pd.DataFrame(sample_dataset, columns=columns)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转换成spark的dataframe</span></span><br><span class="line">df = spark.createDataFrame(pdf)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 特征选取：affairs为目标值，其余为特征值</span></span><br><span class="line">df2 = df.select(<span class="string">&quot;affairs&quot;</span>,<span class="string">&quot;age&quot;</span>, <span class="string">&quot;religiousness&quot;</span>, <span class="string">&quot;education&quot;</span>, <span class="string">&quot;occupation&quot;</span>, <span class="string">&quot;rating&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用于计算特征向量的字段</span></span><br><span class="line">colArray2 = [<span class="string">&quot;age&quot;</span>, <span class="string">&quot;religiousness&quot;</span>, <span class="string">&quot;education&quot;</span>, <span class="string">&quot;occupation&quot;</span>, <span class="string">&quot;rating&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算出特征向量(将特征向量放在一列里。)</span></span><br><span class="line">df3 = VectorAssembler().setInputCols(colArray2).setOutputCol(<span class="string">&quot;features&quot;</span>).transform(df2)</span><br><span class="line">print(<span class="string">&quot;数据集：&quot;</span>)</span><br><span class="line">df3.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">#  随机切分为训练集和测试集</span></span><br><span class="line">trainDF, testDF = df3.randomSplit([<span class="number">0.8</span>,<span class="number">0.2</span>])</span><br><span class="line">print(<span class="string">&quot;训练集：&quot;</span>)</span><br><span class="line">trainDF.show(<span class="number">10</span>)</span><br><span class="line">print(<span class="string">&quot;测试集：&quot;</span>)</span><br><span class="line">testDF.show(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>显示结果:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">数据集：</span><br><span class="line">+-------+---+-------------+---------+----------+------+--------------------+</span><br><span class="line">|affairs|age|religiousness|education|occupation|rating|            features|</span><br><span class="line">+-------+---+-------------+---------+----------+------+--------------------+</span><br><span class="line">|      0| 37|            3|       18|         7|     4|[37.0,3.0,18.0,7....|</span><br><span class="line">|      0| 27|            4|       14|         6|     4|[27.0,4.0,14.0,6....|</span><br><span class="line">|      0| 32|            1|       12|         1|     4|[32.0,1.0,12.0,1....|</span><br><span class="line">|      0| 57|            5|       18|         6|     5|[57.0,5.0,18.0,6....|</span><br><span class="line">|      0| 22|            2|       17|         6|     3|[22.0,2.0,17.0,6....|</span><br><span class="line">|      0| 32|            2|       17|         5|     5|[32.0,2.0,17.0,5....|</span><br><span class="line">|      0| 22|            2|       12|         1|     3|[22.0,2.0,12.0,1....|</span><br><span class="line">|      0| 57|            2|       14|         4|     4|[57.0,2.0,14.0,4....|</span><br><span class="line">|      0| 32|            4|       16|         1|     2|[32.0,4.0,16.0,1....|</span><br><span class="line">|      0| 22|            4|       14|         4|     5|[22.0,4.0,14.0,4....|</span><br><span class="line">|      0| 37|            2|       20|         7|     2|[37.0,2.0,20.0,7....|</span><br><span class="line">|      0| 27|            4|       18|         6|     4|[27.0,4.0,18.0,6....|</span><br><span class="line">|      0| 47|            5|       17|         6|     4|[47.0,5.0,17.0,6....|</span><br><span class="line">|      0| 22|            2|       17|         5|     4|[22.0,2.0,17.0,5....|</span><br><span class="line">|      0| 27|            4|       14|         5|     4|[27.0,4.0,14.0,5....|</span><br><span class="line">|      0| 37|            1|       17|         5|     5|[37.0,1.0,17.0,5....|</span><br><span class="line">|      0| 37|            2|       18|         4|     3|[37.0,2.0,18.0,4....|</span><br><span class="line">|      0| 22|            3|       16|         5|     4|[22.0,3.0,16.0,5....|</span><br><span class="line">|      0| 22|            2|       16|         5|     5|[22.0,2.0,16.0,5....|</span><br><span class="line">|      0| 27|            2|       14|         1|     5|[27.0,2.0,14.0,1....|</span><br><span class="line">+-------+---+-------------+---------+----------+------+--------------------+</span><br><span class="line">only showing top 20 rows</span><br><span class="line"></span><br><span class="line">训练集：</span><br><span class="line">+-------+---+-------------+---------+----------+------+--------------------+</span><br><span class="line">|affairs|age|religiousness|education|occupation|rating|            features|</span><br><span class="line">+-------+---+-------------+---------+----------+------+--------------------+</span><br><span class="line">|      0| 32|            1|       12|         1|     4|[32.0,1.0,12.0,1....|</span><br><span class="line">|      0| 37|            3|       18|         7|     4|[37.0,3.0,18.0,7....|</span><br><span class="line">|      0| 22|            2|       17|         6|     3|[22.0,2.0,17.0,6....|</span><br><span class="line">|      0| 32|            2|       17|         5|     5|[32.0,2.0,17.0,5....|</span><br><span class="line">|      0| 57|            5|       18|         6|     5|[57.0,5.0,18.0,6....|</span><br><span class="line">|      0| 57|            2|       14|         4|     4|[57.0,2.0,14.0,4....|</span><br><span class="line">|      0| 22|            2|       17|         5|     4|[22.0,2.0,17.0,5....|</span><br><span class="line">|      0| 22|            4|       14|         4|     5|[22.0,4.0,14.0,4....|</span><br><span class="line">|      0| 27|            4|       18|         6|     4|[27.0,4.0,18.0,6....|</span><br><span class="line">|      0| 37|            2|       20|         7|     2|[37.0,2.0,20.0,7....|</span><br><span class="line">+-------+---+-------------+---------+----------+------+--------------------+</span><br><span class="line">only showing top 10 rows</span><br><span class="line"></span><br><span class="line">测试集：</span><br><span class="line">+-------+---+-------------+---------+----------+------+--------------------+</span><br><span class="line">|affairs|age|religiousness|education|occupation|rating|            features|</span><br><span class="line">+-------+---+-------------+---------+----------+------+--------------------+</span><br><span class="line">|      0| 27|            4|       14|         6|     4|[27.0,4.0,14.0,6....|</span><br><span class="line">|      0| 22|            2|       12|         1|     3|[22.0,2.0,12.0,1....|</span><br><span class="line">|      0| 32|            4|       16|         1|     2|[32.0,4.0,16.0,1....|</span><br><span class="line">|      0| 27|            4|       14|         5|     4|[27.0,4.0,14.0,5....|</span><br><span class="line">|      0| 22|            3|       16|         5|     4|[22.0,3.0,16.0,5....|</span><br><span class="line">|      1| 27|            4|       16|         1|     2|[27.0,4.0,16.0,1....|</span><br><span class="line">+-------+---+-------------+---------+----------+------+--------------------+</span><br></pre></td></tr></table></figure><ul><li>逻辑回归训练模型</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark.ml.classification <span class="keyword">import</span> LogisticRegression</span><br><span class="line"><span class="comment"># 创建逻辑回归训练器</span></span><br><span class="line">lr = LogisticRegression()</span><br><span class="line"><span class="comment"># 训练模型</span></span><br><span class="line">model = lr.setLabelCol(<span class="string">&quot;affairs&quot;</span>).setFeaturesCol(<span class="string">&quot;features&quot;</span>).fit(trainDF)</span><br><span class="line"><span class="comment"># 预测数据</span></span><br><span class="line">model.transform(testDF).show()</span><br></pre></td></tr></table></figure><p>显示结果:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+-------+---+-------------+---------+----------+------+--------------------+--------------------+--------------------+----------+</span><br><span class="line">|affairs|age|religiousness|education|occupation|rating|            features|       rawPrediction|         probability|prediction|</span><br><span class="line">+-------+---+-------------+---------+----------+------+--------------------+--------------------+--------------------+----------+</span><br><span class="line">|      0| 27|            4|       14|         6|     4|[27.0,4.0,14.0,6....|[0.39067871041193...|[0.59644607432863...|       0.0|</span><br><span class="line">|      0| 22|            2|       12|         1|     3|[22.0,2.0,12.0,1....|[-2.6754687573263...|[0.06443650129497...|       1.0|</span><br><span class="line">|      0| 32|            4|       16|         1|     2|[32.0,4.0,16.0,1....|[-4.5240336812732...|[0.01072883305878...|       1.0|</span><br><span class="line">|      0| 27|            4|       14|         5|     4|[27.0,4.0,14.0,5....|[0.16206512668426...|[0.54042783360658...|       0.0|</span><br><span class="line">|      0| 22|            3|       16|         5|     4|[22.0,3.0,16.0,5....|[1.69102697292197...|[0.84435916906682...|       0.0|</span><br><span class="line">|      1| 27|            4|       16|         1|     2|[27.0,4.0,16.0,1....|[-4.7969907272012...|[0.00818697014985...|       1.0|</span><br><span class="line">+-------+---+-------------+---------+----------+------+--------------------+--------------------+--------------------+----------+</span><br></pre></td></tr></table></figure><h3 id="2-基于LR的点击率预测模型训练"><a href="#2-基于LR的点击率预测模型训练" class="headerlink" title="2. 基于LR的点击率预测模型训练"></a>2. 基于LR的点击率预测模型训练</h3><ul><li><p>本小节主要根据广告点击样本数据集(raw_sample)、广告基本特征数据集(ad_feature)、用户基本信息数据集(user_profile)构建出了一个完整的样本数据集，并按日期划分为了训练集(前七天)和测试集(最后一天)，利用逻辑回归进行训练。</p><p>训练模型时，通过对类别特征数据进行处理，一定程度达到提高了模型的效果</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;从HDFS中加载样本数据信息&#x27;&#x27;&#x27;</span></span><br><span class="line">_raw_sample_df1 = spark.read.csv(<span class="string">&quot;hdfs://localhost:8020/csv/raw_sample.csv&quot;</span>, header=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># _raw_sample_df1.show()    # 展示数据，默认前20条</span></span><br><span class="line"><span class="comment"># 更改表结构，转换为对应的数据类型</span></span><br><span class="line"><span class="keyword">from</span> pyspark.sql.types <span class="keyword">import</span> StructType, StructField, IntegerType, FloatType, LongType, StringType</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 更改df表结构：更改列类型和列名称</span></span><br><span class="line">_raw_sample_df2 = _raw_sample_df1.\</span><br><span class="line">    withColumn(<span class="string">&quot;user&quot;</span>, _raw_sample_df1.user.cast(IntegerType())).withColumnRenamed(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;userId&quot;</span>).\</span><br><span class="line">    withColumn(<span class="string">&quot;time_stamp&quot;</span>, _raw_sample_df1.time_stamp.cast(LongType())).withColumnRenamed(<span class="string">&quot;time_stamp&quot;</span>, <span class="string">&quot;timestamp&quot;</span>).\</span><br><span class="line">    withColumn(<span class="string">&quot;adgroup_id&quot;</span>, _raw_sample_df1.adgroup_id.cast(IntegerType())).withColumnRenamed(<span class="string">&quot;adgroup_id&quot;</span>, <span class="string">&quot;adgroupId&quot;</span>).\</span><br><span class="line">    withColumn(<span class="string">&quot;pid&quot;</span>, _raw_sample_df1.pid.cast(StringType())).\</span><br><span class="line">    withColumn(<span class="string">&quot;nonclk&quot;</span>, _raw_sample_df1.nonclk.cast(IntegerType())).\</span><br><span class="line">    withColumn(<span class="string">&quot;clk&quot;</span>, _raw_sample_df1.clk.cast(IntegerType()))</span><br><span class="line">_raw_sample_df2.printSchema()</span><br><span class="line">_raw_sample_df2.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 样本数据pid特征处理</span></span><br><span class="line"><span class="keyword">from</span> pyspark.ml.feature <span class="keyword">import</span> OneHotEncoder</span><br><span class="line"><span class="keyword">from</span> pyspark.ml.feature <span class="keyword">import</span> StringIndexer</span><br><span class="line"><span class="keyword">from</span> pyspark.ml <span class="keyword">import</span> Pipeline</span><br><span class="line"></span><br><span class="line">stringindexer = StringIndexer(inputCol=<span class="string">&#x27;pid&#x27;</span>, outputCol=<span class="string">&#x27;pid_feature&#x27;</span>)</span><br><span class="line">encoder = OneHotEncoder(dropLast=<span class="literal">False</span>, inputCol=<span class="string">&#x27;pid_feature&#x27;</span>, outputCol=<span class="string">&#x27;pid_value&#x27;</span>)</span><br><span class="line">pipeline = Pipeline(stages=[stringindexer, encoder])</span><br><span class="line">pipeline_fit = pipeline.fit(_raw_sample_df2)</span><br><span class="line">raw_sample_df = pipeline_fit.transform(_raw_sample_df2)</span><br><span class="line">raw_sample_df.show()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;pid和特征的对应关系</span></span><br><span class="line"><span class="string">430548_1007：0</span></span><br><span class="line"><span class="string">430549_1007：1</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>显示结果:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">root</span><br><span class="line"> |-- userId: integer (nullable = true)</span><br><span class="line"> |-- timestamp: long (nullable = true)</span><br><span class="line"> |-- adgroupId: integer (nullable = true)</span><br><span class="line"> |-- pid: string (nullable = true)</span><br><span class="line"> |-- nonclk: integer (nullable = true)</span><br><span class="line"> |-- clk: integer (nullable = true)</span><br><span class="line"></span><br><span class="line">+------+----------+---------+-----------+------+---+</span><br><span class="line">|userId| timestamp|adgroupId|        pid|nonclk|clk|</span><br><span class="line">+------+----------+---------+-----------+------+---+</span><br><span class="line">|581738|1494137644|        1|430548_1007|     1|  0|</span><br><span class="line">|449818|1494638778|        3|430548_1007|     1|  0|</span><br><span class="line">|914836|1494650879|        4|430548_1007|     1|  0|</span><br><span class="line">|914836|1494651029|        5|430548_1007|     1|  0|</span><br><span class="line">|399907|1494302958|        8|430548_1007|     1|  0|</span><br><span class="line">|628137|1494524935|        9|430548_1007|     1|  0|</span><br><span class="line">|298139|1494462593|        9|430539_1007|     1|  0|</span><br><span class="line">|775475|1494561036|        9|430548_1007|     1|  0|</span><br><span class="line">|555266|1494307136|       11|430539_1007|     1|  0|</span><br><span class="line">|117840|1494036743|       11|430548_1007|     1|  0|</span><br><span class="line">|739815|1494115387|       11|430539_1007|     1|  0|</span><br><span class="line">|623911|1494625301|       11|430548_1007|     1|  0|</span><br><span class="line">|623911|1494451608|       11|430548_1007|     1|  0|</span><br><span class="line">|421590|1494034144|       11|430548_1007|     1|  0|</span><br><span class="line">|976358|1494156949|       13|430548_1007|     1|  0|</span><br><span class="line">|286630|1494218579|       13|430539_1007|     1|  0|</span><br><span class="line">|286630|1494289247|       13|430539_1007|     1|  0|</span><br><span class="line">|771431|1494153867|       13|430548_1007|     1|  0|</span><br><span class="line">|707120|1494220810|       13|430548_1007|     1|  0|</span><br><span class="line">|530454|1494293746|       13|430548_1007|     1|  0|</span><br><span class="line">+------+----------+---------+-----------+------+---+</span><br><span class="line">only showing top 20 rows</span><br><span class="line"></span><br><span class="line">+------+----------+---------+-----------+------+---+-----------+-------------+</span><br><span class="line">|userId| timestamp|adgroupId|        pid|nonclk|clk|pid_feature|    pid_value|</span><br><span class="line">+------+----------+---------+-----------+------+---+-----------+-------------+</span><br><span class="line">|581738|1494137644|        1|430548_1007|     1|  0|        0.0|(2,[0],[1.0])|</span><br><span class="line">|449818|1494638778|        3|430548_1007|     1|  0|        0.0|(2,[0],[1.0])|</span><br><span class="line">|914836|1494650879|        4|430548_1007|     1|  0|        0.0|(2,[0],[1.0])|</span><br><span class="line">|914836|1494651029|        5|430548_1007|     1|  0|        0.0|(2,[0],[1.0])|</span><br><span class="line">|399907|1494302958|        8|430548_1007|     1|  0|        0.0|(2,[0],[1.0])|</span><br><span class="line">|628137|1494524935|        9|430548_1007|     1|  0|        0.0|(2,[0],[1.0])|</span><br><span class="line">|298139|1494462593|        9|430539_1007|     1|  0|        1.0|(2,[1],[1.0])|</span><br><span class="line">|775475|1494561036|        9|430548_1007|     1|  0|        0.0|(2,[0],[1.0])|</span><br><span class="line">|555266|1494307136|       11|430539_1007|     1|  0|        1.0|(2,[1],[1.0])|</span><br><span class="line">|117840|1494036743|       11|430548_1007|     1|  0|        0.0|(2,[0],[1.0])|</span><br><span class="line">|739815|1494115387|       11|430539_1007|     1|  0|        1.0|(2,[1],[1.0])|</span><br><span class="line">|623911|1494625301|       11|430548_1007|     1|  0|        0.0|(2,[0],[1.0])|</span><br><span class="line">|623911|1494451608|       11|430548_1007|     1|  0|        0.0|(2,[0],[1.0])|</span><br><span class="line">|421590|1494034144|       11|430548_1007|     1|  0|        0.0|(2,[0],[1.0])|</span><br><span class="line">|976358|1494156949|       13|430548_1007|     1|  0|        0.0|(2,[0],[1.0])|</span><br><span class="line">|286630|1494218579|       13|430539_1007|     1|  0|        1.0|(2,[1],[1.0])|</span><br><span class="line">|286630|1494289247|       13|430539_1007|     1|  0|        1.0|(2,[1],[1.0])|</span><br><span class="line">|771431|1494153867|       13|430548_1007|     1|  0|        0.0|(2,[0],[1.0])|</span><br><span class="line">|707120|1494220810|       13|430548_1007|     1|  0|        0.0|(2,[0],[1.0])|</span><br><span class="line">|530454|1494293746|       13|430548_1007|     1|  0|        0.0|(2,[0],[1.0])|</span><br><span class="line">+------+----------+---------+-----------+------+---+-----------+-------------+</span><br><span class="line">only showing top 20 rows</span><br><span class="line"></span><br><span class="line">&#x27;pid和特征的对应关系\n430548_1007：0\n430549_1007：1\n&#x27;</span><br></pre></td></tr></table></figure><ul><li>从HDFS中加载广告基本信息数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">_ad_feature_df = spark.read.csv(<span class="string">&quot;hdfs://localhost:9000/datasets/ad_feature.csv&quot;</span>, header=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更改表结构，转换为对应的数据类型</span></span><br><span class="line"><span class="keyword">from</span> pyspark.sql.types <span class="keyword">import</span> StructType, StructField, IntegerType, FloatType</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换掉NULL字符串</span></span><br><span class="line">_ad_feature_df = _ad_feature_df.replace(<span class="string">&quot;NULL&quot;</span>, <span class="string">&quot;-1&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 更改df表结构：更改列类型和列名称</span></span><br><span class="line">ad_feature_df = _ad_feature_df.\</span><br><span class="line">    withColumn(<span class="string">&quot;adgroup_id&quot;</span>, _ad_feature_df.adgroup_id.cast(IntegerType())).withColumnRenamed(<span class="string">&quot;adgroup_id&quot;</span>, <span class="string">&quot;adgroupId&quot;</span>).\</span><br><span class="line">    withColumn(<span class="string">&quot;cate_id&quot;</span>, _ad_feature_df.cate_id.cast(IntegerType())).withColumnRenamed(<span class="string">&quot;cate_id&quot;</span>, <span class="string">&quot;cateId&quot;</span>).\</span><br><span class="line">    withColumn(<span class="string">&quot;campaign_id&quot;</span>, _ad_feature_df.campaign_id.cast(IntegerType())).withColumnRenamed(<span class="string">&quot;campaign_id&quot;</span>, <span class="string">&quot;campaignId&quot;</span>).\</span><br><span class="line">    withColumn(<span class="string">&quot;customer&quot;</span>, _ad_feature_df.customer.cast(IntegerType())).withColumnRenamed(<span class="string">&quot;customer&quot;</span>, <span class="string">&quot;customerId&quot;</span>).\</span><br><span class="line">    withColumn(<span class="string">&quot;brand&quot;</span>, _ad_feature_df.brand.cast(IntegerType())).withColumnRenamed(<span class="string">&quot;brand&quot;</span>, <span class="string">&quot;brandId&quot;</span>).\</span><br><span class="line">    withColumn(<span class="string">&quot;price&quot;</span>, _ad_feature_df.price.cast(FloatType()))</span><br><span class="line">ad_feature_df.printSchema()</span><br><span class="line">ad_feature_df.show()</span><br></pre></td></tr></table></figure><p>显示结果:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">root</span><br><span class="line"> |-- adgroupId: integer (nullable = true)</span><br><span class="line"> |-- cateId: integer (nullable = true)</span><br><span class="line"> |-- campaignId: integer (nullable = true)</span><br><span class="line"> |-- customerId: integer (nullable = true)</span><br><span class="line"> |-- brandId: integer (nullable = true)</span><br><span class="line"> |-- price: float (nullable = true)</span><br><span class="line"></span><br><span class="line">+---------+------+----------+----------+-------+-----+</span><br><span class="line">|adgroupId|cateId|campaignId|customerId|brandId|price|</span><br><span class="line">+---------+------+----------+----------+-------+-----+</span><br><span class="line">|    63133|  6406|     83237|         1|  95471|170.0|</span><br><span class="line">|   313401|  6406|     83237|         1|  87331|199.0|</span><br><span class="line">|   248909|   392|     83237|         1|  32233| 38.0|</span><br><span class="line">|   208458|   392|     83237|         1| 174374|139.0|</span><br><span class="line">|   110847|  7211|    135256|         2| 145952|32.99|</span><br><span class="line">|   607788|  6261|    387991|         6| 207800|199.0|</span><br><span class="line">|   375706|  4520|    387991|         6|     -1| 99.0|</span><br><span class="line">|    11115|  7213|    139747|         9| 186847| 33.0|</span><br><span class="line">|    24484|  7207|    139744|         9| 186847| 19.0|</span><br><span class="line">|    28589|  5953|    395195|        13|     -1|428.0|</span><br><span class="line">|    23236|  5953|    395195|        13|     -1|368.0|</span><br><span class="line">|   300556|  5953|    395195|        13|     -1|639.0|</span><br><span class="line">|    92560|  5953|    395195|        13|     -1|368.0|</span><br><span class="line">|   590965|  4284|     28145|        14| 454237|249.0|</span><br><span class="line">|   529913|  4284|     70206|        14|     -1|249.0|</span><br><span class="line">|   546930|  4284|     28145|        14|     -1|249.0|</span><br><span class="line">|   639794|  6261|     70206|        14|  37004| 89.9|</span><br><span class="line">|   335413|  4284|     28145|        14|     -1|249.0|</span><br><span class="line">|   794890|  4284|     70206|        14| 454237|249.0|</span><br><span class="line">|   684020|  6261|     70206|        14|  37004| 99.0|</span><br><span class="line">+---------+------+----------+----------+-------+-----+</span><br><span class="line">only showing top 20 rows</span><br></pre></td></tr></table></figure><ul><li>从HDFS加载用户基本信息数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark.sql.types <span class="keyword">import</span> StructType, StructField, StringType, IntegerType, LongType, FloatType</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建表结构schema对象</span></span><br><span class="line">schema = StructType([</span><br><span class="line">    StructField(<span class="string">&quot;userId&quot;</span>, IntegerType()),</span><br><span class="line">    StructField(<span class="string">&quot;cms_segid&quot;</span>, IntegerType()),</span><br><span class="line">    StructField(<span class="string">&quot;cms_group_id&quot;</span>, IntegerType()),</span><br><span class="line">    StructField(<span class="string">&quot;final_gender_code&quot;</span>, IntegerType()),</span><br><span class="line">    StructField(<span class="string">&quot;age_level&quot;</span>, IntegerType()),</span><br><span class="line">    StructField(<span class="string">&quot;pvalue_level&quot;</span>, IntegerType()),</span><br><span class="line">    StructField(<span class="string">&quot;shopping_level&quot;</span>, IntegerType()),</span><br><span class="line">    StructField(<span class="string">&quot;occupation&quot;</span>, IntegerType()),</span><br><span class="line">    StructField(<span class="string">&quot;new_user_class_level&quot;</span>, IntegerType())</span><br><span class="line">])</span><br><span class="line"><span class="comment"># 利用schema从hdfs加载</span></span><br><span class="line">_user_profile_df1 = spark.read.csv(<span class="string">&quot;hdfs://localhost:9000/datasets/user_profile.csv&quot;</span>, header=<span class="literal">True</span>, schema=schema)</span><br><span class="line"><span class="comment"># user_profile_df.printSchema()</span></span><br><span class="line"><span class="comment"># user_profile_df.show()</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;对缺失数据进行特征热编码&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">from</span> pyspark.ml.feature <span class="keyword">import</span> OneHotEncoder</span><br><span class="line"><span class="keyword">from</span> pyspark.ml.feature <span class="keyword">import</span> StringIndexer</span><br><span class="line"><span class="keyword">from</span> pyspark.ml <span class="keyword">import</span> Pipeline</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用热编码转换pvalue_level的一维数据为多维，增加n-1个虚拟变量，n为pvalue_level的取值范围</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要先将缺失值全部替换为数值，便于处理，否则会抛出异常</span></span><br><span class="line"><span class="keyword">from</span> pyspark.sql.types <span class="keyword">import</span> StringType</span><br><span class="line">_user_profile_df2 = _user_profile_df1.na.fill(-<span class="number">1</span>)</span><br><span class="line"><span class="comment"># _user_profile_df2.show()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 热编码时，必须先将待处理字段转为字符串类型才可处理</span></span><br><span class="line">_user_profile_df3 = _user_profile_df2.withColumn(<span class="string">&quot;pvalue_level&quot;</span>, _user_profile_df2.pvalue_level.cast(StringType()))\</span><br><span class="line">    .withColumn(<span class="string">&quot;new_user_class_level&quot;</span>, _user_profile_df2.new_user_class_level.cast(StringType()))</span><br><span class="line"><span class="comment"># _user_profile_df3.printSchema()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对pvalue_level进行热编码，求值</span></span><br><span class="line"><span class="comment"># 运行过程是先将pvalue_level转换为一列新的特征数据，然后对该特征数据求出的热编码值，存在了新的一列数据中，类型为一个稀疏矩阵</span></span><br><span class="line">stringindexer = StringIndexer(inputCol=<span class="string">&#x27;pvalue_level&#x27;</span>, outputCol=<span class="string">&#x27;pl_onehot_feature&#x27;</span>)</span><br><span class="line">encoder = OneHotEncoder(dropLast=<span class="literal">False</span>, inputCol=<span class="string">&#x27;pl_onehot_feature&#x27;</span>, outputCol=<span class="string">&#x27;pl_onehot_value&#x27;</span>)</span><br><span class="line">pipeline = Pipeline(stages=[stringindexer, encoder])</span><br><span class="line">pipeline_fit = pipeline.fit(_user_profile_df3)</span><br><span class="line">_user_profile_df4 = pipeline_fit.transform(_user_profile_df3)</span><br><span class="line"><span class="comment"># pl_onehot_value列的值为稀疏矩阵，存储热编码的结果</span></span><br><span class="line"><span class="comment"># _user_profile_df4.printSchema()</span></span><br><span class="line"><span class="comment"># _user_profile_df4.show()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用热编码转换new_user_class_level的一维数据为多维</span></span><br><span class="line">stringindexer = StringIndexer(inputCol=<span class="string">&#x27;new_user_class_level&#x27;</span>, outputCol=<span class="string">&#x27;nucl_onehot_feature&#x27;</span>)</span><br><span class="line">encoder = OneHotEncoder(dropLast=<span class="literal">False</span>, inputCol=<span class="string">&#x27;nucl_onehot_feature&#x27;</span>, outputCol=<span class="string">&#x27;nucl_onehot_value&#x27;</span>)</span><br><span class="line">pipeline = Pipeline(stages=[stringindexer, encoder])</span><br><span class="line">pipeline_fit = pipeline.fit(_user_profile_df4)</span><br><span class="line">user_profile_df = pipeline_fit.transform(_user_profile_df4)</span><br><span class="line">user_profile_df.show()</span><br></pre></td></tr></table></figure><p>显示结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">+------+---------+------------+-----------------+---------+------------+--------------+----------+--------------------+-----------------+---------------+-------------------+-----------------+</span><br><span class="line">|userId|cms_segid|cms_group_id|final_gender_code|age_level|pvalue_level|shopping_level|occupation|new_user_class_level|pl_onehot_feature|pl_onehot_value|nucl_onehot_feature|nucl_onehot_value|</span><br><span class="line">+------+---------+------------+-----------------+---------+------------+--------------+----------+--------------------+-----------------+---------------+-------------------+-----------------+</span><br><span class="line">|   234|        0|           5|                2|        5|          -1|             3|         0|                   3|              0.0|  (4,[0],[1.0])|                2.0|    (5,[2],[1.0])|</span><br><span class="line">|   523|        5|           2|                2|        2|           1|             3|         1|                   2|              2.0|  (4,[2],[1.0])|                1.0|    (5,[1],[1.0])|</span><br><span class="line">|   612|        0|           8|                1|        2|           2|             3|         0|                  -1|              1.0|  (4,[1],[1.0])|                0.0|    (5,[0],[1.0])|</span><br><span class="line">|  1670|        0|           4|                2|        4|          -1|             1|         0|                  -1|              0.0|  (4,[0],[1.0])|                0.0|    (5,[0],[1.0])|</span><br><span class="line">|  2545|        0|          10|                1|        4|          -1|             3|         0|                  -1|              0.0|  (4,[0],[1.0])|                0.0|    (5,[0],[1.0])|</span><br><span class="line">|  3644|       49|           6|                2|        6|           2|             3|         0|                   2|              1.0|  (4,[1],[1.0])|                1.0|    (5,[1],[1.0])|</span><br><span class="line">|  5777|       44|           5|                2|        5|           2|             3|         0|                   2|              1.0|  (4,[1],[1.0])|                1.0|    (5,[1],[1.0])|</span><br><span class="line">|  6211|        0|           9|                1|        3|          -1|             3|         0|                   2|              0.0|  (4,[0],[1.0])|                1.0|    (5,[1],[1.0])|</span><br><span class="line">|  6355|        2|           1|                2|        1|           1|             3|         0|                   4|              2.0|  (4,[2],[1.0])|                3.0|    (5,[3],[1.0])|</span><br><span class="line">|  6823|       43|           5|                2|        5|           2|             3|         0|                   1|              1.0|  (4,[1],[1.0])|                4.0|    (5,[4],[1.0])|</span><br><span class="line">|  6972|        5|           2|                2|        2|           2|             3|         1|                   2|              1.0|  (4,[1],[1.0])|                1.0|    (5,[1],[1.0])|</span><br><span class="line">|  9293|        0|           5|                2|        5|          -1|             3|         0|                   4|              0.0|  (4,[0],[1.0])|                3.0|    (5,[3],[1.0])|</span><br><span class="line">|  9510|       55|           8|                1|        2|           2|             2|         0|                   2|              1.0|  (4,[1],[1.0])|                1.0|    (5,[1],[1.0])|</span><br><span class="line">| 10122|       33|           4|                2|        4|           2|             3|         0|                   2|              1.0|  (4,[1],[1.0])|                1.0|    (5,[1],[1.0])|</span><br><span class="line">| 10549|        0|           4|                2|        4|           2|             3|         0|                  -1|              1.0|  (4,[1],[1.0])|                0.0|    (5,[0],[1.0])|</span><br><span class="line">| 10812|        0|           4|                2|        4|          -1|             2|         0|                  -1|              0.0|  (4,[0],[1.0])|                0.0|    (5,[0],[1.0])|</span><br><span class="line">| 10912|        0|           4|                2|        4|           2|             3|         0|                  -1|              1.0|  (4,[1],[1.0])|                0.0|    (5,[0],[1.0])|</span><br><span class="line">| 10996|        0|           5|                2|        5|          -1|             3|         0|                   4|              0.0|  (4,[0],[1.0])|                3.0|    (5,[3],[1.0])|</span><br><span class="line">| 11256|        8|           2|                2|        2|           1|             3|         0|                   3|              2.0|  (4,[2],[1.0])|                2.0|    (5,[2],[1.0])|</span><br><span class="line">| 11310|       31|           4|                2|        4|           1|             3|         0|                   4|              2.0|  (4,[2],[1.0])|                3.0|    (5,[3],[1.0])|</span><br><span class="line">+------+---------+------------+-----------------+---------+------------+--------------+----------+--------------------+-----------------+---------------+-------------------+-----------------+</span><br><span class="line">only showing top 20 rows</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>热编码中：”pvalue_level”特征对应关系:</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+------------+----------------------+</span><br><span class="line">|pvalue_level|pl_onehot_feature     |</span><br><span class="line">+------------+----------------------+</span><br><span class="line">|          -1|                   0.0|</span><br><span class="line">|           3|                   3.0|</span><br><span class="line">|           1|                   2.0|</span><br><span class="line">|           2|                   1.0|</span><br><span class="line">+------------+----------------------+</span><br></pre></td></tr></table></figure><ul><li>“new_user_class_level”的特征对应关系</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+--------------------+------------------------+</span><br><span class="line">|new_user_class_level|nucl_onehot_feature     |</span><br><span class="line">+--------------------+------------------------+</span><br><span class="line">|                  -1|                     0.0|</span><br><span class="line">|                   3|                     2.0|</span><br><span class="line">|                   1|                     4.0|</span><br><span class="line">|                   4|                     3.0|</span><br><span class="line">|                   2|                     1.0|</span><br><span class="line">+--------------------+------------------------+</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user_profile_df.groupBy(<span class="string">&quot;pvalue_level&quot;</span>).<span class="built_in">min</span>(<span class="string">&quot;pl_onehot_feature&quot;</span>).show()</span><br><span class="line">user_profile_df.groupBy(<span class="string">&quot;new_user_class_level&quot;</span>).<span class="built_in">min</span>(<span class="string">&quot;nucl_onehot_feature&quot;</span>).show()</span><br></pre></td></tr></table></figure><p>显示结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">+------------+----------------------+</span><br><span class="line">|pvalue_level|min(pl_onehot_feature)|</span><br><span class="line">+------------+----------------------+</span><br><span class="line">|          -1|                   0.0|</span><br><span class="line">|           3|                   3.0|</span><br><span class="line">|           1|                   2.0|</span><br><span class="line">|           2|                   1.0|</span><br><span class="line">+------------+----------------------+</span><br><span class="line"></span><br><span class="line">+--------------------+------------------------+</span><br><span class="line">|new_user_class_level|min(nucl_onehot_feature)|</span><br><span class="line">+--------------------+------------------------+</span><br><span class="line">|                  -1|                     0.0|</span><br><span class="line">|                   3|                     2.0|</span><br><span class="line">|                   1|                     4.0|</span><br><span class="line">|                   4|                     3.0|</span><br><span class="line">|                   2|                     1.0|</span><br><span class="line">+--------------------+------------------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>Dataframe数据合并：<a href="https://spark.apache.org/docs/latest/api/python/pyspark.sql.html?highlight=join#pyspark.sql.DataFrame.join">pyspark.sql.DataFrame.join</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># raw_sample_df 和 ad_feature_df 合并条件</span></span><br><span class="line">condition = [raw_sample_df.adgroupId==ad_feature_df.adgroupId]</span><br><span class="line">_ = raw_sample_df.join(ad_feature_df, condition, <span class="string">&#x27;outer&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># _和user_profile_df合并条件</span></span><br><span class="line">condition2 = [_.userId==user_profile_df.userId]</span><br><span class="line">datasets = _.join(user_profile_df, condition2, <span class="string">&quot;outer&quot;</span>)</span><br><span class="line"><span class="comment"># 查看datasets的结构</span></span><br><span class="line">datasets.printSchema()</span><br><span class="line"><span class="comment"># 查看datasets条目数</span></span><br><span class="line">print(datasets.count())</span><br></pre></td></tr></table></figure><p>显示结果:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">root</span><br><span class="line"> |-- userId: integer (nullable = true)</span><br><span class="line"> |-- timestamp: long (nullable = true)</span><br><span class="line"> |-- adgroupId: integer (nullable = true)</span><br><span class="line"> |-- pid: string (nullable = true)</span><br><span class="line"> |-- nonclk: integer (nullable = true)</span><br><span class="line"> |-- clk: integer (nullable = true)</span><br><span class="line"> |-- pid_feature: double (nullable = true)</span><br><span class="line"> |-- pid_value: vector (nullable = true)</span><br><span class="line"> |-- adgroupId: integer (nullable = true)</span><br><span class="line"> |-- cateId: integer (nullable = true)</span><br><span class="line"> |-- campaignId: integer (nullable = true)</span><br><span class="line"> |-- customerId: integer (nullable = true)</span><br><span class="line"> |-- brandId: integer (nullable = true)</span><br><span class="line"> |-- price: float (nullable = true)</span><br><span class="line"> |-- userId: integer (nullable = true)</span><br><span class="line"> |-- cms_segid: integer (nullable = true)</span><br><span class="line"> |-- cms_group_id: integer (nullable = true)</span><br><span class="line"> |-- final_gender_code: integer (nullable = true)</span><br><span class="line"> |-- age_level: integer (nullable = true)</span><br><span class="line"> |-- pvalue_level: string (nullable = true)</span><br><span class="line"> |-- shopping_level: integer (nullable = true)</span><br><span class="line"> |-- occupation: integer (nullable = true)</span><br><span class="line"> |-- new_user_class_level: string (nullable = true)</span><br><span class="line"> |-- pl_onehot_feature: double (nullable = true)</span><br><span class="line"> |-- pl_onehot_value: vector (nullable = true)</span><br><span class="line"> |-- nucl_onehot_feature: double (nullable = true)</span><br><span class="line"> |-- nucl_onehot_value: vector (nullable = true)</span><br><span class="line"></span><br><span class="line">26557961</span><br></pre></td></tr></table></figure><ul><li>训练CTRModel_Normal：直接将对应的特征的特征值组合成对应的特征向量进行训练</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 剔除冗余、不需要的字段</span></span><br><span class="line">useful_cols = [</span><br><span class="line">    <span class="comment"># </span></span><br><span class="line">    <span class="comment"># 时间字段，划分训练集和测试集</span></span><br><span class="line">    <span class="string">&quot;timestamp&quot;</span>,</span><br><span class="line">    <span class="comment"># label目标值字段</span></span><br><span class="line">    <span class="string">&quot;clk&quot;</span>,  </span><br><span class="line">    <span class="comment"># 特征值字段</span></span><br><span class="line">    <span class="string">&quot;pid_value&quot;</span>,       <span class="comment"># 资源位的特征向量</span></span><br><span class="line">    <span class="string">&quot;price&quot;</span>,    <span class="comment"># 广告价格</span></span><br><span class="line">    <span class="string">&quot;cms_segid&quot;</span>,    <span class="comment"># 用户微群ID</span></span><br><span class="line">    <span class="string">&quot;cms_group_id&quot;</span>,    <span class="comment"># 用户组ID</span></span><br><span class="line">    <span class="string">&quot;final_gender_code&quot;</span>,    <span class="comment"># 用户性别特征，[1,2]</span></span><br><span class="line">    <span class="string">&quot;age_level&quot;</span>,    <span class="comment"># 年龄等级，1-</span></span><br><span class="line">    <span class="string">&quot;shopping_level&quot;</span>,</span><br><span class="line">    <span class="string">&quot;occupation&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pl_onehot_value&quot;</span>,</span><br><span class="line">    <span class="string">&quot;nucl_onehot_value&quot;</span></span><br><span class="line">]</span><br><span class="line"><span class="comment"># 筛选指定字段数据，构建新的数据集</span></span><br><span class="line">datasets_1 = datasets.select(*useful_cols)</span><br><span class="line"><span class="comment"># 由于前面使用的是outer方式合并的数据，产生了部分空值数据，这里必须先剔除掉</span></span><br><span class="line">datasets_1 = datasets_1.dropna()</span><br><span class="line">print(<span class="string">&quot;剔除空值数据后，还剩：&quot;</span>, datasets_1.count())</span><br></pre></td></tr></table></figure><p>显示结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">剔除空值数据后，还剩： 25029435</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>根据特征字段计算出特征向量，并划分出训练数据集和测试数据集</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark.ml.feature <span class="keyword">import</span> VectorAssembler</span><br><span class="line"><span class="comment"># 根据特征字段计算特征向量（[2::]，前两个不要，后面的作为特征，具体看上面的结构）</span></span><br><span class="line">datasets_1 = VectorAssembler().setInputCols(useful_cols[<span class="number">2</span>:]).setOutputCol(<span class="string">&quot;features&quot;</span>).transform(datasets_1)</span><br><span class="line"><span class="comment"># 训练数据集: 约7天的数据</span></span><br><span class="line">train_datasets_1 = datasets_1.<span class="built_in">filter</span>(datasets_1.timestamp&lt;=(<span class="number">1494691186</span>-<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>))</span><br><span class="line"><span class="comment"># 测试数据集：约1天的数据量</span></span><br><span class="line">test_datasets_1 = datasets_1.<span class="built_in">filter</span>(datasets_1.timestamp&gt;(<span class="number">1494691186</span>-<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>))</span><br><span class="line"><span class="comment"># 所有的特征的特征向量已经汇总到在features字段中</span></span><br><span class="line">train_datasets_1.show(<span class="number">5</span>)</span><br><span class="line">test_datasets_1.show(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>显示结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">+----------+---+-------------+------+---------+------------+-----------------+---------+--------------+----------+---------------+-----------------+--------------------+</span><br><span class="line">| timestamp|clk|    pid_value| price|cms_segid|cms_group_id|final_gender_code|age_level|shopping_level|occupation|pl_onehot_value|nucl_onehot_value|            features|</span><br><span class="line">+----------+---+-------------+------+---------+------------+-----------------+---------+--------------+----------+---------------+-----------------+--------------------+</span><br><span class="line">|1494261938|  0|(2,[1],[1.0])| 108.0|        0|          11|                1|        5|             3|         0|  (4,[0],[1.0])|    (5,[1],[1.0])|(18,[1,2,4,5,6,7,...|</span><br><span class="line">|1494261938|  0|(2,[1],[1.0])|1880.0|        0|          11|                1|        5|             3|         0|  (4,[0],[1.0])|    (5,[1],[1.0])|(18,[1,2,4,5,6,7,...|</span><br><span class="line">|1494553913|  0|(2,[1],[1.0])|2360.0|       19|           3|                2|        3|             3|         0|  (4,[1],[1.0])|    (5,[1],[1.0])|(18,[1,2,3,4,5,6,...|</span><br><span class="line">|1494553913|  0|(2,[1],[1.0])|2200.0|       19|           3|                2|        3|             3|         0|  (4,[1],[1.0])|    (5,[1],[1.0])|(18,[1,2,3,4,5,6,...|</span><br><span class="line">|1494436784|  0|(2,[1],[1.0])|5649.0|       19|           3|                2|        3|             3|         0|  (4,[1],[1.0])|    (5,[1],[1.0])|(18,[1,2,3,4,5,6,...|</span><br><span class="line">+----------+---+-------------+------+---------+------------+-----------------+---------+--------------+----------+---------------+-----------------+--------------------+</span><br><span class="line">only showing top 5 rows</span><br><span class="line"></span><br><span class="line">+----------+---+-------------+-----+---------+------------+-----------------+---------+--------------+----------+---------------+-----------------+--------------------+</span><br><span class="line">| timestamp|clk|    pid_value|price|cms_segid|cms_group_id|final_gender_code|age_level|shopping_level|occupation|pl_onehot_value|nucl_onehot_value|            features|</span><br><span class="line">+----------+---+-------------+-----+---------+------------+-----------------+---------+--------------+----------+---------------+-----------------+--------------------+</span><br><span class="line">|1494677292|  0|(2,[1],[1.0])|176.0|       19|           3|                2|        3|             3|         0|  (4,[1],[1.0])|    (5,[1],[1.0])|(18,[1,2,3,4,5,6,...|</span><br><span class="line">|1494677292|  0|(2,[1],[1.0])|698.0|       19|           3|                2|        3|             3|         0|  (4,[1],[1.0])|    (5,[1],[1.0])|(18,[1,2,3,4,5,6,...|</span><br><span class="line">|1494677292|  0|(2,[1],[1.0])|697.0|       19|           3|                2|        3|             3|         0|  (4,[1],[1.0])|    (5,[1],[1.0])|(18,[1,2,3,4,5,6,...|</span><br><span class="line">|1494684007|  0|(2,[1],[1.0])|247.0|       18|           3|                2|        3|             3|         0|  (4,[1],[1.0])|    (5,[4],[1.0])|(18,[1,2,3,4,5,6,...|</span><br><span class="line">|1494684007|  0|(2,[1],[1.0])|109.0|       18|           3|                2|        3|             3|         0|  (4,[1],[1.0])|    (5,[4],[1.0])|(18,[1,2,3,4,5,6,...|</span><br><span class="line">+----------+---+-------------+-----+---------+------------+-----------------+---------+--------------+----------+---------------+-----------------+--------------------+</span><br><span class="line">only showing top 5 rows</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>创建逻辑回归训练器，并训练模型：<a href="https://spark.apache.org/docs/latest/api/python/pyspark.ml.html?highlight=logisticregression#pyspark.ml.classification.LogisticRegression">LogisticRegression</a>、 <a href="https://spark.apache.org/docs/latest/api/python/pyspark.ml.html?highlight=logisticregression#pyspark.ml.classification.LogisticRegressionModel">LogisticRegressionModel</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark.ml.classification <span class="keyword">import</span> LogisticRegression</span><br><span class="line">lr = LogisticRegression()</span><br><span class="line"><span class="comment"># 设置目标字段、特征值字段并训练</span></span><br><span class="line">model = lr.setLabelCol(<span class="string">&quot;clk&quot;</span>).setFeaturesCol(<span class="string">&quot;features&quot;</span>).fit(train_datasets_1)</span><br><span class="line"><span class="comment"># 对模型进行存储</span></span><br><span class="line">model.save(<span class="string">&quot;hdfs://localhost:9000/models/CTRModel_Normal.obj&quot;</span>)</span><br><span class="line"><span class="comment"># 载入训练好的模型</span></span><br><span class="line"><span class="keyword">from</span> pyspark.ml.classification <span class="keyword">import</span> LogisticRegressionModel</span><br><span class="line">model = LogisticRegressionModel.load(<span class="string">&quot;hdfs://localhost:9000/models/CTRModel_Normal.obj&quot;</span>)</span><br><span class="line"><span class="comment"># 根据测试数据进行预测（默认按照预测概率的50%进行划分的。所以预测都是0）</span></span><br><span class="line">result_1 = model.transform(test_datasets_1)</span><br><span class="line"><span class="comment"># 按probability升序排列数据，probability表示预测结果的概率</span></span><br><span class="line"><span class="comment"># 如果预测值是0，其概率是0.9248，那么反之可推出1的可能性就是1-0.9248=0.0752，即点击概率约为7.52%</span></span><br><span class="line"><span class="comment"># 因为前面提到广告的点击率一般都比较低，所以预测值通常都是0，因此通常需要反减得出点击的概率</span></span><br><span class="line">result_1.select(<span class="string">&quot;clk&quot;</span>, <span class="string">&quot;price&quot;</span>, <span class="string">&quot;probability&quot;</span>, <span class="string">&quot;prediction&quot;</span>).sort(<span class="string">&quot;probability&quot;</span>).show(<span class="number">100</span>)</span><br></pre></td></tr></table></figure><p>显示结果:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">+---+-----------+--------------------+----------+</span><br><span class="line">|clk|      price|         probability|prediction|</span><br><span class="line">+---+-----------+--------------------+----------+</span><br><span class="line">|  0|      1.0E8|[0.86822033939259...|       0.0|</span><br><span class="line">|  0|      1.0E8|[0.88410457194969...|       0.0|</span><br><span class="line">|  0|      1.0E8|[0.89175497837562...|       0.0|</span><br><span class="line">|  1|5.5555556E7|[0.92481456486873...|       0.0|</span><br><span class="line">|  0|      1.5E7|[0.93741450446939...|       0.0|</span><br><span class="line">|  0|      1.5E7|[0.93757135079959...|       0.0|</span><br><span class="line">|  0|      1.5E7|[0.93834723093801...|       0.0|</span><br><span class="line">|  0|     1099.0|[0.93972095713786...|       0.0|</span><br><span class="line">|  0|      338.0|[0.93972134993018...|       0.0|</span><br><span class="line">|  0|      311.0|[0.93972136386626...|       0.0|</span><br><span class="line">|  0|      300.0|[0.93972136954393...|       0.0|</span><br><span class="line">|  0|      278.0|[0.93972138089925...|       0.0|</span><br><span class="line">|  0|      188.0|[0.93972142735283...|       0.0|</span><br><span class="line">|  0|      176.0|[0.93972143354663...|       0.0|</span><br><span class="line">|  0|      168.0|[0.93972143767584...|       0.0|</span><br><span class="line">|  0|      158.0|[0.93972144283734...|       0.0|</span><br><span class="line">|  1|      138.0|[0.93972145316035...|       0.0|</span><br><span class="line">|  0|      125.0|[0.93972145987031...|       0.0|</span><br><span class="line">|  0|      119.0|[0.93972146296721...|       0.0|</span><br><span class="line">|  0|       78.0|[0.93972148412937...|       0.0|</span><br><span class="line">|  0|      59.98|[0.93972149343040...|       0.0|</span><br><span class="line">|  0|       58.0|[0.93972149445238...|       0.0|</span><br><span class="line">|  0|       56.0|[0.93972149548468...|       0.0|</span><br><span class="line">|  0|       38.0|[0.93972150477538...|       0.0|</span><br><span class="line">|  1|       35.0|[0.93972150632383...|       0.0|</span><br><span class="line">|  0|       33.0|[0.93972150735613...|       0.0|</span><br><span class="line">|  0|       30.0|[0.93972150890458...|       0.0|</span><br><span class="line">|  0|       27.6|[0.93972151014334...|       0.0|</span><br><span class="line">|  0|       18.0|[0.93972151509838...|       0.0|</span><br><span class="line">|  0|       30.0|[0.93980311191464...|       0.0|</span><br><span class="line">|  0|       28.0|[0.93980311294563...|       0.0|</span><br><span class="line">|  0|       25.0|[0.93980311449212...|       0.0|</span><br><span class="line">|  0|      688.0|[0.93999362023323...|       0.0|</span><br><span class="line">|  0|      339.0|[0.93999379960808...|       0.0|</span><br><span class="line">|  0|      335.0|[0.93999380166395...|       0.0|</span><br><span class="line">|  0|      220.0|[0.93999386077017...|       0.0|</span><br><span class="line">|  0|      176.0|[0.93999388338470...|       0.0|</span><br><span class="line">|  0|      158.0|[0.93999389263610...|       0.0|</span><br><span class="line">|  0|      158.0|[0.93999389263610...|       0.0|</span><br><span class="line">|  1|      149.0|[0.93999389726180...|       0.0|</span><br><span class="line">|  0|      122.5|[0.93999391088191...|       0.0|</span><br><span class="line">|  0|       99.0|[0.93999392296012...|       0.0|</span><br><span class="line">|  0|       88.0|[0.93999392861375...|       0.0|</span><br><span class="line">|  0|       79.0|[0.93999393323945...|       0.0|</span><br><span class="line">|  0|       75.0|[0.93999393529532...|       0.0|</span><br><span class="line">|  0|       68.0|[0.93999393889308...|       0.0|</span><br><span class="line">|  0|       68.0|[0.93999393889308...|       0.0|</span><br><span class="line">|  0|       59.9|[0.93999394305620...|       0.0|</span><br><span class="line">|  0|      44.98|[0.93999395072458...|       0.0|</span><br><span class="line">|  0|       35.5|[0.93999395559698...|       0.0|</span><br><span class="line">|  0|       33.0|[0.93999395688189...|       0.0|</span><br><span class="line">|  0|       32.8|[0.93999395698469...|       0.0|</span><br><span class="line">|  0|       30.0|[0.93999395842379...|       0.0|</span><br><span class="line">|  0|       28.0|[0.93999395945172...|       0.0|</span><br><span class="line">|  0|       19.9|[0.93999396361485...|       0.0|</span><br><span class="line">|  0|       19.8|[0.93999396366625...|       0.0|</span><br><span class="line">|  0|       19.8|[0.93999396366625...|       0.0|</span><br><span class="line">|  0|       12.0|[0.93999396767518...|       0.0|</span><br><span class="line">|  0|        6.7|[0.93999397039920...|       0.0|</span><br><span class="line">|  0|      568.0|[0.94000369247841...|       0.0|</span><br><span class="line">|  0|      398.0|[0.94000377983931...|       0.0|</span><br><span class="line">|  0|      158.0|[0.94000390317214...|       0.0|</span><br><span class="line">|  0|     5718.0|[0.94001886593718...|       0.0|</span><br><span class="line">|  0|     5718.0|[0.94001886593718...|       0.0|</span><br><span class="line">|  1|     5608.0|[0.94001892245145...|       0.0|</span><br><span class="line">|  0|     4120.0|[0.94001968693052...|       0.0|</span><br><span class="line">|  0|     1027.5|[0.94002127571285...|       0.0|</span><br><span class="line">|  0|     1027.5|[0.94002127571285...|       0.0|</span><br><span class="line">|  0|      989.0|[0.94002129549211...|       0.0|</span><br><span class="line">|  0|      672.0|[0.94002145834965...|       0.0|</span><br><span class="line">|  0|      660.0|[0.94002146451460...|       0.0|</span><br><span class="line">|  0|      598.0|[0.94002149636681...|       0.0|</span><br><span class="line">|  0|      598.0|[0.94002149636681...|       0.0|</span><br><span class="line">|  0|      563.0|[0.94002151434789...|       0.0|</span><br><span class="line">|  0|      509.0|[0.94002154209012...|       0.0|</span><br><span class="line">|  0|      509.0|[0.94002154209012...|       0.0|</span><br><span class="line">|  0|      500.0|[0.94002154671382...|       0.0|</span><br><span class="line">|  0|      498.0|[0.94002154774131...|       0.0|</span><br><span class="line">|  0|      440.0|[0.94002157753851...|       0.0|</span><br><span class="line">|  0|      430.0|[0.94002158267595...|       0.0|</span><br><span class="line">|  0|      388.0|[0.94002160425322...|       0.0|</span><br><span class="line">|  0|      369.0|[0.94002161401436...|       0.0|</span><br><span class="line">|  0|      368.0|[0.94002161452811...|       0.0|</span><br><span class="line">|  0|      368.0|[0.94002161452811...|       0.0|</span><br><span class="line">|  0|      368.0|[0.94002161452811...|       0.0|</span><br><span class="line">|  0|      368.0|[0.94002161452811...|       0.0|</span><br><span class="line">|  0|      366.0|[0.94002161555560...|       0.0|</span><br><span class="line">|  0|      366.0|[0.94002161555560...|       0.0|</span><br><span class="line">|  0|      348.0|[0.94002162480299...|       0.0|</span><br><span class="line">|  0|      299.0|[0.94002164997645...|       0.0|</span><br><span class="line">|  0|      299.0|[0.94002164997645...|       0.0|</span><br><span class="line">|  0|      299.0|[0.94002164997645...|       0.0|</span><br><span class="line">|  0|      298.0|[0.94002165049020...|       0.0|</span><br><span class="line">|  0|      297.0|[0.94002165100394...|       0.0|</span><br><span class="line">|  0|      278.0|[0.94002166076508...|       0.0|</span><br><span class="line">|  1|      275.0|[0.94002166230631...|       0.0|</span><br><span class="line">|  0|      275.0|[0.94002166230631...|       0.0|</span><br><span class="line">|  0|      273.0|[0.94002166333380...|       0.0|</span><br><span class="line">|  0|      258.0|[0.94002167103995...|       0.0|</span><br><span class="line">|  0|      256.0|[0.94002167206744...|       0.0|</span><br><span class="line">+---+-----------+--------------------+----------+</span><br><span class="line">only showing top 100 rows</span><br></pre></td></tr></table></figure><ul><li>查看样本中点击的被实际点击的条目的预测情况</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result_1.<span class="built_in">filter</span>(result_1.clk==<span class="number">1</span>).select(<span class="string">&quot;clk&quot;</span>, <span class="string">&quot;price&quot;</span>, <span class="string">&quot;probability&quot;</span>, <span class="string">&quot;prediction&quot;</span>).sort(<span class="string">&quot;probability&quot;</span>).show(<span class="number">100</span>)</span><br></pre></td></tr></table></figure><p>显示结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">+---+-----------+--------------------+----------+</span><br><span class="line">|clk|      price|         probability|prediction|</span><br><span class="line">+---+-----------+--------------------+----------+</span><br><span class="line">|  1|5.5555556E7|[0.92481456486873...|       0.0|</span><br><span class="line">|  1|      138.0|[0.93972145316035...|       0.0|</span><br><span class="line">|  1|       35.0|[0.93972150632383...|       0.0|</span><br><span class="line">|  1|      149.0|[0.93999389726180...|       0.0|</span><br><span class="line">|  1|     5608.0|[0.94001892245145...|       0.0|</span><br><span class="line">|  1|      275.0|[0.94002166230631...|       0.0|</span><br><span class="line">|  1|       35.0|[0.94002178560473...|       0.0|</span><br><span class="line">|  1|       49.0|[0.94004219516957...|       0.0|</span><br><span class="line">|  1|      915.0|[0.94021082858784...|       0.0|</span><br><span class="line">|  1|      598.0|[0.94021099096349...|       0.0|</span><br><span class="line">|  1|      568.0|[0.94021100633025...|       0.0|</span><br><span class="line">|  1|      398.0|[0.94021109340848...|       0.0|</span><br><span class="line">|  1|      368.0|[0.94021110877521...|       0.0|</span><br><span class="line">|  1|      299.0|[0.94021114411869...|       0.0|</span><br><span class="line">|  1|      278.0|[0.94021115487539...|       0.0|</span><br><span class="line">|  1|      259.0|[0.94021116460765...|       0.0|</span><br><span class="line">|  1|      258.0|[0.94021116511987...|       0.0|</span><br><span class="line">|  1|      258.0|[0.94021116511987...|       0.0|</span><br><span class="line">|  1|      258.0|[0.94021116511987...|       0.0|</span><br><span class="line">|  1|      195.0|[0.94021119738998...|       0.0|</span><br><span class="line">|  1|      188.0|[0.94021120097554...|       0.0|</span><br><span class="line">|  1|      178.0|[0.94021120609778...|       0.0|</span><br><span class="line">|  1|      159.0|[0.94021121583003...|       0.0|</span><br><span class="line">|  1|      149.0|[0.94021122095226...|       0.0|</span><br><span class="line">|  1|      138.0|[0.94021122658672...|       0.0|</span><br><span class="line">|  1|       58.0|[0.94021126756458...|       0.0|</span><br><span class="line">|  1|       49.0|[0.94021127217459...|       0.0|</span><br><span class="line">|  1|       35.0|[0.94021127934572...|       0.0|</span><br><span class="line">|  1|       25.0|[0.94021128446795...|       0.0|</span><br><span class="line">|  1|     2890.0|[0.94028789742257...|       0.0|</span><br><span class="line">|  1|      220.0|[0.94028926340218...|       0.0|</span><br><span class="line">|  1|      188.0|[0.94031410659516...|       0.0|</span><br><span class="line">|  1|       68.0|[0.94031416796289...|       0.0|</span><br><span class="line">|  1|       58.0|[0.94031417307687...|       0.0|</span><br><span class="line">|  1|      198.0|[0.94035413548387...|       0.0|</span><br><span class="line">|  1|      208.0|[0.94039204931181...|       0.0|</span><br><span class="line">|  1|     8888.0|[0.94045237642030...|       0.0|</span><br><span class="line">|  1|      519.0|[0.94045664687995...|       0.0|</span><br><span class="line">|  1|      478.0|[0.94045666780037...|       0.0|</span><br><span class="line">|  1|      349.0|[0.94045673362308...|       0.0|</span><br><span class="line">|  1|      348.0|[0.94045673413334...|       0.0|</span><br><span class="line">|  1|      316.0|[0.94045675046144...|       0.0|</span><br><span class="line">|  1|      298.0|[0.94045675964600...|       0.0|</span><br><span class="line">|  1|      298.0|[0.94045675964600...|       0.0|</span><br><span class="line">|  1|      199.0|[0.94045681016104...|       0.0|</span><br><span class="line">|  1|      199.0|[0.94045681016104...|       0.0|</span><br><span class="line">|  1|      198.0|[0.94045681067129...|       0.0|</span><br><span class="line">|  1|      187.1|[0.94045681623305...|       0.0|</span><br><span class="line">|  1|      176.0|[0.94045682189685...|       0.0|</span><br><span class="line">|  1|      168.0|[0.94045682597887...|       0.0|</span><br><span class="line">|  1|      160.0|[0.94045683006090...|       0.0|</span><br><span class="line">|  1|      158.0|[0.94045683108140...|       0.0|</span><br><span class="line">|  1|      158.0|[0.94045683108140...|       0.0|</span><br><span class="line">|  1|      135.0|[0.94045684281721...|       0.0|</span><br><span class="line">|  1|      129.0|[0.94045684587872...|       0.0|</span><br><span class="line">|  1|      127.0|[0.94045684689923...|       0.0|</span><br><span class="line">|  1|      125.0|[0.94045684791973...|       0.0|</span><br><span class="line">|  1|      124.0|[0.94045684842999...|       0.0|</span><br><span class="line">|  1|      118.0|[0.94045685149150...|       0.0|</span><br><span class="line">|  1|      109.0|[0.94045685608377...|       0.0|</span><br><span class="line">|  1|      108.0|[0.94045685659402...|       0.0|</span><br><span class="line">|  1|       99.0|[0.94045686118630...|       0.0|</span><br><span class="line">|  1|       98.0|[0.94045686169655...|       0.0|</span><br><span class="line">|  1|       79.8|[0.94045687098314...|       0.0|</span><br><span class="line">|  1|       79.0|[0.94045687139134...|       0.0|</span><br><span class="line">|  1|       77.0|[0.94045687241185...|       0.0|</span><br><span class="line">|  1|       72.5|[0.94045687470798...|       0.0|</span><br><span class="line">|  1|       69.0|[0.94045687649386...|       0.0|</span><br><span class="line">|  1|       68.0|[0.94045687700412...|       0.0|</span><br><span class="line">|  1|       60.0|[0.94045688108613...|       0.0|</span><br><span class="line">|  1|      43.98|[0.94045688926037...|       0.0|</span><br><span class="line">|  1|       40.0|[0.94045689129118...|       0.0|</span><br><span class="line">|  1|       39.9|[0.94045689134220...|       0.0|</span><br><span class="line">|  1|       39.6|[0.94045689149528...|       0.0|</span><br><span class="line">|  1|       32.0|[0.94045689537319...|       0.0|</span><br><span class="line">|  1|       31.0|[0.94045689588345...|       0.0|</span><br><span class="line">|  1|      25.98|[0.94045689844491...|       0.0|</span><br><span class="line">|  1|       23.0|[0.94045689996546...|       0.0|</span><br><span class="line">|  1|       19.0|[0.94045690200647...|       0.0|</span><br><span class="line">|  1|       16.9|[0.94045690307800...|       0.0|</span><br><span class="line">|  1|       10.0|[0.94045690659874...|       0.0|</span><br><span class="line">|  1|        3.5|[0.94045690991538...|       0.0|</span><br><span class="line">|  1|        3.5|[0.94045690991538...|       0.0|</span><br><span class="line">|  1|        0.4|[0.94045691149716...|       0.0|</span><br><span class="line">|  1|     3960.0|[0.94055740378069...|       0.0|</span><br><span class="line">|  1|     3088.0|[0.94055784801535...|       0.0|</span><br><span class="line">|  1|     1689.0|[0.94055856072019...|       0.0|</span><br><span class="line">|  1|      998.0|[0.94055891273943...|       0.0|</span><br><span class="line">|  1|      888.0|[0.94055896877705...|       0.0|</span><br><span class="line">|  1|      788.0|[0.94055901972029...|       0.0|</span><br><span class="line">|  1|      737.0|[0.94055904570133...|       0.0|</span><br><span class="line">|  1|      629.0|[0.94055910071996...|       0.0|</span><br><span class="line">|  1|      599.0|[0.94055911600291...|       0.0|</span><br><span class="line">|  1|      599.0|[0.94055911600291...|       0.0|</span><br><span class="line">|  1|      599.0|[0.94055911600291...|       0.0|</span><br><span class="line">|  1|      499.0|[0.94055916694603...|       0.0|</span><br><span class="line">|  1|      468.0|[0.94055918273839...|       0.0|</span><br><span class="line">|  1|      459.0|[0.94055918732327...|       0.0|</span><br><span class="line">|  1|      399.0|[0.94055921788912...|       0.0|</span><br><span class="line">|  1|      399.0|[0.94055921788912...|       0.0|</span><br><span class="line">+---+-----------+--------------------+----------+</span><br><span class="line">only showing top 100 rows</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>训练CTRModel_AllOneHot</p><ul><li>“pid_value”, 类别型特征，已被转换为多维特征==&gt; 2维</li><li>“price”, 统计型特征 ===&gt; 1维</li><li>“cms_segid”, 类别型特征，约97个分类 ===&gt; 1维</li><li>“cms_group_id”, 类别型特征，约13个分类 ==&gt; 1维</li><li>“final_gender_code”, 类别型特征，2个分类 ==&gt; 1维</li><li>“age_level”, 类别型特征，7个分类 ==&gt; 1维</li><li>“shopping_level”, 类别型特征，3个分类 ==&gt; 1维</li><li>“occupation”, 类别型特征，2个分类 ==&gt; 1维</li><li>“pl_onehot_value”, 类别型特征，已被转换为多维特征 ==&gt; 4维</li><li>“nucl_onehot_value” 类别型特征，已被转换为多维特征 ==&gt; 5维</li></ul><p>类别性特征都可以考虑进行热独编码，将单一变量变为多变量，相当于增加了相关特征的数量</p><ul><li>“cms_segid”, 类别型特征，约97个分类 ===&gt; 97维 舍弃</li><li>“cms_group_id”, 类别型特征，约13个分类 ==&gt; 13维</li><li>“final_gender_code”, 类别型特征，2个分类 ==&gt; 2维</li><li>“age_level”, 类别型特征，7个分类 ==&gt;7维</li><li>“shopping_level”, 类别型特征，3个分类 ==&gt; 3维</li><li>“occupation”, 类别型特征，2个分类 ==&gt; 2维</li></ul><p>但由于cms_segid分类过多，这里考虑舍弃，避免数据过于稀疏</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">datasets_1.first()</span><br></pre></td></tr></table></figure><p>显示结果:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">datasets_1.first()</span><br><span class="line">datasets_1.first()</span><br><span class="line">Row(timestamp=1494261938, clk=0, pid_value=SparseVector(2, &#123;1: 1.0&#125;), price=1880.0, cms_segid=0, cms_group_id=11, final_gender_code=1, age_level=5, shopping_level=3, occupation=0, pl_onehot_value=SparseVector(4, &#123;0: 1.0&#125;), nucl_onehot_value=SparseVector(5, &#123;1: 1.0&#125;), features=SparseVector(18, &#123;1: 1.0, 2: 1880.0, 4: 11.0, 5: 1.0, 6: 5.0, 7: 3.0, 9: 1.0, 14: 1.0&#125;))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先将下列五列数据转为字符串类型，以便于进行热独编码</span></span><br><span class="line"><span class="comment"># - &quot;cms_group_id&quot;,   类别型特征，约13个分类 ==&gt; 13</span></span><br><span class="line"><span class="comment"># - &quot;final_gender_code&quot;, 类别型特征，2个分类 ==&gt; 2</span></span><br><span class="line"><span class="comment"># - &quot;age_level&quot;,    类别型特征，7个分类 ==&gt;7</span></span><br><span class="line"><span class="comment"># - &quot;shopping_level&quot;,    类别型特征，3个分类 ==&gt; 3</span></span><br><span class="line"><span class="comment"># - &quot;occupation&quot;,    类别型特征，2个分类 ==&gt; 2</span></span><br><span class="line"></span><br><span class="line">datasets_2 = datasets.withColumn(<span class="string">&quot;cms_group_id&quot;</span>, datasets.cms_group_id.cast(StringType()))\</span><br><span class="line">    .withColumn(<span class="string">&quot;final_gender_code&quot;</span>, datasets.final_gender_code.cast(StringType()))\</span><br><span class="line">    .withColumn(<span class="string">&quot;age_level&quot;</span>, datasets.age_level.cast(StringType()))\</span><br><span class="line">    .withColumn(<span class="string">&quot;shopping_level&quot;</span>, datasets.shopping_level.cast(StringType()))\</span><br><span class="line">    .withColumn(<span class="string">&quot;occupation&quot;</span>, datasets.occupation.cast(StringType()))</span><br><span class="line">useful_cols_2 = [</span><br><span class="line">    <span class="comment"># 时间值，划分训练集和测试集</span></span><br><span class="line">    <span class="string">&quot;timestamp&quot;</span>,</span><br><span class="line">    <span class="comment"># label目标值</span></span><br><span class="line">    <span class="string">&quot;clk&quot;</span>,  </span><br><span class="line">    <span class="comment"># 特征值</span></span><br><span class="line">    <span class="string">&quot;price&quot;</span>,</span><br><span class="line">    <span class="string">&quot;cms_group_id&quot;</span>,</span><br><span class="line">    <span class="string">&quot;final_gender_code&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age_level&quot;</span>,</span><br><span class="line">    <span class="string">&quot;shopping_level&quot;</span>,</span><br><span class="line">    <span class="string">&quot;occupation&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pid_value&quot;</span>, </span><br><span class="line">    <span class="string">&quot;pl_onehot_value&quot;</span>,</span><br><span class="line">    <span class="string">&quot;nucl_onehot_value&quot;</span></span><br><span class="line">]</span><br><span class="line"><span class="comment"># 筛选指定字段数据</span></span><br><span class="line">datasets_2 = datasets_2.select(*useful_cols_2)</span><br><span class="line"><span class="comment"># 由于前面使用的是outer方式合并的数据，产生了部分空值数据，这里必须先剔除掉</span></span><br><span class="line">datasets_2 = datasets_2.dropna()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pyspark.ml.feature <span class="keyword">import</span> OneHotEncoder</span><br><span class="line"><span class="keyword">from</span> pyspark.ml.feature <span class="keyword">import</span> StringIndexer</span><br><span class="line"><span class="keyword">from</span> pyspark.ml <span class="keyword">import</span> Pipeline</span><br><span class="line"><span class="comment"># 热编码处理函数封装</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">oneHotEncoder</span>(<span class="params">col1, col2, col3, data</span>):</span></span><br><span class="line">    stringindexer = StringIndexer(inputCol=col1, outputCol=col2)</span><br><span class="line">    encoder = OneHotEncoder(dropLast=<span class="literal">False</span>, inputCol=col2, outputCol=col3)</span><br><span class="line">    pipeline = Pipeline(stages=[stringindexer, encoder])</span><br><span class="line">    pipeline_fit = pipeline.fit(data)</span><br><span class="line">    <span class="keyword">return</span> pipeline_fit.transform(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对这五个字段进行热独编码</span></span><br><span class="line"><span class="comment">#     &quot;cms_group_id&quot;,</span></span><br><span class="line"><span class="comment">#     &quot;final_gender_code&quot;,</span></span><br><span class="line"><span class="comment">#     &quot;age_level&quot;,</span></span><br><span class="line"><span class="comment">#     &quot;shopping_level&quot;,</span></span><br><span class="line"><span class="comment">#     &quot;occupation&quot;,</span></span><br><span class="line">datasets_2 = oneHotEncoder(<span class="string">&quot;cms_group_id&quot;</span>, <span class="string">&quot;cms_group_id_feature&quot;</span>, <span class="string">&quot;cms_group_id_value&quot;</span>, datasets_2)</span><br><span class="line">datasets_2 = oneHotEncoder(<span class="string">&quot;final_gender_code&quot;</span>, <span class="string">&quot;final_gender_code_feature&quot;</span>, <span class="string">&quot;final_gender_code_value&quot;</span>, datasets_2)</span><br><span class="line">datasets_2 = oneHotEncoder(<span class="string">&quot;age_level&quot;</span>, <span class="string">&quot;age_level_feature&quot;</span>, <span class="string">&quot;age_level_value&quot;</span>, datasets_2)</span><br><span class="line">datasets_2 = oneHotEncoder(<span class="string">&quot;shopping_level&quot;</span>, <span class="string">&quot;shopping_level_feature&quot;</span>, <span class="string">&quot;shopping_level_value&quot;</span>, datasets_2)</span><br><span class="line">datasets_2 = oneHotEncoder(<span class="string">&quot;occupation&quot;</span>, <span class="string">&quot;occupation_feature&quot;</span>, <span class="string">&quot;occupation_value&quot;</span>, datasets_2)</span><br></pre></td></tr></table></figure><ul><li>“cms_group_id”特征对应关系：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">+------------+-------------------------+</span><br><span class="line">|cms_group_id|min(cms_group_id_feature)|</span><br><span class="line">+------------+-------------------------+</span><br><span class="line">|           7|                      9.0|</span><br><span class="line">|          11|                      6.0|</span><br><span class="line">|           3|                      0.0|</span><br><span class="line">|           8|                      8.0|</span><br><span class="line">|           0|                     12.0|</span><br><span class="line">|           5|                      3.0|</span><br><span class="line">|           6|                     10.0|</span><br><span class="line">|           9|                      5.0|</span><br><span class="line">|           1|                      7.0|</span><br><span class="line">|          10|                      4.0|</span><br><span class="line">|           4|                      1.0|</span><br><span class="line">|          12|                     11.0|</span><br><span class="line">|           2|                      2.0|</span><br><span class="line">+------------+-------------------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>“final_gender_code”特征对应关系：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+-----------------+------------------------------+</span><br><span class="line">|final_gender_code|min(final_gender_code_feature)|</span><br><span class="line">+-----------------+------------------------------+</span><br><span class="line">|                1|                           1.0|</span><br><span class="line">|                2|                           0.0|</span><br><span class="line">+-----------------+------------------------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>“age_level”特征对应关系：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">+---------+----------------------+</span><br><span class="line">|age_level|min(age_level_feature)|</span><br><span class="line">+---------+----------------------+</span><br><span class="line">|        3|                   0.0|</span><br><span class="line">|        0|                   6.0|</span><br><span class="line">|        5|                   2.0|</span><br><span class="line">|        6|                   5.0|</span><br><span class="line">|        1|                   4.0|</span><br><span class="line">|        4|                   1.0|</span><br><span class="line">|        2|                   3.0|</span><br><span class="line">+---------+----------------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>“shopping_level”特征对应关系：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">|shopping_level|min(shopping_level_feature)|</span><br><span class="line">+--------------+---------------------------+</span><br><span class="line">|             3|                        0.0|</span><br><span class="line">|             1|                        2.0|</span><br><span class="line">|             2|                        1.0|</span><br><span class="line">+--------------+---------------------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>“occupation”特征对应关系：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+----------+-----------------------+</span><br><span class="line">|occupation|min(occupation_feature)|</span><br><span class="line">+----------+-----------------------+</span><br><span class="line">|         0|                    0.0|</span><br><span class="line">|         1|                    1.0|</span><br><span class="line">+----------+-----------------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">datasets_2.groupBy(<span class="string">&quot;cms_group_id&quot;</span>).<span class="built_in">min</span>(<span class="string">&quot;cms_group_id_feature&quot;</span>).show()</span><br><span class="line">datasets_2.groupBy(<span class="string">&quot;final_gender_code&quot;</span>).<span class="built_in">min</span>(<span class="string">&quot;final_gender_code_feature&quot;</span>).show()</span><br><span class="line">datasets_2.groupBy(<span class="string">&quot;age_level&quot;</span>).<span class="built_in">min</span>(<span class="string">&quot;age_level_feature&quot;</span>).show()</span><br><span class="line">datasets_2.groupBy(<span class="string">&quot;shopping_level&quot;</span>).<span class="built_in">min</span>(<span class="string">&quot;shopping_level_feature&quot;</span>).show()</span><br><span class="line">datasets_2.groupBy(<span class="string">&quot;occupation&quot;</span>).<span class="built_in">min</span>(<span class="string">&quot;occupation_feature&quot;</span>).show()</span><br></pre></td></tr></table></figure><p>显示结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">+------------+-------------------------+</span><br><span class="line">|cms_group_id|min(cms_group_id_feature)|</span><br><span class="line">+------------+-------------------------+</span><br><span class="line">|           7|                      9.0|</span><br><span class="line">|          11|                      6.0|</span><br><span class="line">|           3|                      0.0|</span><br><span class="line">|           8|                      8.0|</span><br><span class="line">|           0|                     12.0|</span><br><span class="line">|           5|                      3.0|</span><br><span class="line">|           6|                     10.0|</span><br><span class="line">|           9|                      5.0|</span><br><span class="line">|           1|                      7.0|</span><br><span class="line">|          10|                      4.0|</span><br><span class="line">|           4|                      1.0|</span><br><span class="line">|          12|                     11.0|</span><br><span class="line">|           2|                      2.0|</span><br><span class="line">+------------+-------------------------+</span><br><span class="line"></span><br><span class="line">+-----------------+------------------------------+</span><br><span class="line">|final_gender_code|min(final_gender_code_feature)|</span><br><span class="line">+-----------------+------------------------------+</span><br><span class="line">|                1|                           1.0|</span><br><span class="line">|                2|                           0.0|</span><br><span class="line">+-----------------+------------------------------+</span><br><span class="line"></span><br><span class="line">+---------+----------------------+</span><br><span class="line">|age_level|min(age_level_feature)|</span><br><span class="line">+---------+----------------------+</span><br><span class="line">|        3|                   0.0|</span><br><span class="line">|        0|                   6.0|</span><br><span class="line">|        5|                   2.0|</span><br><span class="line">|        6|                   5.0|</span><br><span class="line">|        1|                   4.0|</span><br><span class="line">|        4|                   1.0|</span><br><span class="line">|        2|                   3.0|</span><br><span class="line">+---------+----------------------+</span><br><span class="line"></span><br><span class="line">+--------------+---------------------------+</span><br><span class="line">|shopping_level|min(shopping_level_feature)|</span><br><span class="line">+--------------+---------------------------+</span><br><span class="line">|             3|                        0.0|</span><br><span class="line">|             1|                        2.0|</span><br><span class="line">|             2|                        1.0|</span><br><span class="line">+--------------+---------------------------+</span><br><span class="line"></span><br><span class="line">+----------+-----------------------+</span><br><span class="line">|occupation|min(occupation_feature)|</span><br><span class="line">+----------+-----------------------+</span><br><span class="line">|         0|                    0.0|</span><br><span class="line">|         1|                    1.0|</span><br><span class="line">+----------+-----------------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 由于热独编码后，特征字段不再是之前的字段，重新定义特征值字段</span></span><br><span class="line">feature_cols = [</span><br><span class="line">    <span class="comment"># 特征值</span></span><br><span class="line">    <span class="string">&quot;price&quot;</span>,</span><br><span class="line">    <span class="string">&quot;cms_group_id_value&quot;</span>,</span><br><span class="line">    <span class="string">&quot;final_gender_code_value&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age_level_value&quot;</span>,</span><br><span class="line">    <span class="string">&quot;shopping_level_value&quot;</span>,</span><br><span class="line">    <span class="string">&quot;occupation_value&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pid_value&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pl_onehot_value&quot;</span>,</span><br><span class="line">    <span class="string">&quot;nucl_onehot_value&quot;</span></span><br><span class="line">]</span><br><span class="line"><span class="comment"># 根据特征字段计算出特征向量，并划分出训练数据集和测试数据集</span></span><br><span class="line"><span class="keyword">from</span> pyspark.ml.feature <span class="keyword">import</span> VectorAssembler</span><br><span class="line">datasets_2 = VectorAssembler().setInputCols(feature_cols).setOutputCol(<span class="string">&quot;features&quot;</span>).transform(datasets_2)</span><br><span class="line">train_datasets_2 = datasets_2.<span class="built_in">filter</span>(datasets_2.timestamp&lt;=(<span class="number">1494691186</span>-<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>))</span><br><span class="line">test_datasets_2 = datasets_2.<span class="built_in">filter</span>(datasets_2.timestamp&gt;(<span class="number">1494691186</span>-<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>))</span><br><span class="line">train_datasets_2.printSchema()</span><br><span class="line">train_datasets_2.first()</span><br></pre></td></tr></table></figure><p>显示结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">root</span><br><span class="line"> |-- timestamp: long (nullable &#x3D; true)</span><br><span class="line"> |-- clk: integer (nullable &#x3D; true)</span><br><span class="line"> |-- price: float (nullable &#x3D; true)</span><br><span class="line"> |-- cms_group_id: string (nullable &#x3D; true)</span><br><span class="line"> |-- final_gender_code: string (nullable &#x3D; true)</span><br><span class="line"> |-- age_level: string (nullable &#x3D; true)</span><br><span class="line"> |-- shopping_level: string (nullable &#x3D; true)</span><br><span class="line"> |-- occupation: string (nullable &#x3D; true)</span><br><span class="line"> |-- pid_value: vector (nullable &#x3D; true)</span><br><span class="line"> |-- pl_onehot_value: vector (nullable &#x3D; true)</span><br><span class="line"> |-- nucl_onehot_value: vector (nullable &#x3D; true)</span><br><span class="line"> |-- cms_group_id_feature: double (nullable &#x3D; false)</span><br><span class="line"> |-- cms_group_id_value: vector (nullable &#x3D; true)</span><br><span class="line"> |-- final_gender_code_feature: double (nullable &#x3D; false)</span><br><span class="line"> |-- final_gender_code_value: vector (nullable &#x3D; true)</span><br><span class="line"> |-- age_level_feature: double (nullable &#x3D; false)</span><br><span class="line"> |-- age_level_value: vector (nullable &#x3D; true)</span><br><span class="line"> |-- shopping_level_feature: double (nullable &#x3D; false)</span><br><span class="line"> |-- shopping_level_value: vector (nullable &#x3D; true)</span><br><span class="line"> |-- occupation_feature: double (nullable &#x3D; false)</span><br><span class="line"> |-- occupation_value: vector (nullable &#x3D; true)</span><br><span class="line"> |-- features: vector (nullable &#x3D; true)</span><br><span class="line"></span><br><span class="line">Row(timestamp&#x3D;1494261938, clk&#x3D;0, price&#x3D;108.0, cms_group_id&#x3D;&#39;11&#39;, final_gender_code&#x3D;&#39;1&#39;, age_level&#x3D;&#39;5&#39;, shopping_level&#x3D;&#39;3&#39;, occupation&#x3D;&#39;0&#39;, pid_value&#x3D;SparseVector(2, &#123;1: 1.0&#125;), pl_onehot_value&#x3D;SparseVector(4, &#123;0: 1.0&#125;), nucl_onehot_value&#x3D;SparseVector(5, &#123;1: 1.0&#125;), cms_group_id_feature&#x3D;6.0, cms_group_id_value&#x3D;SparseVector(13, &#123;6: 1.0&#125;), final_gender_code_feature&#x3D;1.0, final_gender_code_value&#x3D;SparseVector(2, &#123;1: 1.0&#125;), age_level_feature&#x3D;2.0, age_level_value&#x3D;SparseVector(7, &#123;2: 1.0&#125;), shopping_level_feature&#x3D;0.0, shopping_level_value&#x3D;SparseVector(3, &#123;0: 1.0&#125;), occupation_feature&#x3D;0.0, occupation_value&#x3D;SparseVector(2, &#123;0: 1.0&#125;), features&#x3D;SparseVector(39, &#123;0: 108.0, 7: 1.0, 15: 1.0, 18: 1.0, 23: 1.0, 26: 1.0, 29: 1.0, 30: 1.0, 35: 1.0&#125;))</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>创建逻辑回归训练器，并训练模型</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark.ml.classification <span class="keyword">import</span> LogisticRegression</span><br><span class="line">lr2 = LogisticRegression()</span><br><span class="line"><span class="comment">#设置目标值对应的列   setFeaturesCol 设置特征值对应的列名</span></span><br><span class="line">model2 = lr2.setLabelCol(<span class="string">&quot;clk&quot;</span>).setFeaturesCol(<span class="string">&quot;features&quot;</span>).fit(train_datasets_2)</span><br><span class="line"><span class="comment"># 存储模型</span></span><br><span class="line">model2.save(<span class="string">&quot;hdfs://localhost:9000/models/CTRModel_AllOneHot.obj&quot;</span>)</span><br><span class="line"><span class="keyword">from</span> pyspark.ml.classification <span class="keyword">import</span> LogisticRegressionModel</span><br><span class="line"><span class="comment"># 载入训练好的模型</span></span><br><span class="line">model2 = LogisticRegressionModel.load(<span class="string">&quot;hdfs://localhost:9000/models/CTRModel_AllOneHot.obj&quot;</span>)</span><br><span class="line">result_2 = model2.transform(test_datasets_2)</span><br><span class="line"><span class="comment"># 按probability升序排列数据，probability表示预测结果的概率</span></span><br><span class="line">result_2.select(<span class="string">&quot;clk&quot;</span>, <span class="string">&quot;price&quot;</span>, <span class="string">&quot;probability&quot;</span>, <span class="string">&quot;prediction&quot;</span>).sort(<span class="string">&quot;probability&quot;</span>).show(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对比前面的result_1的预测结果，能发现这里的预测率稍微准确了一点，这里top20里出现了3个点击的，但前面的只出现了1个</span></span><br><span class="line"><span class="comment"># 因此可见对特征的细化处理，已经帮助我们提高模型的效果的</span></span><br></pre></td></tr></table></figure><p>显示结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">+---+-----------+--------------------+----------+</span><br><span class="line">|clk|      price|         probability|prediction|</span><br><span class="line">+---+-----------+--------------------+----------+</span><br><span class="line">|  0|      1.0E8|[0.85524418892857...|       0.0|</span><br><span class="line">|  0|      1.0E8|[0.88353143762124...|       0.0|</span><br><span class="line">|  0|      1.0E8|[0.89169808985616...|       0.0|</span><br><span class="line">|  1|5.5555556E7|[0.92511743960350...|       0.0|</span><br><span class="line">|  0|     179.01|[0.93239951738307...|       0.0|</span><br><span class="line">|  1|      159.0|[0.93239952905659...|       0.0|</span><br><span class="line">|  0|      118.0|[0.93239955297535...|       0.0|</span><br><span class="line">|  0|      688.0|[0.93451506165953...|       0.0|</span><br><span class="line">|  0|      339.0|[0.93451525933626...|       0.0|</span><br><span class="line">|  0|      335.0|[0.93451526160190...|       0.0|</span><br><span class="line">|  0|      220.0|[0.93451532673881...|       0.0|</span><br><span class="line">|  0|      176.0|[0.93451535166074...|       0.0|</span><br><span class="line">|  0|      158.0|[0.93451536185607...|       0.0|</span><br><span class="line">|  0|      158.0|[0.93451536185607...|       0.0|</span><br><span class="line">|  1|      149.0|[0.93451536695374...|       0.0|</span><br><span class="line">|  0|      122.5|[0.93451538196353...|       0.0|</span><br><span class="line">|  0|       99.0|[0.93451539527410...|       0.0|</span><br><span class="line">|  0|       88.0|[0.93451540150458...|       0.0|</span><br><span class="line">|  0|       79.0|[0.93451540660224...|       0.0|</span><br><span class="line">|  0|       75.0|[0.93451540886787...|       0.0|</span><br><span class="line">|  0|       68.0|[0.93451541283272...|       0.0|</span><br><span class="line">|  0|       68.0|[0.93451541283272...|       0.0|</span><br><span class="line">|  0|       59.9|[0.93451541742061...|       0.0|</span><br><span class="line">|  0|      44.98|[0.93451542587140...|       0.0|</span><br><span class="line">|  0|       35.5|[0.93451543124094...|       0.0|</span><br><span class="line">|  0|       33.0|[0.93451543265696...|       0.0|</span><br><span class="line">|  0|       32.8|[0.93451543277024...|       0.0|</span><br><span class="line">|  0|       30.0|[0.93451543435618...|       0.0|</span><br><span class="line">|  0|       28.0|[0.93451543548899...|       0.0|</span><br><span class="line">|  0|       19.9|[0.93451544007688...|       0.0|</span><br><span class="line">|  0|       19.8|[0.93451544013353...|       0.0|</span><br><span class="line">|  0|       19.8|[0.93451544013353...|       0.0|</span><br><span class="line">|  0|       12.0|[0.93451544455150...|       0.0|</span><br><span class="line">|  0|        6.7|[0.93451544755345...|       0.0|</span><br><span class="line">|  0|      568.0|[0.93458159339238...|       0.0|</span><br><span class="line">|  0|      398.0|[0.93458168959099...|       0.0|</span><br><span class="line">|  0|      158.0|[0.93458182540058...|       0.0|</span><br><span class="line">|  0|      245.0|[0.93471518526899...|       0.0|</span><br><span class="line">|  0|       99.0|[0.93471526772971...|       0.0|</span><br><span class="line">|  0|       88.0|[0.93471527394249...|       0.0|</span><br><span class="line">|  0|     1288.0|[0.93474589600376...|       0.0|</span><br><span class="line">|  0|      688.0|[0.93474623473450...|       0.0|</span><br><span class="line">|  0|      656.0|[0.93474625280009...|       0.0|</span><br><span class="line">|  0|      568.0|[0.93474630248045...|       0.0|</span><br><span class="line">|  0|      498.0|[0.93474634199889...|       0.0|</span><br><span class="line">|  0|      399.0|[0.93474639788922...|       0.0|</span><br><span class="line">|  0|      396.0|[0.93474639958287...|       0.0|</span><br><span class="line">|  0|      298.0|[0.93474645490860...|       0.0|</span><br><span class="line">|  0|      293.0|[0.93474645773134...|       0.0|</span><br><span class="line">|  0|      209.0|[0.93474650515337...|       0.0|</span><br><span class="line">|  0|      198.0|[0.93474651136339...|       0.0|</span><br><span class="line">|  0|      198.0|[0.93474651136339...|       0.0|</span><br><span class="line">|  0|      169.0|[0.93474652773527...|       0.0|</span><br><span class="line">|  0|      168.0|[0.93474652829982...|       0.0|</span><br><span class="line">|  0|      159.0|[0.93474653338074...|       0.0|</span><br><span class="line">|  0|      155.0|[0.93474653563893...|       0.0|</span><br><span class="line">|  0|      139.0|[0.93474654467169...|       0.0|</span><br><span class="line">|  0|      138.0|[0.93474654523624...|       0.0|</span><br><span class="line">|  0|      119.0|[0.93474655596264...|       0.0|</span><br><span class="line">|  0|       99.0|[0.93474656725358...|       0.0|</span><br><span class="line">|  0|       99.0|[0.93474656725358...|       0.0|</span><br><span class="line">|  0|       88.0|[0.93474657346360...|       0.0|</span><br><span class="line">|  0|       88.0|[0.93474657346360...|       0.0|</span><br><span class="line">|  0|       79.0|[0.93474657854453...|       0.0|</span><br><span class="line">|  0|       59.0|[0.93474658983547...|       0.0|</span><br><span class="line">|  0|       59.0|[0.93474658983547...|       0.0|</span><br><span class="line">|  0|       59.0|[0.93474658983547...|       0.0|</span><br><span class="line">|  0|       58.0|[0.93474659040002...|       0.0|</span><br><span class="line">|  0|       57.0|[0.93474659096456...|       0.0|</span><br><span class="line">|  0|       49.8|[0.93474659502930...|       0.0|</span><br><span class="line">|  0|      39.98|[0.93474660057315...|       0.0|</span><br><span class="line">|  0|       36.8|[0.93474660236841...|       0.0|</span><br><span class="line">|  0|       34.0|[0.93474660394914...|       0.0|</span><br><span class="line">|  0|     6520.0|[0.93480919087761...|       0.0|</span><br><span class="line">|  0|     3699.0|[0.93481078202537...|       0.0|</span><br><span class="line">|  0|     1980.0|[0.93481175158689...|       0.0|</span><br><span class="line">|  0|      660.0|[0.93481249609274...|       0.0|</span><br><span class="line">|  0|      660.0|[0.93481249609274...|       0.0|</span><br><span class="line">|  0|      398.0|[0.93481264386492...|       0.0|</span><br><span class="line">|  0|      369.0|[0.93481266022137...|       0.0|</span><br><span class="line">|  0|      299.0|[0.93481269970243...|       0.0|</span><br><span class="line">|  0|      295.0|[0.93481270195849...|       0.0|</span><br><span class="line">|  0|      278.0|[0.93481271154674...|       0.0|</span><br><span class="line">|  0|      270.0|[0.93481271605886...|       0.0|</span><br><span class="line">|  0|      228.0|[0.93481273974748...|       0.0|</span><br><span class="line">|  0|      228.0|[0.93481273974748...|       0.0|</span><br><span class="line">|  0|    11368.0|[0.93494253131370...|       0.0|</span><br><span class="line">|  0|     9999.0|[0.93494330201510...|       0.0|</span><br><span class="line">|  0|     1099.0|[0.93494360670448...|       0.0|</span><br><span class="line">|  1|     8888.0|[0.93494392746484...|       0.0|</span><br><span class="line">|  0|      338.0|[0.93494403511659...|       0.0|</span><br><span class="line">|  0|      311.0|[0.93494405031645...|       0.0|</span><br><span class="line">|  0|      300.0|[0.93494405650898...|       0.0|</span><br><span class="line">|  0|      278.0|[0.93494406889404...|       0.0|</span><br><span class="line">|  0|      188.0|[0.93494411956019...|       0.0|</span><br><span class="line">|  0|      176.0|[0.93494412631568...|       0.0|</span><br><span class="line">|  0|      168.0|[0.93494413081933...|       0.0|</span><br><span class="line">|  0|      158.0|[0.93494413644890...|       0.0|</span><br><span class="line">|  1|      138.0|[0.93494414770804...|       0.0|</span><br><span class="line">|  0|      125.0|[0.93494415502647...|       0.0|</span><br><span class="line">+---+-----------+--------------------+----------+</span><br><span class="line">only showing top 100 rows</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result_2.<span class="built_in">filter</span>(result_2.clk==<span class="number">1</span>).select(<span class="string">&quot;clk&quot;</span>, <span class="string">&quot;price&quot;</span>, <span class="string">&quot;probability&quot;</span>, <span class="string">&quot;prediction&quot;</span>).sort(<span class="string">&quot;probability&quot;</span>).show(<span class="number">100</span>)</span><br><span class="line"><span class="comment"># 从该结果也可以看出，result_2的点击率预测率普遍要比result_1高出一点点</span></span><br></pre></td></tr></table></figure><p>显示结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">+---+-----------+--------------------+----------+</span><br><span class="line">|clk|      price|         probability|prediction|</span><br><span class="line">+---+-----------+--------------------+----------+</span><br><span class="line">|  1|5.5555556E7|[0.92511743960350...|       0.0|</span><br><span class="line">|  1|      159.0|[0.93239952905659...|       0.0|</span><br><span class="line">|  1|      149.0|[0.93451536695374...|       0.0|</span><br><span class="line">|  1|     8888.0|[0.93494392746484...|       0.0|</span><br><span class="line">|  1|      138.0|[0.93494414770804...|       0.0|</span><br><span class="line">|  1|       35.0|[0.93494420569256...|       0.0|</span><br><span class="line">|  1|      519.0|[0.93494863870621...|       0.0|</span><br><span class="line">|  1|      478.0|[0.93494866178596...|       0.0|</span><br><span class="line">|  1|      349.0|[0.93494873440265...|       0.0|</span><br><span class="line">|  1|      348.0|[0.93494873496557...|       0.0|</span><br><span class="line">|  1|      316.0|[0.93494875297901...|       0.0|</span><br><span class="line">|  1|      298.0|[0.93494876311156...|       0.0|</span><br><span class="line">|  1|      298.0|[0.93494876311156...|       0.0|</span><br><span class="line">|  1|      199.0|[0.93494881884058...|       0.0|</span><br><span class="line">|  1|      199.0|[0.93494881884058...|       0.0|</span><br><span class="line">|  1|      198.0|[0.93494881940350...|       0.0|</span><br><span class="line">|  1|      187.1|[0.93494882553931...|       0.0|</span><br><span class="line">|  1|      176.0|[0.93494883178772...|       0.0|</span><br><span class="line">|  1|      168.0|[0.93494883629107...|       0.0|</span><br><span class="line">|  1|      160.0|[0.93494884079442...|       0.0|</span><br><span class="line">|  1|      158.0|[0.93494884192026...|       0.0|</span><br><span class="line">|  1|      158.0|[0.93494884192026...|       0.0|</span><br><span class="line">|  1|      135.0|[0.93494885486740...|       0.0|</span><br><span class="line">|  1|      129.0|[0.93494885824491...|       0.0|</span><br><span class="line">|  1|      127.0|[0.93494885937075...|       0.0|</span><br><span class="line">|  1|      125.0|[0.93494886049659...|       0.0|</span><br><span class="line">|  1|      124.0|[0.93494886105951...|       0.0|</span><br><span class="line">|  1|      118.0|[0.93494886443702...|       0.0|</span><br><span class="line">|  1|      109.0|[0.93494886950329...|       0.0|</span><br><span class="line">|  1|      108.0|[0.93494887006621...|       0.0|</span><br><span class="line">|  1|       99.0|[0.93494887513247...|       0.0|</span><br><span class="line">|  1|       98.0|[0.93494887569539...|       0.0|</span><br><span class="line">|  1|       79.8|[0.93494888594051...|       0.0|</span><br><span class="line">|  1|       79.0|[0.93494888639085...|       0.0|</span><br><span class="line">|  1|       77.0|[0.93494888751668...|       0.0|</span><br><span class="line">|  1|       72.5|[0.93494889004982...|       0.0|</span><br><span class="line">|  1|       69.0|[0.93494889202003...|       0.0|</span><br><span class="line">|  1|       68.0|[0.93494889258295...|       0.0|</span><br><span class="line">|  1|       60.0|[0.93494889708630...|       0.0|</span><br><span class="line">|  1|      43.98|[0.93494890610426...|       0.0|</span><br><span class="line">|  1|       40.0|[0.93494890834467...|       0.0|</span><br><span class="line">|  1|       39.9|[0.93494890840096...|       0.0|</span><br><span class="line">|  1|       39.6|[0.93494890856984...|       0.0|</span><br><span class="line">|  1|       32.0|[0.93494891284802...|       0.0|</span><br><span class="line">|  1|       31.0|[0.93494891341094...|       0.0|</span><br><span class="line">|  1|      25.98|[0.93494891623679...|       0.0|</span><br><span class="line">|  1|       23.0|[0.93494891791428...|       0.0|</span><br><span class="line">|  1|       19.0|[0.93494892016596...|       0.0|</span><br><span class="line">|  1|       16.9|[0.93494892134809...|       0.0|</span><br><span class="line">|  1|       10.0|[0.93494892523222...|       0.0|</span><br><span class="line">|  1|        3.5|[0.93494892889119...|       0.0|</span><br><span class="line">|  1|        3.5|[0.93494892889119...|       0.0|</span><br><span class="line">|  1|        0.4|[0.93494893063624...|       0.0|</span><br><span class="line">|  1|     1288.0|[0.93501426059874...|       0.0|</span><br><span class="line">|  1|      980.0|[0.93501443381533...|       0.0|</span><br><span class="line">|  1|      788.0|[0.93501454179429...|       0.0|</span><br><span class="line">|  1|      698.0|[0.93501459240937...|       0.0|</span><br><span class="line">|  1|      695.0|[0.93501459409654...|       0.0|</span><br><span class="line">|  1|      688.0|[0.93501459803326...|       0.0|</span><br><span class="line">|  1|      599.0|[0.93501464808591...|       0.0|</span><br><span class="line">|  1|      588.0|[0.93501465427219...|       0.0|</span><br><span class="line">|  1|      516.0|[0.93501469476419...|       0.0|</span><br><span class="line">|  1|      495.0|[0.93501470657436...|       0.0|</span><br><span class="line">|  1|      398.0|[0.93501476112603...|       0.0|</span><br><span class="line">|  1|      368.0|[0.93501477799768...|       0.0|</span><br><span class="line">|  1|      339.0|[0.93501479430693...|       0.0|</span><br><span class="line">|  1|      335.0|[0.93501479655648...|       0.0|</span><br><span class="line">|  1|      324.0|[0.93501480274275...|       0.0|</span><br><span class="line">|  1|      316.0|[0.93501480724185...|       0.0|</span><br><span class="line">|  1|      299.0|[0.93501481680244...|       0.0|</span><br><span class="line">|  1|      295.0|[0.93501481905199...|       0.0|</span><br><span class="line">|  1|      279.0|[0.93501482805020...|       0.0|</span><br><span class="line">|  1|      268.0|[0.93501483423646...|       0.0|</span><br><span class="line">|  1|      259.0|[0.93501483929795...|       0.0|</span><br><span class="line">|  1|      259.0|[0.93501483929795...|       0.0|</span><br><span class="line">|  1|      249.0|[0.93501484492182...|       0.0|</span><br><span class="line">|  1|      238.0|[0.93501485110809...|       0.0|</span><br><span class="line">|  1|      199.0|[0.93501487304119...|       0.0|</span><br><span class="line">|  1|      198.0|[0.93501487360358...|       0.0|</span><br><span class="line">|  1|      179.0|[0.93501488428894...|       0.0|</span><br><span class="line">|  1|      175.0|[0.93501488653849...|       0.0|</span><br><span class="line">|  1|      129.0|[0.93501491240829...|       0.0|</span><br><span class="line">|  1|      128.0|[0.93501491297068...|       0.0|</span><br><span class="line">|  1|      118.0|[0.93501491859455...|       0.0|</span><br><span class="line">|  1|      109.0|[0.93501492365603...|       0.0|</span><br><span class="line">|  1|       98.0|[0.93501492984229...|       0.0|</span><br><span class="line">|  1|       89.0|[0.93501493490377...|       0.0|</span><br><span class="line">|  1|       79.0|[0.93501494052764...|       0.0|</span><br><span class="line">|  1|       75.0|[0.93501494277718...|       0.0|</span><br><span class="line">|  1|       69.8|[0.93501494570159...|       0.0|</span><br><span class="line">|  1|       30.0|[0.93501496808458...|       0.0|</span><br><span class="line">|  1|       15.0|[0.93501497652038...|       0.0|</span><br><span class="line">|  1|      368.0|[0.93665387743951...|       0.0|</span><br><span class="line">|  1|      198.0|[0.93665397079735...|       0.0|</span><br><span class="line">|  1|      178.0|[0.93665398178062...|       0.0|</span><br><span class="line">|  1|      158.0|[0.93665399276388...|       0.0|</span><br><span class="line">|  1|      158.0|[0.93665399276388...|       0.0|</span><br><span class="line">|  1|      149.0|[0.93665399770635...|       0.0|</span><br><span class="line">|  1|       68.0|[0.93665404218855...|       0.0|</span><br><span class="line">|  1|       36.0|[0.93665405976176...|       0.0|</span><br><span class="line">+---+-----------+--------------------+----------+</span><br><span class="line">only showing top 100 rows</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="CTR预估模型建立"><a href="#CTR预估模型建立" class="headerlink" title="CTR预估模型建立"></a>CTR预估模型建立</h3><ul><li><p>利用raw_sample ad_feature user_profile 数据合并 挑选出合适的特征</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">useful_cols = [</span><br><span class="line">    <span class="comment"># </span></span><br><span class="line">    <span class="comment"># 时间字段，划分训练集和测试集</span></span><br><span class="line">    <span class="string">&quot;timestamp&quot;</span>,</span><br><span class="line">    <span class="comment"># label目标值字段</span></span><br><span class="line">    <span class="string">&quot;clk&quot;</span>,  </span><br><span class="line">    <span class="comment"># 特征值字段</span></span><br><span class="line">    <span class="string">&quot;pid_value&quot;</span>,       <span class="comment"># 资源位的特征向量</span></span><br><span class="line">    <span class="string">&quot;price&quot;</span>,    <span class="comment"># 广告价格</span></span><br><span class="line">    <span class="string">&quot;cms_segid&quot;</span>,    <span class="comment"># 用户微群ID</span></span><br><span class="line">    <span class="string">&quot;cms_group_id&quot;</span>,    <span class="comment"># 用户组ID</span></span><br><span class="line">    <span class="string">&quot;final_gender_code&quot;</span>,    <span class="comment"># 用户性别特征，[1,2]</span></span><br><span class="line">    <span class="string">&quot;age_level&quot;</span>,    <span class="comment"># 年龄等级，1-</span></span><br><span class="line">    <span class="string">&quot;shopping_level&quot;</span>,</span><br><span class="line">    <span class="string">&quot;occupation&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pl_onehot_value&quot;</span>,</span><br><span class="line">    <span class="string">&quot;nucl_onehot_value&quot;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>又对数据进行处理，把可能进行one-hot编码的分类特征都进行one_hot处理</p><ul><li><pre><code class="lang-python">useful_cols_2 = [    # 时间值，划分训练集和测试集    &quot;timestamp&quot;,    # label目标值    &quot;clk&quot;,      # 特征值    &quot;price&quot;,    &quot;cms_group_id&quot;, #13维    &quot;final_gender_code&quot;, #2维    &quot;age_level&quot;, #7维    &quot;shopping_level&quot;, #3维度    &quot;occupation&quot;, #2    &quot;pid_value&quot;,  #2    &quot;pl_onehot_value&quot;,#4    &quot;nucl_onehot_value&quot;#5]</code></pre></li></ul></li><li><p>逻辑回归训练出的CTR预估模型 预测值的理解</p><ul><li>因为数据大部分都是不点击， 样本极度偏斜的，点击样本很少 （5%） 预测出的结果都是0 不点</li><li>根据不点击的概率来排序 不点击概率越低的排在前面</li><li>在测试数据中 按照不点击的概率排序 考察精准率（找前10个 看看10个中是否有点击的样本）能有10%的CTR预估的概率就已经相当不错了。正常5%。</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;LR实现CTR预估&quot;&gt;&lt;a href=&quot;#LR实现CTR预估&quot; class=&quot;headerlink&quot; title=&quot;LR实现CTR预估&quot;&gt;&lt;/a&gt;LR实现CTR预估&lt;/h2&gt;&lt;h3 id=&quot;1-Spark逻辑回归-LR-模型使用介绍&quot;&gt;&lt;a href=&quot;#1-Sp</summary>
      
    
    
    
    <category term="机器学习" scheme="https://xxren8218.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="大数据的lambda架构" scheme="https://xxren8218.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%9A%84lambda%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="推荐系统基础" scheme="https://xxren8218.github.io/tags/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>34-CTR预估数据准备</title>
    <link href="https://xxren8218.github.io/20210710/34-CTR%E9%A2%84%E4%BC%B0%E6%95%B0%E6%8D%AE%E5%87%86%E5%A4%87.html"/>
    <id>https://xxren8218.github.io/20210710/34-CTR%E9%A2%84%E4%BC%B0%E6%95%B0%E6%8D%AE%E5%87%86%E5%A4%87.html</id>
    <published>2021-07-10T14:47:02.000Z</published>
    <updated>2021-07-10T14:48:51.257Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CTR预估数据准备"><a href="#CTR预估数据准备" class="headerlink" title="CTR预估数据准备"></a>CTR预估数据准备</h2><h3 id="1-分析并预处理raw-sample数据集"><a href="#1-分析并预处理raw-sample数据集" class="headerlink" title="1. 分析并预处理raw_sample数据集"></a>1. 分析并预处理raw_sample数据集</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从HDFS中加载样本数据信息</span></span><br><span class="line">df = spark.read.csv(<span class="string">&quot;hdfs://localhost:9000/datasets/raw_sample.csv&quot;</span>, header=<span class="literal">True</span>)</span><br><span class="line">df.show()    <span class="comment"># 展示数据，默认前20条</span></span><br><span class="line">df.printSchema()</span><br></pre></td></tr></table></figure><p>显示结果:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">+------+----------+----------+-----------+------+---+</span><br><span class="line">|  user|time_stamp|adgroup_id|        pid|nonclk|clk|</span><br><span class="line">+------+----------+----------+-----------+------+---+</span><br><span class="line">|581738|1494137644|         1|430548_1007|     1|  0|</span><br><span class="line">|449818|1494638778|         3|430548_1007|     1|  0|</span><br><span class="line">|914836|1494650879|         4|430548_1007|     1|  0|</span><br><span class="line">|914836|1494651029|         5|430548_1007|     1|  0|</span><br><span class="line">|399907|1494302958|         8|430548_1007|     1|  0|</span><br><span class="line">|628137|1494524935|         9|430548_1007|     1|  0|</span><br><span class="line">|298139|1494462593|         9|430539_1007|     1|  0|</span><br><span class="line">|775475|1494561036|         9|430548_1007|     1|  0|</span><br><span class="line">|555266|1494307136|        11|430539_1007|     1|  0|</span><br><span class="line">|117840|1494036743|        11|430548_1007|     1|  0|</span><br><span class="line">|739815|1494115387|        11|430539_1007|     1|  0|</span><br><span class="line">|623911|1494625301|        11|430548_1007|     1|  0|</span><br><span class="line">|623911|1494451608|        11|430548_1007|     1|  0|</span><br><span class="line">|421590|1494034144|        11|430548_1007|     1|  0|</span><br><span class="line">|976358|1494156949|        13|430548_1007|     1|  0|</span><br><span class="line">|286630|1494218579|        13|430539_1007|     1|  0|</span><br><span class="line">|286630|1494289247|        13|430539_1007|     1|  0|</span><br><span class="line">|771431|1494153867|        13|430548_1007|     1|  0|</span><br><span class="line">|707120|1494220810|        13|430548_1007|     1|  0|</span><br><span class="line">|530454|1494293746|        13|430548_1007|     1|  0|</span><br><span class="line">+------+----------+----------+-----------+------+---+</span><br><span class="line">only showing top 20 rows</span><br><span class="line"></span><br><span class="line">root</span><br><span class="line"> |-- user: string (nullable = true)</span><br><span class="line"> |-- time_stamp: string (nullable = true)</span><br><span class="line"> |-- adgroup_id: string (nullable = true)</span><br><span class="line"> |-- pid: string (nullable = true)</span><br><span class="line"> |-- nonclk: string (nullable = true)</span><br><span class="line"> |-- clk: string (nullable = true)</span><br></pre></td></tr></table></figure><ul><li>分析数据集字段的类型和格式<ul><li>查看是否有空值</li><li>查看每列数据的类型</li><li>查看每列数据的类别情况</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">&quot;样本数据集总条目数：&quot;</span>, df.count())</span><br><span class="line"><span class="comment"># 约2600w</span></span><br><span class="line">print(<span class="string">&quot;用户user总数：&quot;</span>, df.groupBy(<span class="string">&quot;user&quot;</span>).count().count())</span><br><span class="line"><span class="comment"># 约 114w，略多余日志数据中用户数</span></span><br><span class="line">print(<span class="string">&quot;广告id adgroup_id总数：&quot;</span>, df.groupBy(<span class="string">&quot;adgroup_id&quot;</span>).count().count())</span><br><span class="line"><span class="comment"># 约85w</span></span><br><span class="line">print(<span class="string">&quot;广告展示位pid情况：&quot;</span>, df.groupBy(<span class="string">&quot;pid&quot;</span>).count().collect())</span><br><span class="line"><span class="comment"># 只有两种广告展示位，占比约为六比四</span></span><br><span class="line">print(<span class="string">&quot;广告点击数据情况clk：&quot;</span>, df.groupBy(<span class="string">&quot;clk&quot;</span>).count().collect())</span><br><span class="line"><span class="comment"># 点和不点比率约： 1:20</span></span><br></pre></td></tr></table></figure><p>显示结果:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">样本数据集总条目数： 26557961</span><br><span class="line">用户user总数： 1141729</span><br><span class="line">广告id adgroup_id总数： 846811</span><br><span class="line">广告展示位pid情况： [Row(pid=&#x27;430548_1007&#x27;, count=16472898), Row(pid=&#x27;430539_1007&#x27;, count=10085063)]</span><br><span class="line">广告点击数据情况clk： [Row(clk=&#x27;0&#x27;, count=25191905), Row(clk=&#x27;1&#x27;, count=1366056)]</span><br></pre></td></tr></table></figure><p><strong>默认加载进来的schema都是String类型的。修改为我们所需要的格式，并且一些名字给改过来。</strong></p><ul><li>使用dataframe.withColumn更改df列数据结构；使用dataframe.withColumnRenamed更改列名称</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更改表结构，转换为对应的数据类型</span></span><br><span class="line"><span class="keyword">from</span> pyspark.sql.types <span class="keyword">import</span> StructType, StructField, IntegerType, FloatType, LongType, StringType</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印df结构信息</span></span><br><span class="line">df.printSchema()   </span><br><span class="line"><span class="comment"># 更改df表结构：更改列类型和列名称</span></span><br><span class="line">raw_sample_df = df.\</span><br><span class="line">    withColumn(<span class="string">&quot;user&quot;</span>, df.user.cast(IntegerType())).withColumnRenamed(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;userId&quot;</span>).\</span><br><span class="line">    withColumn(<span class="string">&quot;time_stamp&quot;</span>, df.time_stamp.cast(LongType())).withColumnRenamed(<span class="string">&quot;time_stamp&quot;</span>, <span class="string">&quot;timestamp&quot;</span>).\</span><br><span class="line">    withColumn(<span class="string">&quot;adgroup_id&quot;</span>, df.adgroup_id.cast(IntegerType())).withColumnRenamed(<span class="string">&quot;adgroup_id&quot;</span>, <span class="string">&quot;adgroupId&quot;</span>).\</span><br><span class="line">    withColumn(<span class="string">&quot;pid&quot;</span>, df.pid.cast(StringType())).\</span><br><span class="line">    withColumn(<span class="string">&quot;nonclk&quot;</span>, df.nonclk.cast(IntegerType())).\</span><br><span class="line">    withColumn(<span class="string">&quot;clk&quot;</span>, df.clk.cast(IntegerType()))</span><br><span class="line">raw_sample_df.printSchema()</span><br><span class="line">raw_sample_df.show()</span><br></pre></td></tr></table></figure><p>显示结果:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">root</span><br><span class="line"> |-- user: string (nullable = true)</span><br><span class="line"> |-- time_stamp: string (nullable = true)</span><br><span class="line"> |-- adgroup_id: string (nullable = true)</span><br><span class="line"> |-- pid: string (nullable = true)</span><br><span class="line"> |-- nonclk: string (nullable = true)</span><br><span class="line"> |-- clk: string (nullable = true)</span><br><span class="line"></span><br><span class="line">root</span><br><span class="line"> |-- userId: integer (nullable = true)</span><br><span class="line"> |-- timestamp: long (nullable = true)</span><br><span class="line"> |-- adgroupId: integer (nullable = true)</span><br><span class="line"> |-- pid: string (nullable = true)</span><br><span class="line"> |-- nonclk: integer (nullable = true)</span><br><span class="line"> |-- clk: integer (nullable = true)</span><br><span class="line"></span><br><span class="line">+------+----------+---------+-----------+------+---+</span><br><span class="line">|userId| timestamp|adgroupId|        pid|nonclk|clk|</span><br><span class="line">+------+----------+---------+-----------+------+---+</span><br><span class="line">|581738|1494137644|        1|430548_1007|     1|  0|</span><br><span class="line">|449818|1494638778|        3|430548_1007|     1|  0|</span><br><span class="line">|914836|1494650879|        4|430548_1007|     1|  0|</span><br><span class="line">|914836|1494651029|        5|430548_1007|     1|  0|</span><br><span class="line">|399907|1494302958|        8|430548_1007|     1|  0|</span><br><span class="line">|628137|1494524935|        9|430548_1007|     1|  0|</span><br><span class="line">|298139|1494462593|        9|430539_1007|     1|  0|</span><br><span class="line">|775475|1494561036|        9|430548_1007|     1|  0|</span><br><span class="line">|555266|1494307136|       11|430539_1007|     1|  0|</span><br><span class="line">|117840|1494036743|       11|430548_1007|     1|  0|</span><br><span class="line">|739815|1494115387|       11|430539_1007|     1|  0|</span><br><span class="line">|623911|1494625301|       11|430548_1007|     1|  0|</span><br><span class="line">|623911|1494451608|       11|430548_1007|     1|  0|</span><br><span class="line">|421590|1494034144|       11|430548_1007|     1|  0|</span><br><span class="line">|976358|1494156949|       13|430548_1007|     1|  0|</span><br><span class="line">|286630|1494218579|       13|430539_1007|     1|  0|</span><br><span class="line">|286630|1494289247|       13|430539_1007|     1|  0|</span><br><span class="line">|771431|1494153867|       13|430548_1007|     1|  0|</span><br><span class="line">|707120|1494220810|       13|430548_1007|     1|  0|</span><br><span class="line">|530454|1494293746|       13|430548_1007|     1|  0|</span><br><span class="line">+------+----------+---------+-----------+------+---+</span><br><span class="line">only showing top 20 rows</span><br></pre></td></tr></table></figure><p><strong>数据有了，接下来进行特征相关的操作。</strong></p><ul><li><p>特征选取（Feature Selection）</p><ul><li><p>特征选择就是选择那些靠谱的Feature，去掉冗余的Feature，对于搜索广告，Query关键词和广告的匹配程度很重要；但对于展示广告，广告本身的历史表现，往往是最重要的Feature。</p><p>根据经验，该数据集中，只有广告展示位pid对比较重要，且数据不同数据之间的占比约为6:4，因此pid可以作为一个关键特征</p><p>nonclk和clk在这里是作为目标值，不做为特征</p></li></ul></li><li><p>热独编码 OneHotEncode</p><ul><li><p>热独编码是一种经典编码，是使用N位状态寄存器(如0和1)来对N个状态进行编码，每个状态都由他独立的寄存器位，并且在任意时候，其中只有一位有效。</p><p>假设有三组特征，分别表示年龄，城市，设备；</p><p>[“男”, “女”][0,1]</p><p>[“北京”, “上海”, “广州”][0,1,2]</p><p>[“苹果”, “小米”, “华为”, “微软”][0,1,2,3]</p><p>传统变化： 对每一组特征，使用枚举类型，从0开始；</p><p>[“男“，”上海“，”小米“]=[ 0,1,1]</p><p>[“女“，”北京“，”苹果“] =[1,0,0]</p><p>传统变化后的数据不是连续的，而是随机分配的，不容易应用在分类器中</p><p>而经过热独编码，数据会变成稀疏的，方便分类器处理：</p><p>[“男“，”上海“，”小米“]=[ 1,0,0,1,0,0,1,0,0]</p><p>[“女“，”北京“，”苹果“] =[0,1,1,0,0,1,0,0,0]</p><p>这样做保留了特征的多样性，但是也要注意如果数据过于稀疏(样本较少、维度过高)，其效果反而会变差</p></li></ul></li><li><p>Spark中使用热独编码</p><ul><li><p><strong>注意：热编码只能对字符串类型的列数据进行处理</strong></p><p><a href="https://spark.apache.org/docs/latest/api/python/pyspark.ml.html?highlight=stringindexer#pyspark.ml.feature.StringIndexer">StringIndexer</a>：对指定字符串列数据进行特征处理，如将性别数据“男”、“女”转化为0和1</p><p><a href="https://spark.apache.org/docs/latest/api/python/pyspark.ml.html?highlight=onehotencoder#pyspark.ml.feature.OneHotEncoder">OneHotEncoder</a>：对特征列数据，进行热编码，通常需结合StringIndexer一起使用</p><p><a href="https://spark.apache.org/docs/latest/api/python/pyspark.ml.html?highlight=pipeline#pyspark.ml.Pipeline">Pipeline</a>：让数据按顺序依次被处理，将前一次的处理结果作为下一次的输入</p></li></ul></li><li><p>特征处理</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;特征处理&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">pid 资源位。该特征属于分类特征，只有两类取值，因此考虑进行热编码处理即可，分为是否在资源位1、是否在资源位2 两个特征</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">from</span> pyspark.ml.feature <span class="keyword">import</span> OneHotEncoder</span><br><span class="line"><span class="keyword">from</span> pyspark.ml.feature <span class="keyword">import</span> StringIndexer <span class="comment"># 对指定字符串列数据进行特征处理，如将性别数据“男”、“女”转化为0和1</span></span><br><span class="line"><span class="keyword">from</span> pyspark.ml <span class="keyword">import</span> Pipeline</span><br><span class="line"></span><br><span class="line"><span class="comment"># StringIndexer对指定字符串列进行特征处理，利用StringIndexer 把字符串类别转换成 0 1 2 数值类别</span></span><br><span class="line">stringindexer = StringIndexer(inputCol=<span class="string">&#x27;pid&#x27;</span>, outputCol=<span class="string">&#x27;pid_feature&#x27;</span>)</span><br><span class="line">string_model = stringIndexer.fit(raw_sample_df)</span><br><span class="line">stringIndex_result = string_model.transform(raw_sample_df)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对处理出来的特征处理列进行，热独编码，利用OneHotEncoder 在stringIndexer的基础上 获取onehot编码</span></span><br><span class="line">encoder = OneHotEncoder(dropLast=<span class="literal">False</span>, inputCol=<span class="string">&#x27;pid_feature&#x27;</span>, outputCol=<span class="string">&#x27;pid_value&#x27;</span>) <span class="comment"># dropLast=False会把最后一去掉，用其余表示最后一个。</span></span><br><span class="line">result = encoder.transform(stringIndex_result) <span class="comment">#不需要fit，直接transform</span></span><br><span class="line"><span class="comment"># (2,[0],[1.0]) 表示两个维度，第0个维度为 1.0，Spark表示稀疏向量的方式。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用管道对每一个数据进行热独编码处理 ——（若处理步骤比较多，可以用pipline减少代码量。）</span></span><br><span class="line">pipeline = Pipeline(stages=[stringindexer, encoder])</span><br><span class="line">pipeline_model = pipeline.fit(raw_sample_df)</span><br><span class="line">new_df = pipeline_model.transform(raw_sample_df)</span><br><span class="line">new_df.show()</span><br></pre></td></tr></table></figure><p>显示结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">+------+----------+---------+-----------+------+---+-----------+-------------+</span><br><span class="line">|userId| timestamp|adgroupId|        pid|nonclk|clk|pid_feature|    pid_value|</span><br><span class="line">+------+----------+---------+-----------+------+---+-----------+-------------+</span><br><span class="line">|581738|1494137644|        1|430548_1007|     1|  0|        0.0|(2,[0],[1.0])|</span><br><span class="line">|449818|1494638778|        3|430548_1007|     1|  0|        0.0|(2,[0],[1.0])|</span><br><span class="line">|914836|1494650879|        4|430548_1007|     1|  0|        0.0|(2,[0],[1.0])|</span><br><span class="line">|914836|1494651029|        5|430548_1007|     1|  0|        0.0|(2,[0],[1.0])|</span><br><span class="line">|399907|1494302958|        8|430548_1007|     1|  0|        0.0|(2,[0],[1.0])|</span><br><span class="line">|628137|1494524935|        9|430548_1007|     1|  0|        0.0|(2,[0],[1.0])|</span><br><span class="line">|298139|1494462593|        9|430539_1007|     1|  0|        1.0|(2,[1],[1.0])|</span><br><span class="line">|775475|1494561036|        9|430548_1007|     1|  0|        0.0|(2,[0],[1.0])|</span><br><span class="line">|555266|1494307136|       11|430539_1007|     1|  0|        1.0|(2,[1],[1.0])|</span><br><span class="line">|117840|1494036743|       11|430548_1007|     1|  0|        0.0|(2,[0],[1.0])|</span><br><span class="line">|739815|1494115387|       11|430539_1007|     1|  0|        1.0|(2,[1],[1.0])|</span><br><span class="line">|623911|1494625301|       11|430548_1007|     1|  0|        0.0|(2,[0],[1.0])|</span><br><span class="line">|623911|1494451608|       11|430548_1007|     1|  0|        0.0|(2,[0],[1.0])|</span><br><span class="line">|421590|1494034144|       11|430548_1007|     1|  0|        0.0|(2,[0],[1.0])|</span><br><span class="line">|976358|1494156949|       13|430548_1007|     1|  0|        0.0|(2,[0],[1.0])|</span><br><span class="line">|286630|1494218579|       13|430539_1007|     1|  0|        1.0|(2,[1],[1.0])|</span><br><span class="line">|286630|1494289247|       13|430539_1007|     1|  0|        1.0|(2,[1],[1.0])|</span><br><span class="line">|771431|1494153867|       13|430548_1007|     1|  0|        0.0|(2,[0],[1.0])|</span><br><span class="line">|707120|1494220810|       13|430548_1007|     1|  0|        0.0|(2,[0],[1.0])|</span><br><span class="line">|530454|1494293746|       13|430548_1007|     1|  0|        0.0|(2,[0],[1.0])|</span><br><span class="line">+------+----------+---------+-----------+------+---+-----------+-------------+</span><br><span class="line">only showing top 20 rows</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>返回字段pid_value是一个稀疏向量类型数据 <a href="https://spark.apache.org/docs/latest/api/python/pyspark.ml.html?highlight=sparse#pyspark.ml.linalg.SparseVector">pyspark.ml.linalg.SparseVector</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark.ml.linalg <span class="keyword">import</span> SparseVector</span><br><span class="line"><span class="comment"># 参数：维度、索引列表、值列表</span></span><br><span class="line">print(SparseVector(<span class="number">4</span>, [<span class="number">1</span>, <span class="number">3</span>], [<span class="number">3.0</span>, <span class="number">4.0</span>]))</span><br><span class="line">print(SparseVector(<span class="number">4</span>, [<span class="number">1</span>, <span class="number">3</span>], [<span class="number">3.0</span>, <span class="number">4.0</span>]).toArray())</span><br><span class="line">print(<span class="string">&quot;*********&quot;</span>)</span><br><span class="line">print(new_df.select(<span class="string">&quot;pid_value&quot;</span>).first())</span><br><span class="line">print(new_df.select(<span class="string">&quot;pid_value&quot;</span>).first().pid_value.toArray())</span><br></pre></td></tr></table></figure><p>显示结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(4,[1,3],[3.0,4.0])</span><br><span class="line">[0. 3. 0. 4.]</span><br><span class="line">*********</span><br><span class="line">Row(pid_value&#x3D;SparseVector(2, &#123;0: 1.0&#125;))</span><br><span class="line">[1. 0.]</span><br></pre></td></tr></table></figure><h3 id="2-划分训练集和测试集"><a href="#2-划分训练集和测试集" class="headerlink" title="2. 划分训练集和测试集"></a>2. 划分训练集和测试集</h3><ul><li>查看最大时间</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new_df.sort(<span class="string">&quot;timestamp&quot;</span>, ascending=<span class="literal">False</span>).show()</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">+------+----------+---------+-----------+------+---+-----------+-------------+</span><br><span class="line">|userId| timestamp|adgroupId|        pid|nonclk|clk|pid_feature|    pid_value|</span><br><span class="line">+------+----------+---------+-----------+------+---+-----------+-------------+</span><br><span class="line">|177002|1494691186|   593001|430548_1007|     1|  0|        0.0|(2,[0],[1.0])|</span><br><span class="line">|243671|1494691186|   600195|430548_1007|     1|  0|        0.0|(2,[0],[1.0])|</span><br><span class="line">|488527|1494691184|   494312|430548_1007|     1|  0|        0.0|(2,[0],[1.0])|</span><br><span class="line">|488527|1494691184|   431082|430548_1007|     1|  0|        0.0|(2,[0],[1.0])|</span><br><span class="line">| 17054|1494691184|   742741|430548_1007|     1|  0|        0.0|(2,[0],[1.0])|</span><br><span class="line">| 17054|1494691184|   756665|430548_1007|     1|  0|        0.0|(2,[0],[1.0])|</span><br><span class="line">|488527|1494691184|   687854|430548_1007|     1|  0|        0.0|(2,[0],[1.0])|</span><br><span class="line">|839493|1494691183|   561681|430548_1007|     1|  0|        0.0|(2,[0],[1.0])|</span><br><span class="line">|704223|1494691183|   624504|430539_1007|     1|  0|        1.0|(2,[1],[1.0])|</span><br><span class="line">|839493|1494691183|   582235|430548_1007|     1|  0|        0.0|(2,[0],[1.0])|</span><br><span class="line">|704223|1494691183|   675674|430539_1007|     1|  0|        1.0|(2,[1],[1.0])|</span><br><span class="line">|628998|1494691180|   618965|430548_1007|     1|  0|        0.0|(2,[0],[1.0])|</span><br><span class="line">|674444|1494691179|   427579|430548_1007|     1|  0|        0.0|(2,[0],[1.0])|</span><br><span class="line">|627200|1494691179|   782038|430548_1007|     1|  0|        0.0|(2,[0],[1.0])|</span><br><span class="line">|627200|1494691179|   420769|430548_1007|     1|  0|        0.0|(2,[0],[1.0])|</span><br><span class="line">|674444|1494691179|   588664|430548_1007|     1|  0|        0.0|(2,[0],[1.0])|</span><br><span class="line">|738335|1494691179|   451004|430539_1007|     1|  0|        1.0|(2,[1],[1.0])|</span><br><span class="line">|627200|1494691179|   817569|430548_1007|     1|  0|        0.0|(2,[0],[1.0])|</span><br><span class="line">|322244|1494691179|   820018|430548_1007|     1|  0|        0.0|(2,[0],[1.0])|</span><br><span class="line">|322244|1494691179|   735220|430548_1007|     1|  0|        0.0|(2,[0],[1.0])|</span><br><span class="line">+------+----------+---------+-----------+------+---+-----------+-------------+</span><br><span class="line">only showing top 20 rows</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本样本数据集共计8天数据</span></span><br><span class="line"><span class="comment"># 前七天为训练数据、最后一天为测试数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">datetime.fromtimestamp(<span class="number">1494691186</span>)</span><br><span class="line">print(<span class="string">&quot;该时间之前的数据为训练样本，该时间以后的数据为测试样本：&quot;</span>, datetime.fromtimestamp(<span class="number">1494691186</span>-<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>))</span><br></pre></td></tr></table></figure><p>显示结果:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">datetime.datetime(<span class="number">2017</span>, <span class="number">5</span>, <span class="number">12</span>, <span class="number">23</span>, <span class="number">59</span>, <span class="number">46</span>)</span><br></pre></td></tr></table></figure><p>该时间之前的数据为训练样本，该时间以后的数据为测试样本： 2017-05-12 23:59:46</p><ul><li>训练样本</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 训练样本：</span></span><br><span class="line">train_sample = raw_sample_df.<span class="built_in">filter</span>(raw_sample_df.timestamp&lt;=(<span class="number">1494691186</span>-<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>))</span><br><span class="line">print(<span class="string">&quot;训练样本个数：&quot;</span>)</span><br><span class="line">print(train_sample.count())</span><br><span class="line"><span class="comment"># 测试样本</span></span><br><span class="line">test_sample = raw_sample_df.<span class="built_in">filter</span>(raw_sample_df.timestamp&gt;(<span class="number">1494691186</span>-<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>))</span><br><span class="line">print(<span class="string">&quot;测试样本个数：&quot;</span>)</span><br><span class="line">print(test_sample.count())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意：还需要加入广告基本特征和用户基本特征才能做程一份完整的样本数据集</span></span><br></pre></td></tr></table></figure><p>显示结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">训练样本个数：</span><br><span class="line">23249291</span><br><span class="line">测试样本个数：</span><br><span class="line">3308670</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-分析并预处理ad-feature数据集"><a href="#3-分析并预处理ad-feature数据集" class="headerlink" title="3. 分析并预处理ad_feature数据集"></a>3. 分析并预处理ad_feature数据集</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从HDFS中加载广告基本信息数据，返回spark dafaframe对象</span></span><br><span class="line">df = spark.read.csv(<span class="string">&quot;hdfs://localhost:9000/datasets/ad_feature.csv&quot;</span>, header=<span class="literal">True</span>)</span><br><span class="line">df.show()    <span class="comment"># 展示数据，默认前20条</span></span><br></pre></td></tr></table></figure><p>显示结果:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">+----------+-------+-----------+--------+------+-----+</span><br><span class="line">|adgroup_id|cate_id|campaign_id|customer| brand|price|</span><br><span class="line">+----------+-------+-----------+--------+------+-----+</span><br><span class="line">|     63133|   6406|      83237|       1| 95471|170.0|</span><br><span class="line">|    313401|   6406|      83237|       1| 87331|199.0|</span><br><span class="line">|    248909|    392|      83237|       1| 32233| 38.0|</span><br><span class="line">|    208458|    392|      83237|       1|174374|139.0|</span><br><span class="line">|    110847|   7211|     135256|       2|145952|32.99|</span><br><span class="line">|    607788|   6261|     387991|       6|207800|199.0|</span><br><span class="line">|    375706|   4520|     387991|       6|  NULL| 99.0|</span><br><span class="line">|     11115|   7213|     139747|       9|186847| 33.0|</span><br><span class="line">|     24484|   7207|     139744|       9|186847| 19.0|</span><br><span class="line">|     28589|   5953|     395195|      13|  NULL|428.0|</span><br><span class="line">|     23236|   5953|     395195|      13|  NULL|368.0|</span><br><span class="line">|    300556|   5953|     395195|      13|  NULL|639.0|</span><br><span class="line">|     92560|   5953|     395195|      13|  NULL|368.0|</span><br><span class="line">|    590965|   4284|      28145|      14|454237|249.0|</span><br><span class="line">|    529913|   4284|      70206|      14|  NULL|249.0|</span><br><span class="line">|    546930|   4284|      28145|      14|  NULL|249.0|</span><br><span class="line">|    639794|   6261|      70206|      14| 37004| 89.9|</span><br><span class="line">|    335413|   4284|      28145|      14|  NULL|249.0|</span><br><span class="line">|    794890|   4284|      70206|      14|454237|249.0|</span><br><span class="line">|    684020|   6261|      70206|      14| 37004| 99.0|</span><br><span class="line">+----------+-------+-----------+--------+------+-----+</span><br><span class="line">only showing top 20 rows</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意：由于本数据集中存在NULL字样的数据，无法直接设置schema，只能先将NULL类型的数据处理掉，然后进行类型转换</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pyspark.sql.types <span class="keyword">import</span> StructType, StructField, IntegerType, FloatType</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换掉NULL字符串，替换掉</span></span><br><span class="line">df = df.replace(<span class="string">&quot;NULL&quot;</span>, <span class="string">&quot;-1&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印df结构信息</span></span><br><span class="line">df.printSchema()   </span><br><span class="line"><span class="comment"># 更改df表结构：更改列类型和列名称</span></span><br><span class="line">ad_feature_df = df.\</span><br><span class="line">    withColumn(<span class="string">&quot;adgroup_id&quot;</span>, df.adgroup_id.cast(IntegerType())).withColumnRenamed(<span class="string">&quot;adgroup_id&quot;</span>, <span class="string">&quot;adgroupId&quot;</span>).\</span><br><span class="line">    withColumn(<span class="string">&quot;cate_id&quot;</span>, df.cate_id.cast(IntegerType())).withColumnRenamed(<span class="string">&quot;cate_id&quot;</span>, <span class="string">&quot;cateId&quot;</span>).\</span><br><span class="line">    withColumn(<span class="string">&quot;campaign_id&quot;</span>, df.campaign_id.cast(IntegerType())).withColumnRenamed(<span class="string">&quot;campaign_id&quot;</span>, <span class="string">&quot;campaignId&quot;</span>).\</span><br><span class="line">    withColumn(<span class="string">&quot;customer&quot;</span>, df.customer.cast(IntegerType())).withColumnRenamed(<span class="string">&quot;customer&quot;</span>, <span class="string">&quot;customerId&quot;</span>).\</span><br><span class="line">    withColumn(<span class="string">&quot;brand&quot;</span>, df.brand.cast(IntegerType())).withColumnRenamed(<span class="string">&quot;brand&quot;</span>, <span class="string">&quot;brandId&quot;</span>).\</span><br><span class="line">    withColumn(<span class="string">&quot;price&quot;</span>, df.price.cast(FloatType()))</span><br><span class="line">ad_feature_df.printSchema()</span><br><span class="line">ad_feature_df.show()</span><br></pre></td></tr></table></figure><p>显示结果:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">root</span><br><span class="line"> |-- adgroup_id: string (nullable = true)</span><br><span class="line"> |-- cate_id: string (nullable = true)</span><br><span class="line"> |-- campaign_id: string (nullable = true)</span><br><span class="line"> |-- customer: string (nullable = true)</span><br><span class="line"> |-- brand: string (nullable = true)</span><br><span class="line"> |-- price: string (nullable = true)</span><br><span class="line"></span><br><span class="line">root</span><br><span class="line"> |-- adgroupId: integer (nullable = true)</span><br><span class="line"> |-- cateId: integer (nullable = true)</span><br><span class="line"> |-- campaignId: integer (nullable = true)</span><br><span class="line"> |-- customerId: integer (nullable = true)</span><br><span class="line"> |-- brandId: integer (nullable = true)</span><br><span class="line"> |-- price: float (nullable = true)</span><br><span class="line"></span><br><span class="line">+---------+------+----------+----------+-------+-----+</span><br><span class="line">|adgroupId|cateId|campaignId|customerId|brandId|price|</span><br><span class="line">+---------+------+----------+----------+-------+-----+</span><br><span class="line">|    63133|  6406|     83237|         1|  95471|170.0|</span><br><span class="line">|   313401|  6406|     83237|         1|  87331|199.0|</span><br><span class="line">|   248909|   392|     83237|         1|  32233| 38.0|</span><br><span class="line">|   208458|   392|     83237|         1| 174374|139.0|</span><br><span class="line">|   110847|  7211|    135256|         2| 145952|32.99|</span><br><span class="line">|   607788|  6261|    387991|         6| 207800|199.0|</span><br><span class="line">|   375706|  4520|    387991|         6|     -1| 99.0|</span><br><span class="line">|    11115|  7213|    139747|         9| 186847| 33.0|</span><br><span class="line">|    24484|  7207|    139744|         9| 186847| 19.0|</span><br><span class="line">|    28589|  5953|    395195|        13|     -1|428.0|</span><br><span class="line">|    23236|  5953|    395195|        13|     -1|368.0|</span><br><span class="line">|   300556|  5953|    395195|        13|     -1|639.0|</span><br><span class="line">|    92560|  5953|    395195|        13|     -1|368.0|</span><br><span class="line">|   590965|  4284|     28145|        14| 454237|249.0|</span><br><span class="line">|   529913|  4284|     70206|        14|     -1|249.0|</span><br><span class="line">|   546930|  4284|     28145|        14|     -1|249.0|</span><br><span class="line">|   639794|  6261|     70206|        14|  37004| 89.9|</span><br><span class="line">|   335413|  4284|     28145|        14|     -1|249.0|</span><br><span class="line">|   794890|  4284|     70206|        14| 454237|249.0|</span><br><span class="line">|   684020|  6261|     70206|        14|  37004| 99.0|</span><br><span class="line">+---------+------+----------+----------+-------+-----+</span><br><span class="line">only showing top 20 rows</span><br></pre></td></tr></table></figure><ul><li>查看各项数据的特征</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">&quot;总广告条数：&quot;</span>,df.count())   <span class="comment"># 数据条数</span></span><br><span class="line">_1 = ad_feature_df.groupBy(<span class="string">&quot;cateId&quot;</span>).count().count()</span><br><span class="line">print(<span class="string">&quot;cateId数值个数：&quot;</span>, _1)</span><br><span class="line">_2 = ad_feature_df.groupBy(<span class="string">&quot;campaignId&quot;</span>).count().count()</span><br><span class="line">print(<span class="string">&quot;campaignId数值个数：&quot;</span>, _2)</span><br><span class="line">_3 = ad_feature_df.groupBy(<span class="string">&quot;customerId&quot;</span>).count().count()</span><br><span class="line">print(<span class="string">&quot;customerId数值个数：&quot;</span>, _3)</span><br><span class="line">_4 = ad_feature_df.groupBy(<span class="string">&quot;brandId&quot;</span>).count().count()</span><br><span class="line">print(<span class="string">&quot;brandId数值个数：&quot;</span>, _4)</span><br><span class="line">ad_feature_df.sort(<span class="string">&quot;price&quot;</span>).show()</span><br><span class="line">ad_feature_df.sort(<span class="string">&quot;price&quot;</span>, ascending=<span class="literal">False</span>).show()</span><br><span class="line">print(<span class="string">&quot;价格高于1w的条目个数：&quot;</span>, ad_feature_df.select(<span class="string">&quot;price&quot;</span>).<span class="built_in">filter</span>(<span class="string">&quot;price&gt;10000&quot;</span>).count())</span><br><span class="line">print(<span class="string">&quot;价格低于1的条目个数&quot;</span>, ad_feature_df.select(<span class="string">&quot;price&quot;</span>).<span class="built_in">filter</span>(<span class="string">&quot;price&lt;1&quot;</span>).count())</span><br></pre></td></tr></table></figure><p>显示结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">总广告条数： 846811</span><br><span class="line">cateId数值个数： 6769</span><br><span class="line">campaignId数值个数： 423436</span><br><span class="line">customerId数值个数： 255875</span><br><span class="line">brandId数值个数： 99815</span><br><span class="line">+---------+------+----------+----------+-------+-----+</span><br><span class="line">|adgroupId|cateId|campaignId|customerId|brandId|price|</span><br><span class="line">+---------+------+----------+----------+-------+-----+</span><br><span class="line">|   485749|  9970|    352666|    140520|     -1| 0.01|</span><br><span class="line">|    88975|  9996|    198424|    182415|     -1| 0.01|</span><br><span class="line">|   109704| 10539|     59774|     90351| 202710| 0.01|</span><br><span class="line">|    49911|  7032|    129079|    172334|     -1| 0.01|</span><br><span class="line">|   339334|  9994|    310408|    211292| 383023| 0.01|</span><br><span class="line">|     6636|  6703|    392038|     46239| 406713| 0.01|</span><br><span class="line">|    92241|  6130|     72781|    149714|     -1| 0.01|</span><br><span class="line">|    20397| 10539|    410958|     65726|  79971| 0.01|</span><br><span class="line">|   345870|  9995|    179595|    191036|  79971| 0.01|</span><br><span class="line">|    77797|  9086|    218276|     31183|     -1| 0.01|</span><br><span class="line">|    14435|  1136|    135610|     17788|     -1| 0.01|</span><br><span class="line">|    42055|  9994|     43866|    113068| 123242| 0.01|</span><br><span class="line">|    41925|  7032|     85373|    114532|     -1| 0.01|</span><br><span class="line">|    67558|  9995|     90141|     83948|     -1| 0.01|</span><br><span class="line">|   149570|  7043|    126746|    176076|     -1| 0.01|</span><br><span class="line">|   518883|  7185|    403318|     58013|     -1| 0.01|</span><br><span class="line">|     2246|  9996|    413653|     60214| 182966| 0.01|</span><br><span class="line">|   290675|  4824|    315371|    240984|     -1| 0.01|</span><br><span class="line">|   552638| 10305|    403318|     58013|     -1| 0.01|</span><br><span class="line">|    89831| 10539|     90141|     83948| 211816| 0.01|</span><br><span class="line">+---------+------+----------+----------+-------+-----+</span><br><span class="line">only showing top 20 rows</span><br><span class="line"></span><br><span class="line">+---------+------+----------+----------+-------+-----------+</span><br><span class="line">|adgroupId|cateId|campaignId|customerId|brandId|      price|</span><br><span class="line">+---------+------+----------+----------+-------+-----------+</span><br><span class="line">|   658722|  1093|    218101|    207754|     -1|      1.0E8|</span><br><span class="line">|   468220|  1093|    270719|    207754|     -1|      1.0E8|</span><br><span class="line">|   179746|  1093|    270027|    102509| 405447|      1.0E8|</span><br><span class="line">|   443295|  1093|     44251|    102509| 300681|      1.0E8|</span><br><span class="line">|    31899|   685|    218918|     31239| 278301|      1.0E8|</span><br><span class="line">|   243384|   685|    218918|     31239| 278301|      1.0E8|</span><br><span class="line">|   554311|  1093|    266086|    207754|     -1|      1.0E8|</span><br><span class="line">|   513942|   745|      8401|     86243|     -1|8.8888888E7|</span><br><span class="line">|   201060|   745|      8401|     86243|     -1|5.5555556E7|</span><br><span class="line">|   289563|   685|     37665|    120847| 278301|      1.5E7|</span><br><span class="line">|    35156|   527|    417722|     72273| 278301|      1.0E7|</span><br><span class="line">|    33756|   527|    416333|     70894|     -1|  9900000.0|</span><br><span class="line">|   335495|   739|    170121|    148946| 326126|  9600000.0|</span><br><span class="line">|   218306|   206|    162394|      4339| 221720|  8888888.0|</span><br><span class="line">|   213567|  7213|    239302|    205612| 406125|  5888888.0|</span><br><span class="line">|   375920|   527|    217512|    148946| 326126|  4760000.0|</span><br><span class="line">|   262215|   527|    132721|     11947| 417898|  3980000.0|</span><br><span class="line">|   154623|   739|    170121|    148946| 326126|  3900000.0|</span><br><span class="line">|   152414|   739|    170121|    148946| 326126|  3900000.0|</span><br><span class="line">|   448651|   527|    422260|     41289| 209959|  3800000.0|</span><br><span class="line">+---------+------+----------+----------+-------+-----------+</span><br><span class="line">only showing top 20 rows</span><br><span class="line"></span><br><span class="line">价格高于1w的条目个数： 6527</span><br><span class="line">价格低于1的条目个数 5762</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>特征选择</p><ul><li>品牌有些缺失，我们并没有建立用户和品牌的关系（召回时，我只算了类目）。不考虑</li><li>类别：在召回时已经考虑了，虽说会影响点击结果，但是我们仍不考虑。</li><li>淘客无法从数据体现区别，所以用 price来作为具体特征。</li><li>cateId：脱敏过的商品类目ID；</li></ul></li><li><p>campaignId：脱敏过的广告计划ID；</p><ul><li>customerId:脱敏过的广告主ID；</li></ul></li><li><p>brandId：脱敏过的品牌ID；</p><p>以上四个特征均属于分类特征，但由于分类值个数均过于庞大，如果去做热独编码处理，会导致数据过于稀疏 且当前我们缺少对这些特征更加具体的信息，（如商品类目具体信息、品牌具体信息等），从而无法对这些特征的数据做聚类、降维处理 因此这里不选取它们作为特征</p><p>而只选取price作为特征数据，因为价格本身是一个统计类型连续数值型数据，且能很好的体现广告的价值属性特征，通常也不需要做其他处理(离散化、归一化、标准化等)，所以这里直接将当做特征数据来使用</p></li></ul><h3 id="4-分析并预处理user-profile数据集"><a href="#4-分析并预处理user-profile数据集" class="headerlink" title="4. 分析并预处理user_profile数据集"></a>4. 分析并预处理user_profile数据集</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从HDFS加载用户基本信息数据</span></span><br><span class="line">df = spark.read.csv(<span class="string">&quot;hdfs://localhost:8020/csv/user_profile.csv&quot;</span>, header=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 发现pvalue_level和new_user_class_level存在空值：（注意此处的null表示空值，而如果是NULL，则往往表示是一个字符串）</span></span><br><span class="line"><span class="comment"># 因此直接利用schema就可以加载进该数据，无需替换null值</span></span><br><span class="line">df.show()</span><br></pre></td></tr></table></figure><p>显示结果:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">+------+---------+------------+-----------------+---------+------------+--------------+----------+---------------------+</span><br><span class="line">|userid|cms_segid|cms_group_id|final_gender_code|age_level|pvalue_level|shopping_level|occupation|new_user_class_level |</span><br><span class="line">+------+---------+------------+-----------------+---------+------------+--------------+----------+---------------------+</span><br><span class="line">|   234|        0|           5|                2|        5|        null|             3|         0|                    3|</span><br><span class="line">|   523|        5|           2|                2|        2|           1|             3|         1|                    2|</span><br><span class="line">|   612|        0|           8|                1|        2|           2|             3|         0|                 null|</span><br><span class="line">|  1670|        0|           4|                2|        4|        null|             1|         0|                 null|</span><br><span class="line">|  2545|        0|          10|                1|        4|        null|             3|         0|                 null|</span><br><span class="line">|  3644|       49|           6|                2|        6|           2|             3|         0|                    2|</span><br><span class="line">|  5777|       44|           5|                2|        5|           2|             3|         0|                    2|</span><br><span class="line">|  6211|        0|           9|                1|        3|        null|             3|         0|                    2|</span><br><span class="line">|  6355|        2|           1|                2|        1|           1|             3|         0|                    4|</span><br><span class="line">|  6823|       43|           5|                2|        5|           2|             3|         0|                    1|</span><br><span class="line">|  6972|        5|           2|                2|        2|           2|             3|         1|                    2|</span><br><span class="line">|  9293|        0|           5|                2|        5|        null|             3|         0|                    4|</span><br><span class="line">|  9510|       55|           8|                1|        2|           2|             2|         0|                    2|</span><br><span class="line">| 10122|       33|           4|                2|        4|           2|             3|         0|                    2|</span><br><span class="line">| 10549|        0|           4|                2|        4|           2|             3|         0|                 null|</span><br><span class="line">| 10812|        0|           4|                2|        4|        null|             2|         0|                 null|</span><br><span class="line">| 10912|        0|           4|                2|        4|           2|             3|         0|                 null|</span><br><span class="line">| 10996|        0|           5|                2|        5|        null|             3|         0|                    4|</span><br><span class="line">| 11256|        8|           2|                2|        2|           1|             3|         0|                    3|</span><br><span class="line">| 11310|       31|           4|                2|        4|           1|             3|         0|                    4|</span><br><span class="line">+------+---------+------------+-----------------+---------+------------+--------------+----------+---------------------+</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意：这里的null会直接被pyspark识别为None数据，也就是na数据，所以这里可以直接利用schema导入数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pyspark.sql.types <span class="keyword">import</span> StructType, StructField, StringType, IntegerType, LongType, FloatType</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建表结构schema对象</span></span><br><span class="line">schema = StructType([</span><br><span class="line">    StructField(<span class="string">&quot;userId&quot;</span>, IntegerType()),  </span><br><span class="line">    StructField(<span class="string">&quot;cms_segid&quot;</span>, IntegerType()),</span><br><span class="line">    StructField(<span class="string">&quot;cms_group_id&quot;</span>, IntegerType()),</span><br><span class="line">    StructField(<span class="string">&quot;final_gender_code&quot;</span>, IntegerType()),  <span class="comment"># 性别</span></span><br><span class="line">    StructField(<span class="string">&quot;age_level&quot;</span>, IntegerType()),          <span class="comment"># 年龄范围 </span></span><br><span class="line">    StructField(<span class="string">&quot;pvalue_level&quot;</span>, IntegerType()),       <span class="comment"># 消费档次</span></span><br><span class="line">    StructField(<span class="string">&quot;shopping_level&quot;</span>, IntegerType()),     <span class="comment"># 购物频繁程度</span></span><br><span class="line">    StructField(<span class="string">&quot;occupation&quot;</span>, IntegerType()),         <span class="comment"># 是否是大学生</span></span><br><span class="line">    StructField(<span class="string">&quot;new_user_class_level&quot;</span>, IntegerType()) <span class="comment"># 居住城市水平</span></span><br><span class="line">])</span><br><span class="line"><span class="comment"># 利用schema从hdfs加载</span></span><br><span class="line">user_profile_df = spark.read.csv(<span class="string">&quot;hdfs://localhost:8020/csv/user_profile.csv&quot;</span>, header=<span class="literal">True</span>, schema=schema)</span><br><span class="line">user_profile_df.printSchema()</span><br><span class="line">user_profile_df.show()</span><br></pre></td></tr></table></figure><p>显示结果:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">root</span><br><span class="line"> |-- userId: integer (nullable = true)</span><br><span class="line"> |-- cms_segid: integer (nullable = true)</span><br><span class="line"> |-- cms_group_id: integer (nullable = true)</span><br><span class="line"> |-- final_gender_code: integer (nullable = true)</span><br><span class="line"> |-- age_level: integer (nullable = true)</span><br><span class="line"> |-- pvalue_level: integer (nullable = true)</span><br><span class="line"> |-- shopping_level: integer (nullable = true)</span><br><span class="line"> |-- occupation: integer (nullable = true)</span><br><span class="line"> |-- new_user_class_level: integer (nullable = true)</span><br><span class="line"></span><br><span class="line">+------+---------+------------+-----------------+---------+------------+--------------+----------+--------------------+</span><br><span class="line">|userId|cms_segid|cms_group_id|final_gender_code|age_level|pvalue_level|shopping_level|occupation|new_user_class_level|</span><br><span class="line">+------+---------+------------+-----------------+---------+------------+--------------+----------+--------------------+</span><br><span class="line">|   234|        0|           5|                2|        5|        null|             3|         0|                   3|</span><br><span class="line">|   523|        5|           2|                2|        2|           1|             3|         1|                   2|</span><br><span class="line">|   612|        0|           8|                1|        2|           2|             3|         0|                null|</span><br><span class="line">|  1670|        0|           4|                2|        4|        null|             1|         0|                null|</span><br><span class="line">|  2545|        0|          10|                1|        4|        null|             3|         0|                null|</span><br><span class="line">|  3644|       49|           6|                2|        6|           2|             3|         0|                   2|</span><br><span class="line">|  5777|       44|           5|                2|        5|           2|             3|         0|                   2|</span><br><span class="line">|  6211|        0|           9|                1|        3|        null|             3|         0|                   2|</span><br><span class="line">|  6355|        2|           1|                2|        1|           1|             3|         0|                   4|</span><br><span class="line">|  6823|       43|           5|                2|        5|           2|             3|         0|                   1|</span><br><span class="line">|  6972|        5|           2|                2|        2|           2|             3|         1|                   2|</span><br><span class="line">|  9293|        0|           5|                2|        5|        null|             3|         0|                   4|</span><br><span class="line">|  9510|       55|           8|                1|        2|           2|             2|         0|                   2|</span><br><span class="line">| 10122|       33|           4|                2|        4|           2|             3|         0|                   2|</span><br><span class="line">| 10549|        0|           4|                2|        4|           2|             3|         0|                null|</span><br><span class="line">| 10812|        0|           4|                2|        4|        null|             2|         0|                null|</span><br><span class="line">| 10912|        0|           4|                2|        4|           2|             3|         0|                null|</span><br><span class="line">| 10996|        0|           5|                2|        5|        null|             3|         0|                   4|</span><br><span class="line">| 11256|        8|           2|                2|        2|           1|             3|         0|                   3|</span><br><span class="line">| 11310|       31|           4|                2|        4|           1|             3|         0|                   4|</span><br><span class="line">+------+---------+------------+-----------------+---------+------------+--------------+----------+--------------------+</span><br><span class="line">only showing top 20 rows</span><br></pre></td></tr></table></figure><ul><li>显示特征情况</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">&quot;分类特征值个数情况: &quot;</span>)</span><br><span class="line">print(<span class="string">&quot;cms_segid: &quot;</span>, user_profile_df.groupBy(<span class="string">&quot;cms_segid&quot;</span>).count().count())</span><br><span class="line">print(<span class="string">&quot;cms_group_id: &quot;</span>, user_profile_df.groupBy(<span class="string">&quot;cms_group_id&quot;</span>).count().count())</span><br><span class="line">print(<span class="string">&quot;final_gender_code: &quot;</span>, user_profile_df.groupBy(<span class="string">&quot;final_gender_code&quot;</span>).count().count())</span><br><span class="line">print(<span class="string">&quot;age_level: &quot;</span>, user_profile_df.groupBy(<span class="string">&quot;age_level&quot;</span>).count().count())</span><br><span class="line">print(<span class="string">&quot;shopping_level: &quot;</span>, user_profile_df.groupBy(<span class="string">&quot;shopping_level&quot;</span>).count().count())</span><br><span class="line">print(<span class="string">&quot;occupation: &quot;</span>, user_profile_df.groupBy(<span class="string">&quot;occupation&quot;</span>).count().count())</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;含缺失值的特征情况: &quot;</span>)</span><br><span class="line">user_profile_df.groupBy(<span class="string">&quot;pvalue_level&quot;</span>).count().show()</span><br><span class="line">user_profile_df.groupBy(<span class="string">&quot;new_user_class_level&quot;</span>).count().show()</span><br><span class="line"></span><br><span class="line">t_count = user_profile_df.count()</span><br><span class="line">pl_na_count = t_count - user_profile_df.dropna(subset=[<span class="string">&quot;pvalue_level&quot;</span>]).count()</span><br><span class="line">print(<span class="string">&quot;pvalue_level的空值情况：&quot;</span>, pl_na_count, <span class="string">&quot;空值占比：%0.2f%%&quot;</span>%(pl_na_count/t_count*<span class="number">100</span>))</span><br><span class="line">nul_na_count = t_count - user_profile_df.dropna(subset=[<span class="string">&quot;new_user_class_level&quot;</span>]).count()</span><br><span class="line">print(<span class="string">&quot;new_user_class_level的空值情况：&quot;</span>, nul_na_count, <span class="string">&quot;空值占比：%0.2f%%&quot;</span>%(nul_na_count/t_count*<span class="number">100</span>))</span><br></pre></td></tr></table></figure><p>显示内容:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">分类特征值个数情况: </span><br><span class="line">cms_segid:  97</span><br><span class="line">cms_group_id:  13</span><br><span class="line">final_gender_code:  2</span><br><span class="line">age_level:  7</span><br><span class="line">shopping_level:  3</span><br><span class="line">occupation:  2</span><br><span class="line">含缺失值的特征情况: </span><br><span class="line">+------------+------+</span><br><span class="line">|pvalue_level| count|</span><br><span class="line">+------------+------+</span><br><span class="line">|        null|575917|</span><br><span class="line">|           1|154436|</span><br><span class="line">|           3| 37759|</span><br><span class="line">|           2|293656|</span><br><span class="line">+------------+------+</span><br><span class="line"></span><br><span class="line">+--------------------+------+</span><br><span class="line">|new_user_class_level| count|</span><br><span class="line">+--------------------+------+</span><br><span class="line">|                null|344920|</span><br><span class="line">|                   1| 80548|</span><br><span class="line">|                   3|173047|</span><br><span class="line">|                   4|138833|</span><br><span class="line">|                   2|324420|</span><br><span class="line">+--------------------+------+</span><br><span class="line"></span><br><span class="line">pvalue_level的空值情况： 575917 空值占比：54.24%</span><br><span class="line">new_user_class_level的空值情况： 344920 空值占比：32.49%</span><br></pre></td></tr></table></figure><ul><li><p>缺失值处理</p><ul><li><p>注意，一般情况下：</p><ul><li>缺失率低于10%：可直接进行相应的填充，如默认值、均值、算法拟合等等；</li><li>高于10%：往往会考虑舍弃该特征</li><li>特征处理，如1维转多维</li></ul><p>但根据我们的经验，我们的广告推荐其实和用户的消费水平、用户所在城市等级都有比较大的关联，因此在这里pvalue_level、new_user_class_level都是比较重要的特征，我们不考虑舍弃</p></li></ul></li><li><p>缺失值处理方案：</p><ul><li>填充方案：结合用户的其他特征值，利用随机森林算法进行预测；但产生了大量人为构建的数据，一定程度上增加了数据的噪音</li><li>把变量映射到高维空间：如pvalue_level的1维数据，转换成是否1、是否2、是否3、是否缺失的4维数据；这样保证了所有原始数据不变，同时能提高精确度，但这样会导致数据变得比较稀疏，如果样本量很小，反而会导致样本效果较差，因此也不能滥用</li></ul></li><li><p>填充方案</p><ul><li>利用随机森林对pvalue_level的缺失值进行预测</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark.mllib.regression <span class="keyword">import</span> LabeledPoint</span><br><span class="line"></span><br><span class="line"><span class="comment"># pyspark.mllib是基于RDD的，需要将数据先转化为RDD,转化时需要有特定的格式.</span></span><br><span class="line"><span class="comment"># 剔除掉缺失值数据，将余下的数据作为训练数据</span></span><br><span class="line"><span class="comment"># user_profile_df.dropna(subset=[&quot;pvalue_level&quot;])： 将pvalue_level中的空值所在行数据剔除后的数据，作为训练样本</span></span><br><span class="line">train_data = user_profile_df.dropna(subset=[<span class="string">&quot;pvalue_level&quot;</span>]).rdd.<span class="built_in">map</span>(</span><br><span class="line">    <span class="keyword">lambda</span> r:LabeledPoint(r.pvalue_level-<span class="number">1</span>, [r.cms_segid, r.cms_group_id, r.final_gender_code, r.age_level, r.shopping_level, r.occupation]) <span class="comment"># 目标值是从1开始。要求是从零开始，所以减一。</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意随机森林输入数据时，由于label的分类数是从0开始的，但pvalue_level的目前只分别是1，2，3，所以需要对应分别-1来作为目标值</span></span><br><span class="line"><span class="comment"># 自然那么最终得出预测值后，需要对应+1才能还原回来</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们使用cms_segid, cms_group_id, final_gender_code, age_level, shopping_level, occupation作为特征值，pvalue_level作为目标值</span></span><br></pre></td></tr></table></figure><ul><li>Labeled point</li></ul><p>A labeled point is a local vector, either dense or sparse, associated with a label/response. In MLlib, labeled points are used in supervised learning algorithms. We use a double to store a label, so we can use labeled points in both regression and classification. For binary classification, a label should be either 0 (negative) or 1 (positive). For multiclass classification, labels should be class indices starting from zero: 0, 1, 2, ….<br>标记点是与标签/响应相关联的密集或稀疏的局部矢量。在MLlib中，标记点用于监督学习算法。我们使用double来存储标签，因此我们可以在回归和分类中使用标记点。对于二分类，标签应为0（负）或1（正）。对于多类分类，标签应该是从零开始的类索引：0, 1, 2, …。</p><p><strong>Python</strong><br>A labeled point is represented by LabeledPoint.<br>标记点表示为 LabeledPoint。<br>Refer to the LabeledPoint Python docs for more details on the API.<br>有关API的更多详细信息，请参阅LabeledPointPython文档。</p><p><strong>如何创建LabeledPoint的数据格式呢？这里给个例子！</strong></p><p>每个样本都可以准备一个LabeledPoint，把一堆LabeledPoint交给模型进行处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark.mllib.linalg <span class="keyword">import</span> SparseVector</span><br><span class="line"><span class="keyword">from</span> pyspark.mllib.regression <span class="keyword">import</span> LabeledPoint</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create a labeled point with a positive label and a dense feature vector.</span></span><br><span class="line">pos = LabeledPoint(<span class="number">1.0</span>, [<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">3.0</span>]) <span class="comment"># 前一个1.0为目标值，后边的列表为特征——此处为稠密表示</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create a labeled point with a negative label and a sparse feature vector.</span></span><br><span class="line">neg = LabeledPoint(<span class="number">0.0</span>, SparseVector(<span class="number">3</span>, [<span class="number">0</span>, <span class="number">2</span>], [<span class="number">1.0</span>, <span class="number">3.0</span>]))  <span class="comment"># 此处为稀疏的表示</span></span><br></pre></td></tr></table></figure><ul><li>随机森林：<a href="https://spark.apache.org/docs/latest/api/python/pyspark.mllib.html?highlight=randomforest#pyspark.mllib.tree.RandomForest">pyspark.mllib.tree.RandomForest</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark.mllib.tree <span class="keyword">import</span> RandomForest</span><br><span class="line"><span class="comment"># 训练分类模型</span></span><br><span class="line"><span class="comment"># 参数1 训练的数据</span></span><br><span class="line"><span class="comment"># 参数2 目标值的分类个数 0,1,2</span></span><br><span class="line"><span class="comment"># 参数3 特征中是否包含分类的特征 &#123;2:2,3:7&#125; &#123;2:2&#125; 表示 在特征中 第三个特征是分类的: 有两个分类</span></span><br><span class="line"><span class="comment"># 参数4 随机森林中 树的棵数</span></span><br><span class="line">model = RandomForest.trainClassifier(train_data, <span class="number">3</span>, &#123;&#125;, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><ul><li>随机森林模型：<a href="https://spark.apache.org/docs/latest/api/python/pyspark.mllib.html?highlight=randomforest#pyspark.mllib.tree.RandomForestModel">pyspark.mllib.tree.RandomForestModel</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 预测单个数据</span></span><br><span class="line"><span class="comment"># 注意用法：https://spark.apache.org/docs/latest/api/python/pyspark.mllib.html?highlight=tree%20random#pyspark.mllib.tree.RandomForestModel.predict</span></span><br><span class="line">model.predict([<span class="number">0.0</span>, <span class="number">4.0</span> ,<span class="number">2.0</span> , <span class="number">4.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>])</span><br></pre></td></tr></table></figure><p>显示结果:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.0</span><br></pre></td></tr></table></figure><p>接下来进行有缺失值的预测。</p><ul><li>筛选出缺失值条目</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">pl_na_df = user_profile_df.na.fill(-<span class="number">1</span>).where(<span class="string">&quot;pvalue_level=-1&quot;</span>)</span><br><span class="line">pl_na_df.show(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">row</span>(<span class="params">r</span>):</span></span><br><span class="line">    <span class="keyword">return</span> r.cms_segid, r.cms_group_id, r.final_gender_code, r.age_level, r.shopping_level, r.occupation</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转换为普通的rdd类型 MLlib都是基于 RDD 的、</span></span><br><span class="line">rdd = pl_na_df.rdd.<span class="built_in">map</span>(row)</span><br><span class="line"><span class="comment"># 预测全部的pvalue_level值:</span></span><br><span class="line">predicts = model.predict(rdd)</span><br><span class="line"><span class="comment"># 查看前20条</span></span><br><span class="line">print(predicts.take(<span class="number">20</span>))</span><br><span class="line">print(<span class="string">&quot;预测值总数&quot;</span>, predicts.count())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里注意predict参数，如果是预测多个，那么参数必须是直接由列表构成的rdd参数，而不能是dataframe.rdd类型</span></span><br><span class="line"><span class="comment"># 因此这里经过map函数处理，将每一行数据转换为普通的列表数据</span></span><br></pre></td></tr></table></figure><p>显示结果:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">+------+---------+------------+-----------------+---------+------------+--------------+----------+--------------------+</span><br><span class="line">|userId|cms_segid|cms_group_id|final_gender_code|age_level|pvalue_level|shopping_level|occupation|new_user_class_level|</span><br><span class="line">+------+---------+------------+-----------------+---------+------------+--------------+----------+--------------------+</span><br><span class="line">|   234|        0|           5|                2|        5|          -1|             3|         0|                   3|</span><br><span class="line">|  1670|        0|           4|                2|        4|          -1|             1|         0|                  -1|</span><br><span class="line">|  2545|        0|          10|                1|        4|          -1|             3|         0|                  -1|</span><br><span class="line">|  6211|        0|           9|                1|        3|          -1|             3|         0|                   2|</span><br><span class="line">|  9293|        0|           5|                2|        5|          -1|             3|         0|                   4|</span><br><span class="line">| 10812|        0|           4|                2|        4|          -1|             2|         0|                  -1|</span><br><span class="line">| 10996|        0|           5|                2|        5|          -1|             3|         0|                   4|</span><br><span class="line">| 11602|        0|           5|                2|        5|          -1|             3|         0|                   2|</span><br><span class="line">| 11727|        0|           3|                2|        3|          -1|             3|         0|                   1|</span><br><span class="line">| 12195|        0|          10|                1|        4|          -1|             3|         0|                   2|</span><br><span class="line">+------+---------+------------+-----------------+---------+------------+--------------+----------+--------------------+</span><br><span class="line">only showing top 10 rows</span><br><span class="line"></span><br><span class="line">[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0]</span><br><span class="line">预测值总数 575917</span><br></pre></td></tr></table></figure><ul><li>转换为pandas dataframe</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里数据量比较小，直接转换为pandas dataframe来处理，因为方便，但注意如果数据量较大不推荐，因为这样会把全部数据加载到内存中</span></span><br><span class="line">temp = predicts.<span class="built_in">map</span>(<span class="keyword">lambda</span> x:<span class="built_in">int</span>(x)).collect()</span><br><span class="line">pdf = pl_na_df.toPandas()</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"> <span class="comment"># 在pandas df的基础上直接替换掉列数据</span></span><br><span class="line">pdf[<span class="string">&quot;pvalue_level&quot;</span>] = np.array(temp) + <span class="number">1</span>  <span class="comment"># 注意+1 还原预测值（前面减1了。）</span></span><br><span class="line">pdf</span><br></pre></td></tr></table></figure><ul><li>与非缺失数据进行拼接，完成pvalue_level的缺失值预测</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">new_user_profile_df = user_profile_df.dropna(subset=[<span class="string">&quot;pvalue_level&quot;</span>]).unionAll(spark.createDataFrame(pdf, schema=schema))</span><br><span class="line">new_user_profile_df.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意：unionAll的使用，两个df的表结构必须完全一样</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>显示结果:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">+------+---------+------------+-----------------+---------+------------+--------------+----------+--------------------+</span><br><span class="line">|userId|cms_segid|cms_group_id|final_gender_code|age_level|pvalue_level|shopping_level|occupation|new_user_class_level|</span><br><span class="line">+------+---------+------------+-----------------+---------+------------+--------------+----------+--------------------+</span><br><span class="line">|   523|        5|           2|                2|        2|           1|             3|         1|                   2|</span><br><span class="line">|   612|        0|           8|                1|        2|           2|             3|         0|                null|</span><br><span class="line">|  3644|       49|           6|                2|        6|           2|             3|         0|                   2|</span><br><span class="line">|  5777|       44|           5|                2|        5|           2|             3|         0|                   2|</span><br><span class="line">|  6355|        2|           1|                2|        1|           1|             3|         0|                   4|</span><br><span class="line">|  6823|       43|           5|                2|        5|           2|             3|         0|                   1|</span><br><span class="line">|  6972|        5|           2|                2|        2|           2|             3|         1|                   2|</span><br><span class="line">|  9510|       55|           8|                1|        2|           2|             2|         0|                   2|</span><br><span class="line">| 10122|       33|           4|                2|        4|           2|             3|         0|                   2|</span><br><span class="line">| 10549|        0|           4|                2|        4|           2|             3|         0|                null|</span><br><span class="line">| 10912|        0|           4|                2|        4|           2|             3|         0|                null|</span><br><span class="line">| 11256|        8|           2|                2|        2|           1|             3|         0|                   3|</span><br><span class="line">| 11310|       31|           4|                2|        4|           1|             3|         0|                   4|</span><br><span class="line">| 11739|       20|           3|                2|        3|           2|             3|         0|                   4|</span><br><span class="line">| 12549|       33|           4|                2|        4|           2|             3|         0|                   2|</span><br><span class="line">| 15155|       36|           5|                2|        5|           2|             1|         0|                null|</span><br><span class="line">| 15347|       20|           3|                2|        3|           2|             3|         0|                   3|</span><br><span class="line">| 15455|        8|           2|                2|        2|           2|             3|         0|                   3|</span><br><span class="line">| 15783|        0|           4|                2|        4|           2|             3|         0|                null|</span><br><span class="line">| 16749|        5|           2|                2|        2|           1|             3|         1|                   4|</span><br><span class="line">+------+---------+------------+-----------------+---------+------------+--------------+----------+--------------------+</span><br><span class="line">only showing top 20 rows</span><br></pre></td></tr></table></figure><ul><li>利用随机森林对new_user_class_level的缺失值进行预测</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark.mllib.regression <span class="keyword">import</span> LabeledPoint</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选出new_user_class_level全部的</span></span><br><span class="line">train_data2 = user_profile_df.dropna(subset=[<span class="string">&quot;new_user_class_level&quot;</span>]).rdd.<span class="built_in">map</span>(</span><br><span class="line">    <span class="keyword">lambda</span> r:LabeledPoint(r.new_user_class_level - <span class="number">1</span>, [r.cms_segid, r.cms_group_id, r.final_gender_code, r.age_level, r.shopping_level, r.occupation])</span><br><span class="line">)</span><br><span class="line"><span class="keyword">from</span> pyspark.mllib.tree <span class="keyword">import</span> RandomForest</span><br><span class="line">model2 = RandomForest.trainClassifier(train_data2, <span class="number">4</span>, &#123;&#125;, <span class="number">5</span>)</span><br><span class="line">model2.predict([<span class="number">0.0</span>, <span class="number">4.0</span> ,<span class="number">2.0</span> , <span class="number">4.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>])</span><br><span class="line"><span class="comment"># 预测值实际应该为2</span></span><br></pre></td></tr></table></figure><p>显示结果:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.0</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">nul_na_df = user_profile_df.na.fill(-<span class="number">1</span>).where(<span class="string">&quot;new_user_class_level=-1&quot;</span>)</span><br><span class="line">nul_na_df.show(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">row</span>(<span class="params">r</span>):</span></span><br><span class="line">    <span class="keyword">return</span> r.cms_segid, r.cms_group_id, r.final_gender_code, r.age_level, r.shopping_level, r.occupation</span><br><span class="line"></span><br><span class="line">rdd2 = nul_na_df.rdd.<span class="built_in">map</span>(row)</span><br><span class="line">predicts2 = model.predict(rdd2)</span><br><span class="line">predicts2.take(<span class="number">20</span>)</span><br></pre></td></tr></table></figure><ul><li>显示结果:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">+------+---------+------------+-----------------+---------+------------+--------------+----------+--------------------+</span><br><span class="line">|userId|cms_segid|cms_group_id|final_gender_code|age_level|pvalue_level|shopping_level|occupation|new_user_class_level|</span><br><span class="line">+------+---------+------------+-----------------+---------+------------+--------------+----------+--------------------+</span><br><span class="line">|   612|        0|           8|                1|        2|           2|             3|         0|                  -1|</span><br><span class="line">|  1670|        0|           4|                2|        4|          -1|             1|         0|                  -1|</span><br><span class="line">|  2545|        0|          10|                1|        4|          -1|             3|         0|                  -1|</span><br><span class="line">| 10549|        0|           4|                2|        4|           2|             3|         0|                  -1|</span><br><span class="line">| 10812|        0|           4|                2|        4|          -1|             2|         0|                  -1|</span><br><span class="line">| 10912|        0|           4|                2|        4|           2|             3|         0|                  -1|</span><br><span class="line">| 12620|        0|           4|                2|        4|          -1|             2|         0|                  -1|</span><br><span class="line">| 14437|        0|           5|                2|        5|          -1|             3|         0|                  -1|</span><br><span class="line">| 14574|        0|           1|                2|        1|          -1|             2|         0|                  -1|</span><br><span class="line">| 14985|        0|          11|                1|        5|          -1|             2|         0|                  -1|</span><br><span class="line">+------+---------+------------+-----------------+---------+------------+--------------+----------+--------------------+</span><br><span class="line">only showing top 10 rows</span><br><span class="line"></span><br><span class="line">[1.0,</span><br><span class="line"> 1.0,</span><br><span class="line"> 1.0,</span><br><span class="line"> 1.0,</span><br><span class="line"> 1.0,</span><br><span class="line"> 1.0,</span><br><span class="line"> 1.0,</span><br><span class="line"> 1.0,</span><br><span class="line"> 0.0,</span><br><span class="line"> 1.0,</span><br><span class="line"> 1.0,</span><br><span class="line"> 1.0,</span><br><span class="line"> 1.0,</span><br><span class="line"> 1.0,</span><br><span class="line"> 1.0,</span><br><span class="line"> 0.0,</span><br><span class="line"> 1.0,</span><br><span class="line"> 0.0,</span><br><span class="line"> 0.0,</span><br><span class="line"> 1.0]</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>总结：可以发现由于这两个字段的缺失过多，所以预测出来的值已经大大失真，但如果缺失率在10%以下，这种方法是比较有效的一种</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">user_profile_df = user_profile_df.na.fill(-<span class="number">1</span>)</span><br><span class="line">user_profile_df.show()</span><br><span class="line"><span class="comment"># new_df = new_df.withColumn(&quot;pvalue_level&quot;, new_df.pvalue_level.cast(StringType()))\</span></span><br><span class="line"><span class="comment">#     .withColumn(&quot;new_user_class_level&quot;, new_df.new_user_class_level.cast(StringType()))</span></span><br></pre></td></tr></table></figure><p>显示结果:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">+------+---------+------------+-----------------+---------+------------+--------------+----------+--------------------+</span><br><span class="line">|userId|cms_segid|cms_group_id|final_gender_code|age_level|pvalue_level|shopping_level|occupation|new_user_class_level|</span><br><span class="line">+------+---------+------------+-----------------+---------+------------+--------------+----------+--------------------+</span><br><span class="line">|   234|        0|           5|                2|        5|          -1|             3|         0|                   3|</span><br><span class="line">|   523|        5|           2|                2|        2|           1|             3|         1|                   2|</span><br><span class="line">|   612|        0|           8|                1|        2|           2|             3|         0|                  -1|</span><br><span class="line">|  1670|        0|           4|                2|        4|          -1|             1|         0|                  -1|</span><br><span class="line">|  2545|        0|          10|                1|        4|          -1|             3|         0|                  -1|</span><br><span class="line">|  3644|       49|           6|                2|        6|           2|             3|         0|                   2|</span><br><span class="line">|  5777|       44|           5|                2|        5|           2|             3|         0|                   2|</span><br><span class="line">|  6211|        0|           9|                1|        3|          -1|             3|         0|                   2|</span><br><span class="line">|  6355|        2|           1|                2|        1|           1|             3|         0|                   4|</span><br><span class="line">|  6823|       43|           5|                2|        5|           2|             3|         0|                   1|</span><br><span class="line">|  6972|        5|           2|                2|        2|           2|             3|         1|                   2|</span><br><span class="line">|  9293|        0|           5|                2|        5|          -1|             3|         0|                   4|</span><br><span class="line">|  9510|       55|           8|                1|        2|           2|             2|         0|                   2|</span><br><span class="line">| 10122|       33|           4|                2|        4|           2|             3|         0|                   2|</span><br><span class="line">| 10549|        0|           4|                2|        4|           2|             3|         0|                  -1|</span><br><span class="line">| 10812|        0|           4|                2|        4|          -1|             2|         0|                  -1|</span><br><span class="line">| 10912|        0|           4|                2|        4|           2|             3|         0|                  -1|</span><br><span class="line">| 10996|        0|           5|                2|        5|          -1|             3|         0|                   4|</span><br><span class="line">| 11256|        8|           2|                2|        2|           1|             3|         0|                   3|</span><br><span class="line">| 11310|       31|           4|                2|        4|           1|             3|         0|                   4|</span><br><span class="line">+------+---------+------------+-----------------+---------+------------+--------------+----------+--------------------+</span><br><span class="line">only showing top 20 rows</span><br></pre></td></tr></table></figure><ul><li>低维转高维方式<ul><li>我们接下来采用将变量映射到高维空间的方法来处理数据，即将缺失项也当做一个单独的特征来对待，保证数据的原始性<br>由于该思想正好和热独编码实现方法一样，因此这里直接使用热独编码方式处理数据</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark.ml.feature <span class="keyword">import</span> OneHotEncoder</span><br><span class="line"><span class="keyword">from</span> pyspark.ml.feature <span class="keyword">import</span> StringIndexer</span><br><span class="line"><span class="keyword">from</span> pyspark.ml <span class="keyword">import</span> Pipeline</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用热独编码转换pvalue_level的一维数据为多维，其中缺失值单独作为一个特征值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要先将缺失值全部替换为数值，与原有特征一起处理</span></span><br><span class="line"><span class="keyword">from</span> pyspark.sql.types <span class="keyword">import</span> StringType</span><br><span class="line">user_profile_df = user_profile_df.na.fill(-<span class="number">1</span>)</span><br><span class="line">user_profile_df.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 热独编码时，必须先将待处理字段转为字符串类型才可处理</span></span><br><span class="line">user_profile_df = user_profile_df.withColumn(<span class="string">&quot;pvalue_level&quot;</span>, user_profile_df.pvalue_level.cast(StringType()))\</span><br><span class="line">    .withColumn(<span class="string">&quot;new_user_class_level&quot;</span>, user_profile_df.new_user_class_level.cast(StringType()))</span><br><span class="line">user_profile_df.printSchema()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对pvalue_level进行热独编码，求值</span></span><br><span class="line">stringindexer = StringIndexer(inputCol=<span class="string">&#x27;pvalue_level&#x27;</span>, outputCol=<span class="string">&#x27;pl_onehot_feature&#x27;</span>)</span><br><span class="line">encoder = OneHotEncoder(dropLast=<span class="literal">False</span>, inputCol=<span class="string">&#x27;pl_onehot_feature&#x27;</span>, outputCol=<span class="string">&#x27;pl_onehot_value&#x27;</span>)</span><br><span class="line">pipeline = Pipeline(stages=[stringindexer, encoder])</span><br><span class="line">pipeline_fit = pipeline.fit(user_profile_df)</span><br><span class="line">user_profile_df2 = pipeline_fit.transform(user_profile_df)</span><br><span class="line"><span class="comment"># pl_onehot_value列的值为稀疏向量，存储热独编码的结果</span></span><br><span class="line">user_profile_df2.printSchema()</span><br><span class="line">user_profile_df2.show()</span><br></pre></td></tr></table></figure><p>显示结果:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">+------+---------+------------+-----------------+---------+------------+--------------+----------+--------------------+</span><br><span class="line">|userId|cms_segid|cms_group_id|final_gender_code|age_level|pvalue_level|shopping_level|occupation|new_user_class_level|</span><br><span class="line">+------+---------+------------+-----------------+---------+------------+--------------+----------+--------------------+</span><br><span class="line">|   234|        0|           5|                2|        5|          -1|             3|         0|                   3|</span><br><span class="line">|   523|        5|           2|                2|        2|           1|             3|         1|                   2|</span><br><span class="line">|   612|        0|           8|                1|        2|           2|             3|         0|                  -1|</span><br><span class="line">|  1670|        0|           4|                2|        4|          -1|             1|         0|                  -1|</span><br><span class="line">|  2545|        0|          10|                1|        4|          -1|             3|         0|                  -1|</span><br><span class="line">|  3644|       49|           6|                2|        6|           2|             3|         0|                   2|</span><br><span class="line">|  5777|       44|           5|                2|        5|           2|             3|         0|                   2|</span><br><span class="line">|  6211|        0|           9|                1|        3|          -1|             3|         0|                   2|</span><br><span class="line">|  6355|        2|           1|                2|        1|           1|             3|         0|                   4|</span><br><span class="line">|  6823|       43|           5|                2|        5|           2|             3|         0|                   1|</span><br><span class="line">|  6972|        5|           2|                2|        2|           2|             3|         1|                   2|</span><br><span class="line">|  9293|        0|           5|                2|        5|          -1|             3|         0|                   4|</span><br><span class="line">|  9510|       55|           8|                1|        2|           2|             2|         0|                   2|</span><br><span class="line">| 10122|       33|           4|                2|        4|           2|             3|         0|                   2|</span><br><span class="line">| 10549|        0|           4|                2|        4|           2|             3|         0|                  -1|</span><br><span class="line">| 10812|        0|           4|                2|        4|          -1|             2|         0|                  -1|</span><br><span class="line">| 10912|        0|           4|                2|        4|           2|             3|         0|                  -1|</span><br><span class="line">| 10996|        0|           5|                2|        5|          -1|             3|         0|                   4|</span><br><span class="line">| 11256|        8|           2|                2|        2|           1|             3|         0|                   3|</span><br><span class="line">| 11310|       31|           4|                2|        4|           1|             3|         0|                   4|</span><br><span class="line">+------+---------+------------+-----------------+---------+------------+--------------+----------+--------------------+</span><br><span class="line">only showing top 20 rows</span><br><span class="line"></span><br><span class="line">root</span><br><span class="line"> |-- userId: integer (nullable = true)</span><br><span class="line"> |-- cms_segid: integer (nullable = true)</span><br><span class="line"> |-- cms_group_id: integer (nullable = true)</span><br><span class="line"> |-- final_gender_code: integer (nullable = true)</span><br><span class="line"> |-- age_level: integer (nullable = true)</span><br><span class="line"> |-- pvalue_level: string (nullable = true)</span><br><span class="line"> |-- shopping_level: integer (nullable = true)</span><br><span class="line"> |-- occupation: integer (nullable = true)</span><br><span class="line"> |-- new_user_class_level: string (nullable = true)</span><br><span class="line"></span><br><span class="line">root</span><br><span class="line"> |-- userId: integer (nullable = true)</span><br><span class="line"> |-- cms_segid: integer (nullable = true)</span><br><span class="line"> |-- cms_group_id: integer (nullable = true)</span><br><span class="line"> |-- final_gender_code: integer (nullable = true)</span><br><span class="line"> |-- age_level: integer (nullable = true)</span><br><span class="line"> |-- pvalue_level: string (nullable = true)</span><br><span class="line"> |-- shopping_level: integer (nullable = true)</span><br><span class="line"> |-- occupation: integer (nullable = true)</span><br><span class="line"> |-- new_user_class_level: string (nullable = true)</span><br><span class="line"> |-- pl_onehot_feature: double (nullable = false)</span><br><span class="line"> |-- pl_onehot_value: vector (nullable = true)</span><br><span class="line"></span><br><span class="line">+------+---------+------------+-----------------+---------+------------+--------------+----------+--------------------+-----------------+---------------+</span><br><span class="line">|userId|cms_segid|cms_group_id|final_gender_code|age_level|pvalue_level|shopping_level|occupation|new_user_class_level|pl_onehot_feature|pl_onehot_value|</span><br><span class="line">+------+---------+------------+-----------------+---------+------------+--------------+----------+--------------------+-----------------+---------------+</span><br><span class="line">|   234|        0|           5|                2|        5|          -1|             3|         0|                   3|              0.0|  (4,[0],[1.0])|</span><br><span class="line">|   523|        5|           2|                2|        2|           1|             3|         1|                   2|              2.0|  (4,[2],[1.0])|</span><br><span class="line">|   612|        0|           8|                1|        2|           2|             3|         0|                  -1|              1.0|  (4,[1],[1.0])|</span><br><span class="line">|  1670|        0|           4|                2|        4|          -1|             1|         0|                  -1|              0.0|  (4,[0],[1.0])|</span><br><span class="line">|  2545|        0|          10|                1|        4|          -1|             3|         0|                  -1|              0.0|  (4,[0],[1.0])|</span><br><span class="line">|  3644|       49|           6|                2|        6|           2|             3|         0|                   2|              1.0|  (4,[1],[1.0])|</span><br><span class="line">|  5777|       44|           5|                2|        5|           2|             3|         0|                   2|              1.0|  (4,[1],[1.0])|</span><br><span class="line">|  6211|        0|           9|                1|        3|          -1|             3|         0|                   2|              0.0|  (4,[0],[1.0])|</span><br><span class="line">|  6355|        2|           1|                2|        1|           1|             3|         0|                   4|              2.0|  (4,[2],[1.0])|</span><br><span class="line">|  6823|       43|           5|                2|        5|           2|             3|         0|                   1|              1.0|  (4,[1],[1.0])|</span><br><span class="line">|  6972|        5|           2|                2|        2|           2|             3|         1|                   2|              1.0|  (4,[1],[1.0])|</span><br><span class="line">|  9293|        0|           5|                2|        5|          -1|             3|         0|                   4|              0.0|  (4,[0],[1.0])|</span><br><span class="line">|  9510|       55|           8|                1|        2|           2|             2|         0|                   2|              1.0|  (4,[1],[1.0])|</span><br><span class="line">| 10122|       33|           4|                2|        4|           2|             3|         0|                   2|              1.0|  (4,[1],[1.0])|</span><br><span class="line">| 10549|        0|           4|                2|        4|           2|             3|         0|                  -1|              1.0|  (4,[1],[1.0])|</span><br><span class="line">| 10812|        0|           4|                2|        4|          -1|             2|         0|                  -1|              0.0|  (4,[0],[1.0])|</span><br><span class="line">| 10912|        0|           4|                2|        4|           2|             3|         0|                  -1|              1.0|  (4,[1],[1.0])|</span><br><span class="line">| 10996|        0|           5|                2|        5|          -1|             3|         0|                   4|              0.0|  (4,[0],[1.0])|</span><br><span class="line">| 11256|        8|           2|                2|        2|           1|             3|         0|                   3|              2.0|  (4,[2],[1.0])|</span><br><span class="line">| 11310|       31|           4|                2|        4|           1|             3|         0|                   4|              2.0|  (4,[2],[1.0])|</span><br><span class="line">+------+---------+------------+-----------------+---------+------------+--------------+----------+--------------------+-----------------+---------------+</span><br><span class="line">only showing top 20 rows</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>使用热编码转换new_user_class_level的一维数据为多维</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">stringindexer = StringIndexer(inputCol=<span class="string">&#x27;new_user_class_level&#x27;</span>, outputCol=<span class="string">&#x27;nucl_onehot_feature&#x27;</span>)</span><br><span class="line">encoder = OneHotEncoder(dropLast=<span class="literal">False</span>, inputCol=<span class="string">&#x27;nucl_onehot_feature&#x27;</span>, outputCol=<span class="string">&#x27;nucl_onehot_value&#x27;</span>)</span><br><span class="line">pipeline = Pipeline(stages=[stringindexer, encoder])</span><br><span class="line">pipeline_fit = pipeline.fit(user_profile_df2)</span><br><span class="line">user_profile_df3 = pipeline_fit.transform(user_profile_df2)</span><br><span class="line">user_profile_df3.show()</span><br></pre></td></tr></table></figure><p>显示结果:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">+------+---------+------------+-----------------+---------+------------+--------------+----------+--------------------+-----------------+---------------+-------------------+-----------------+</span><br><span class="line">|userId|cms_segid|cms_group_id|final_gender_code|age_level|pvalue_level|shopping_level|occupation|new_user_class_level|pl_onehot_feature|pl_onehot_value|nucl_onehot_feature|nucl_onehot_value|</span><br><span class="line">+------+---------+------------+-----------------+---------+------------+--------------+----------+--------------------+-----------------+---------------+-------------------+-----------------+</span><br><span class="line">|   234|        0|           5|                2|        5|          -1|             3|         0|                   3|              0.0|  (4,[0],[1.0])|                2.0|    (5,[2],[1.0])|</span><br><span class="line">|   523|        5|           2|                2|        2|           1|             3|         1|                   2|              2.0|  (4,[2],[1.0])|                1.0|    (5,[1],[1.0])|</span><br><span class="line">|   612|        0|           8|                1|        2|           2|             3|         0|                  -1|              1.0|  (4,[1],[1.0])|                0.0|    (5,[0],[1.0])|</span><br><span class="line">|  1670|        0|           4|                2|        4|          -1|             1|         0|                  -1|              0.0|  (4,[0],[1.0])|                0.0|    (5,[0],[1.0])|</span><br><span class="line">|  2545|        0|          10|                1|        4|          -1|             3|         0|                  -1|              0.0|  (4,[0],[1.0])|                0.0|    (5,[0],[1.0])|</span><br><span class="line">|  3644|       49|           6|                2|        6|           2|             3|         0|                   2|              1.0|  (4,[1],[1.0])|                1.0|    (5,[1],[1.0])|</span><br><span class="line">|  5777|       44|           5|                2|        5|           2|             3|         0|                   2|              1.0|  (4,[1],[1.0])|                1.0|    (5,[1],[1.0])|</span><br><span class="line">|  6211|        0|           9|                1|        3|          -1|             3|         0|                   2|              0.0|  (4,[0],[1.0])|                1.0|    (5,[1],[1.0])|</span><br><span class="line">|  6355|        2|           1|                2|        1|           1|             3|         0|                   4|              2.0|  (4,[2],[1.0])|                3.0|    (5,[3],[1.0])|</span><br><span class="line">|  6823|       43|           5|                2|        5|           2|             3|         0|                   1|              1.0|  (4,[1],[1.0])|                4.0|    (5,[4],[1.0])|</span><br><span class="line">|  6972|        5|           2|                2|        2|           2|             3|         1|                   2|              1.0|  (4,[1],[1.0])|                1.0|    (5,[1],[1.0])|</span><br><span class="line">|  9293|        0|           5|                2|        5|          -1|             3|         0|                   4|              0.0|  (4,[0],[1.0])|                3.0|    (5,[3],[1.0])|</span><br><span class="line">|  9510|       55|           8|                1|        2|           2|             2|         0|                   2|              1.0|  (4,[1],[1.0])|                1.0|    (5,[1],[1.0])|</span><br><span class="line">| 10122|       33|           4|                2|        4|           2|             3|         0|                   2|              1.0|  (4,[1],[1.0])|                1.0|    (5,[1],[1.0])|</span><br><span class="line">| 10549|        0|           4|                2|        4|           2|             3|         0|                  -1|              1.0|  (4,[1],[1.0])|                0.0|    (5,[0],[1.0])|</span><br><span class="line">| 10812|        0|           4|                2|        4|          -1|             2|         0|                  -1|              0.0|  (4,[0],[1.0])|                0.0|    (5,[0],[1.0])|</span><br><span class="line">| 10912|        0|           4|                2|        4|           2|             3|         0|                  -1|              1.0|  (4,[1],[1.0])|                0.0|    (5,[0],[1.0])|</span><br><span class="line">| 10996|        0|           5|                2|        5|          -1|             3|         0|                   4|              0.0|  (4,[0],[1.0])|                3.0|    (5,[3],[1.0])|</span><br><span class="line">| 11256|        8|           2|                2|        2|           1|             3|         0|                   3|              2.0|  (4,[2],[1.0])|                2.0|    (5,[2],[1.0])|</span><br><span class="line">| 11310|       31|           4|                2|        4|           1|             3|         0|                   4|              2.0|  (4,[2],[1.0])|                3.0|    (5,[3],[1.0])|</span><br><span class="line">+------+---------+------------+-----------------+---------+------------+--------------+----------+--------------------+-----------------+---------------+-------------------+-----------------+</span><br><span class="line">only showing top 20 rows</span><br></pre></td></tr></table></figure><ul><li>用户特征合并<ul><li>LR回归用的是 <code>pyspark.ml</code>它要求所有的特征放在一个向量里面。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark.ml.feature <span class="keyword">import</span> VectorAssembler</span><br><span class="line">feature_df = VectorAssembler().setInputCols([<span class="string">&quot;age_level&quot;</span>, <span class="string">&quot;pl_onehot_value&quot;</span>, <span class="string">&quot;nucl_onehot_value&quot;</span>]).setOutputCol(<span class="string">&quot;features&quot;</span>).transform(user_profile_df3)</span><br><span class="line">feature_df.show()</span><br></pre></td></tr></table></figure><p>显示结果:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">+------+---------+------------+-----------------+---------+------------+--------------+----------+--------------------+-----------------+---------------+-------------------+-----------------+--------------------+</span><br><span class="line">|userId|cms_segid|cms_group_id|final_gender_code|age_level|pvalue_level|shopping_level|occupation|new_user_class_level|pl_onehot_feature|pl_onehot_value|nucl_onehot_feature|nucl_onehot_value|            features|</span><br><span class="line">+------+---------+------------+-----------------+---------+------------+--------------+----------+--------------------+-----------------+---------------+-------------------+-----------------+--------------------+</span><br><span class="line">|   234|        0|           5|                2|        5|          -1|             3|         0|                   3|              0.0|  (4,[0],[1.0])|                2.0|    (5,[2],[1.0])|(10,[0,1,7],[5.0,...|</span><br><span class="line">|   523|        5|           2|                2|        2|           1|             3|         1|                   2|              2.0|  (4,[2],[1.0])|                1.0|    (5,[1],[1.0])|(10,[0,3,6],[2.0,...|</span><br><span class="line">|   612|        0|           8|                1|        2|           2|             3|         0|                  -1|              1.0|  (4,[1],[1.0])|                0.0|    (5,[0],[1.0])|(10,[0,2,5],[2.0,...|</span><br><span class="line">|  1670|        0|           4|                2|        4|          -1|             1|         0|                  -1|              0.0|  (4,[0],[1.0])|                0.0|    (5,[0],[1.0])|(10,[0,1,5],[4.0,...|</span><br><span class="line">|  2545|        0|          10|                1|        4|          -1|             3|         0|                  -1|              0.0|  (4,[0],[1.0])|                0.0|    (5,[0],[1.0])|(10,[0,1,5],[4.0,...|</span><br><span class="line">|  3644|       49|           6|                2|        6|           2|             3|         0|                   2|              1.0|  (4,[1],[1.0])|                1.0|    (5,[1],[1.0])|(10,[0,2,6],[6.0,...|</span><br><span class="line">|  5777|       44|           5|                2|        5|           2|             3|         0|                   2|              1.0|  (4,[1],[1.0])|                1.0|    (5,[1],[1.0])|(10,[0,2,6],[5.0,...|</span><br><span class="line">|  6211|        0|           9|                1|        3|          -1|             3|         0|                   2|              0.0|  (4,[0],[1.0])|                1.0|    (5,[1],[1.0])|(10,[0,1,6],[3.0,...|</span><br><span class="line">|  6355|        2|           1|                2|        1|           1|             3|         0|                   4|              2.0|  (4,[2],[1.0])|                3.0|    (5,[3],[1.0])|(10,[0,3,8],[1.0,...|</span><br><span class="line">|  6823|       43|           5|                2|        5|           2|             3|         0|                   1|              1.0|  (4,[1],[1.0])|                4.0|    (5,[4],[1.0])|(10,[0,2,9],[5.0,...|</span><br><span class="line">|  6972|        5|           2|                2|        2|           2|             3|         1|                   2|              1.0|  (4,[1],[1.0])|                1.0|    (5,[1],[1.0])|(10,[0,2,6],[2.0,...|</span><br><span class="line">|  9293|        0|           5|                2|        5|          -1|             3|         0|                   4|              0.0|  (4,[0],[1.0])|                3.0|    (5,[3],[1.0])|(10,[0,1,8],[5.0,...|</span><br><span class="line">|  9510|       55|           8|                1|        2|           2|             2|         0|                   2|              1.0|  (4,[1],[1.0])|                1.0|    (5,[1],[1.0])|(10,[0,2,6],[2.0,...|</span><br><span class="line">| 10122|       33|           4|                2|        4|           2|             3|         0|                   2|              1.0|  (4,[1],[1.0])|                1.0|    (5,[1],[1.0])|(10,[0,2,6],[4.0,...|</span><br><span class="line">| 10549|        0|           4|                2|        4|           2|             3|         0|                  -1|              1.0|  (4,[1],[1.0])|                0.0|    (5,[0],[1.0])|(10,[0,2,5],[4.0,...|</span><br><span class="line">| 10812|        0|           4|                2|        4|          -1|             2|         0|                  -1|              0.0|  (4,[0],[1.0])|                0.0|    (5,[0],[1.0])|(10,[0,1,5],[4.0,...|</span><br><span class="line">| 10912|        0|           4|                2|        4|           2|             3|         0|                  -1|              1.0|  (4,[1],[1.0])|                0.0|    (5,[0],[1.0])|(10,[0,2,5],[4.0,...|</span><br><span class="line">| 10996|        0|           5|                2|        5|          -1|             3|         0|                   4|              0.0|  (4,[0],[1.0])|                3.0|    (5,[3],[1.0])|(10,[0,1,8],[5.0,...|</span><br><span class="line">| 11256|        8|           2|                2|        2|           1|             3|         0|                   3|              2.0|  (4,[2],[1.0])|                2.0|    (5,[2],[1.0])|(10,[0,3,7],[2.0,...|</span><br><span class="line">| 11310|       31|           4|                2|        4|           1|             3|         0|                   4|              2.0|  (4,[2],[1.0])|                3.0|    (5,[3],[1.0])|(10,[0,3,8],[4.0,...|</span><br><span class="line">+------+---------+------------+-----------------+---------+------------+--------------+----------+--------------------+-----------------+---------------+-------------------+-----------------+--------------------+</span><br><span class="line">only showing top 20 rows</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">feature_df.select(<span class="string">&quot;features&quot;</span>).show()</span><br></pre></td></tr></table></figure><p>显示结果:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">+--------------------+</span><br><span class="line">|            features|</span><br><span class="line">+--------------------+</span><br><span class="line">|(10,[0,1,7],[5.0,...|</span><br><span class="line">|(10,[0,3,6],[2.0,...|</span><br><span class="line">|(10,[0,2,5],[2.0,...|</span><br><span class="line">|(10,[0,1,5],[4.0,...|</span><br><span class="line">|(10,[0,1,5],[4.0,...|</span><br><span class="line">|(10,[0,2,6],[6.0,...|</span><br><span class="line">|(10,[0,2,6],[5.0,...|</span><br><span class="line">|(10,[0,1,6],[3.0,...|</span><br><span class="line">|(10,[0,3,8],[1.0,...|</span><br><span class="line">|(10,[0,2,9],[5.0,...|</span><br><span class="line">|(10,[0,2,6],[2.0,...|</span><br><span class="line">|(10,[0,1,8],[5.0,...|</span><br><span class="line">|(10,[0,2,6],[2.0,...|</span><br><span class="line">|(10,[0,2,6],[4.0,...|</span><br><span class="line">|(10,[0,2,5],[4.0,...|</span><br><span class="line">|(10,[0,1,5],[4.0,...|</span><br><span class="line">|(10,[0,2,5],[4.0,...|</span><br><span class="line">|(10,[0,1,8],[5.0,...|</span><br><span class="line">|(10,[0,3,7],[2.0,...|</span><br><span class="line">|(10,[0,3,8],[4.0,...|</span><br><span class="line">+--------------------+</span><br><span class="line">only showing top 20 rows</span><br></pre></td></tr></table></figure><ul><li>特征选取</li></ul><p>除了前面处理的pvalue_level和new_user_class_level需要作为特征以外，(能体现出用户的购买力特征)，还有：</p><p>前面分析的以下几个分类特征值个数情况:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- cms_segid:  97</span><br><span class="line">- cms_group_id:  13</span><br><span class="line">- final_gender_code:  2</span><br><span class="line">- age_level:  7</span><br><span class="line">- shopping_level:  3</span><br><span class="line">- occupation:  2</span><br><span class="line">-pvalue_level</span><br><span class="line">-new_user_class_level</span><br><span class="line">-price</span><br></pre></td></tr></table></figure><p>根据经验，以上几个分类特征都一定程度能体现用户在购物方面的特征，且类别都较少，都可以用来作为用户特征</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="缺失值处理"><a href="#缺失值处理" class="headerlink" title="缺失值处理"></a>缺失值处理</h3><ul><li>连续的特征<ul><li>缺失比例比较严重 可以考虑舍弃</li><li>可以考虑使用平均值 中位数 分位数填充</li><li>算法预测 （利用样本中的其它特征作为 特征值，有缺失的特征作为目标值）</li></ul></li><li>分类的特征<ul><li>缺失比例比较严重 可以考虑舍弃</li><li>把缺失作为单独的分类， 如果之前的数据只有两个分类，那么把缺失考虑进来就变成3个分类</li><li>算法预测</li></ul></li><li>利用算法预测缺失值<ul><li>其它特征和要预测的特征之间是否有联系</li><li>样本数据是否足够</li><li>利用算法预测缺失值会引入噪声</li></ul></li></ul><h3 id="利用随机森林预测缺失值"><a href="#利用随机森林预测缺失值" class="headerlink" title="利用随机森林预测缺失值"></a>利用随机森林预测缺失值</h3><ul><li>pyspark MLlib<ul><li>基于RDD的</li><li>监督学习的样本数据要创建成LabeledPoint对象，MLlib通过LabeledPoint来训练模型</li><li>pos = LabeledPoint(目标, [特征list])<ul><li>目标值是分类情况 分类值从0开始连续增加</li><li>所有特征是double类型</li></ul></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;CTR预估数据准备&quot;&gt;&lt;a href=&quot;#CTR预估数据准备&quot; class=&quot;headerlink&quot; title=&quot;CTR预估数据准备&quot;&gt;&lt;/a&gt;CTR预估数据准备&lt;/h2&gt;&lt;h3 id=&quot;1-分析并预处理raw-sample数据集&quot;&gt;&lt;a href=&quot;#1-分析</summary>
      
    
    
    
    <category term="机器学习" scheme="https://xxren8218.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="大数据的lambda架构" scheme="https://xxren8218.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%9A%84lambda%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="推荐系统基础" scheme="https://xxren8218.github.io/tags/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>12-二叉树的路径问题汇总</title>
    <link href="https://xxren8218.github.io/20210709/12-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB.html"/>
    <id>https://xxren8218.github.io/20210709/12-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB.html</id>
    <published>2021-07-09T13:51:32.000Z</published>
    <updated>2021-07-09T14:01:05.938Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二叉树的路径问题"><a href="#二叉树的路径问题" class="headerlink" title="二叉树的路径问题"></a>二叉树的路径问题</h2><p>对于刚刚接触树的问题的新手而言，路径问题是一个比较棘手的问题。题解中关于二叉树路径问题的总结还偏少，今天我用一篇文章总结一下二叉树的路径问题。学透这篇文章，二叉树路径题可以秒杀</p><h3 id="1-问题分类"><a href="#1-问题分类" class="headerlink" title="1.问题分类"></a>1.问题分类</h3><p>二叉树路径的问题大致可以分为两类：</p><ul><li><p>自顶向下：<br>顾名思义，就是从某一个节点(不一定是根节点)，从上向下寻找路径，到某一个节点(不一定是叶节点)结束<br>具体题目如下：</p><p>257.二叉树的所有路径</p><p>面试题 04.12. 求和路径</p><p>112.路径总和</p><p>113.路径总和 II</p><p>437.路径总和 III</p><p>988.从叶结点开始的最小字符串</p></li></ul><p>而继续细分的话还可以分成一般路径与给定和的路径</p><ul><li>非自顶向下：<br>就是从任意节点到任意节点的路径，不需要自顶向下<br>124.二叉树中的最大路径和<br>125.最长同值路径<br>126.二叉树的直径</li></ul><h3 id="2-解题模板"><a href="#2-解题模板" class="headerlink" title="2.解题模板"></a>2.解题模板</h3><p>这类题通常用深度优先搜索(DFS)和广度优先搜索(BFS)解决，BFS较DFS繁琐，这里为了简洁只展现DFS代码<br>下面是我对两类题目的分析与模板</p><h4 id="一、自顶而下："><a href="#一、自顶而下：" class="headerlink" title="一、自顶而下："></a>一、自顶而下：</h4><p>DFS</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##########</span></span><br><span class="line"><span class="comment">#一般路径：#</span></span><br><span class="line"><span class="comment">##########</span></span><br><span class="line">res = []</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span>(<span class="params">root, path</span>)：</span></span><br><span class="line"><span class="function">    <span class="title">if</span> <span class="title">not</span> <span class="title">root</span>:</span> <span class="keyword">return</span>  <span class="comment"># 根节点为空直接返回</span></span><br><span class="line">    path.append(root.val)  <span class="comment"># 作出选择</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root.left <span class="keyword">and</span> <span class="keyword">not</span> root.right: <span class="comment"># 如果到叶节点  </span></span><br><span class="line">        res.append(path)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    dfs(root.left,path)   <span class="comment"># 继续递归</span></span><br><span class="line">    dfs(root.right,path) </span><br><span class="line"></span><br><span class="line"><span class="comment">##############</span></span><br><span class="line"><span class="comment"># 给定和的路径：#</span></span><br><span class="line"><span class="comment">##############</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span>(<span class="params">root, Sum, path</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span></span><br><span class="line">    Sum -= root.val</span><br><span class="line">    path.append(root.val)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root.left <span class="keyword">and</span> <span class="keyword">not</span> root.right <span class="keyword">and</span> Sum == <span class="number">0</span>:</span><br><span class="line">        res.append(path)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"> </span><br><span class="line">    dfs(root.left, Sum, path)</span><br><span class="line">    dfs(root.right, Sum, path)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>这类题型DFS注意点：</strong></p><ol><li><p>如果是找路径和等于给定target的路径的，那么可以不用新增一个临时变量cursum来判断当前路径和，<br>只需要用给定和target减去节点值，最终结束条件判断 target==0 即可</p></li><li><p>是否要回溯：二叉树的问题大部分是不需要回溯的，原因如下：<br>二叉树的递归部分：dfs(root.left),dfs(root.right)已经把可能的路径穷尽了,<br>因此到任意叶节点的路径只可能有一条，绝对不可能出现另外的路径也到这个满足条件的叶节点的;</p><p>而对比二维数组(例如迷宫问题)的DFS,for循环向四个方向查找每次只能朝向一个方向，并没有穷尽路径，<br>因此某一个满足条件的点可能是有多条路径到该点的</p><p>并且visited数组标记已经走过的路径是会受到另外路径是否访问的影响，这时候必须回溯</p></li><li><p>找到路径后是否要return:<br>取决于题目是否要求找到叶节点满足条件的路径,如果必须到叶节点,那么就要return;<br>但如果是到任意节点都可以，那么必不能return,因为这条路径下面还可能有更深的路径满足条件，还要在此基础上继续递归</p></li><li><p>是否要双重递归(即调用根节点的dfs函数后，继续调用根左右节点的pathsum函数)：看题目要不要求从根节点开始的，还是从任意节点开始</p></li></ol><h4 id="二、非自顶而下："><a href="#二、非自顶而下：" class="headerlink" title="二、非自顶而下："></a>二、非自顶而下：</h4><p>这类题目一般解题思路如下：<br>设计一个辅助函数<code>maxpath</code>，调用自身求出以一个节点为根节点的左侧最长路径left和右侧最长路径right，那么经过该节点的最长路径就是left+right<br>接着只需要从根节点开始dfs,不断比较更新全局变量即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">res = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxPath</span>(<span class="params">root</span>) # 以<span class="title">root</span>为路径起始点的最长路径</span></span><br><span class="line"><span class="function">    <span class="title">if</span> <span class="title">not</span> <span class="title">root</span>:</span> <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    left = maxPath(root.left)</span><br><span class="line">    right = maxPath(root.right)</span><br><span class="line">    res = <span class="built_in">max</span>(res, left + right + root.val) <span class="comment"># 更新全局变量  </span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(left, right)   <span class="comment"># 返回左右路径较长者</span></span><br></pre></td></tr></table></figure><p>这类题型DFS注意点：</p><ol><li><p>left,right代表的含义要根据题目所求设置，比如最长路径、最大路径和等等</p></li><li><p>全局变量res的初值设置是0还是INT_MIN要看题目节点是否存在负值,如果存在就用INT_MIN，否则就是0</p></li><li><p>注意两点之间路径为1，因此一个点是不能构成路径的</p></li></ol><h4 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h4><p>下面是对具体题目的分析和代码呈现</p><h4 id="一、自顶向下"><a href="#一、自顶向下" class="headerlink" title="一、自顶向下"></a>一、自顶向下</h4><p>257.二叉树的所有路径</p><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/20210709215304.PNG" alt=""></p><p>直接套用模板1即可，注意把”-&gt;”放在递归调用中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">res = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binaryTreePaths</span>(<span class="params">root</span>):</span></span><br><span class="line">    dfs(root, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span>(<span class="params">root, path</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span></span><br><span class="line">    path += <span class="built_in">str</span>(root.val)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root.left <span class="keyword">and</span> <span class="keyword">not</span> root.right:</span><br><span class="line">        res.append(path)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    dfs(root.left, path+<span class="string">&quot;-&gt;&quot;</span>)</span><br><span class="line">    dfs(root.right, path+<span class="string">&quot;-&gt;&quot;</span>)</span><br></pre></td></tr></table></figure><p>答题代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.res = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">binaryTreePaths</span>(<span class="params">self, root</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :rtype: List[str]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span> []</span><br><span class="line">        path = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        self.dfs(root, path)</span><br><span class="line">        <span class="keyword">return</span> self.res</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span>(<span class="params">self, root, path</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span></span><br><span class="line">        path += <span class="built_in">str</span>(root.val)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root.left <span class="keyword">and</span> <span class="keyword">not</span> root.right:</span><br><span class="line">            self.res.append(path)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        self.dfs(root.left, path + <span class="string">&#x27;-&gt;&#x27;</span>)</span><br><span class="line">        self.dfs(root.right, path + <span class="string">&#x27;-&gt;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>113.路径总和 II</p><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/20210709215332.PNG" alt=""></p><p>直接套用模板2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">res = []</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pathSum</span>(<span class="params">root, targetSum</span>):</span></span><br><span class="line">    path = []</span><br><span class="line">    dfs(root, path, targetSum)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span>(<span class="params">root, path, Sum</span>)</span></span><br><span class="line"><span class="function">    <span class="title">if</span> <span class="title">not</span> <span class="title">root</span>:</span> <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    Sum -= root.val</span><br><span class="line">    <span class="comment"># path.append(root.val)</span></span><br><span class="line">    <span class="comment"># 注意此处传递的是引用，用append方法path的地址不会变，所以，出栈以后的函数的path值并不会减小，这里使用一个赋值语句来存储新增加的值。</span></span><br><span class="line">    <span class="comment"># ＋相当于extend方法。</span></span><br><span class="line">    path = path + [root.val]</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root.left <span class="keyword">and</span> <span class="keyword">not</span> root.right <span class="keyword">and</span> Sum == <span class="number">0</span>:</span><br><span class="line">        res.append(path)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">   </span><br><span class="line">    dfs(root.left, path, Sum)</span><br><span class="line">    dfs(root.right, path, Sum)</span><br></pre></td></tr></table></figure><p>完成代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.res = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pathSum</span>(<span class="params">self, root, targetSum</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :type targetSum: int</span></span><br><span class="line"><span class="string">        :rtype: List[List[int]]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span> []</span><br><span class="line">        path = []</span><br><span class="line">        self.dfs(root, path, targetSum)</span><br><span class="line">        <span class="keyword">return</span> self.res</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span>(<span class="params">self, root, path, Sum</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span></span><br><span class="line">        Sum -= root.val</span><br><span class="line">        path = path + [root.val]</span><br><span class="line">        <span class="comment"># path.append(root.val)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root.left <span class="keyword">and</span> <span class="keyword">not</span> root.right <span class="keyword">and</span> Sum == <span class="number">0</span>:</span><br><span class="line">            self.res.append(path)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        self.dfs(root.left, path, Sum)</span><br><span class="line">        self.dfs(root.right, path, Sum)</span><br></pre></td></tr></table></figure><p>437.路径总和 III</p><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/20210709215348.PNG" alt=""></p><p>双重递归：先调用dfs函数从root开始查找路径，再调用pathsum函数到root左右子树开始查找<br>套用模板2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pathSum</span>(<span class="params">root, targetSum</span>)</span></span><br><span class="line"><span class="function">    <span class="title">if</span> <span class="title">not</span> <span class="title">root</span>:</span> <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    dfs1(root, targetSum)            <span class="comment"># 以root为起始点查找路径</span></span><br><span class="line">    pathSum(root.left, targetSum)    <span class="comment"># 左子树递归</span></span><br><span class="line">    pathSum(root.right, targetSum)   <span class="comment"># 右子树递归</span></span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span>(<span class="params">root, Sum</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span></span><br><span class="line">    Sum -= root.val</span><br><span class="line">    <span class="keyword">if</span> Sum == <span class="number">0</span>:    <span class="comment"># 注意不要return,因为不要求到叶节点结束,所以一条路径下面还可能有另一条</span></span><br><span class="line">        count += <span class="number">1</span>  <span class="comment"># 如果找到了一个路径全局变量就+1</span></span><br><span class="line">    dfs1(root.left, Sum)</span><br><span class="line">    dfs1(root.right, Sum)</span><br></pre></td></tr></table></figure><p>完成代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.count = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pathSum</span>(<span class="params">self, root, targetSum</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :type targetSum: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        self.dfs1(root, targetSum)</span><br><span class="line">        self.pathSum(root.left, targetSum)</span><br><span class="line">        self.pathSum(root.right, targetSum)</span><br><span class="line">        <span class="keyword">return</span> self.count</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs1</span>(<span class="params">self, root, <span class="built_in">sum</span></span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span></span><br><span class="line">        <span class="built_in">sum</span> -= root.val</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">sum</span> == <span class="number">0</span>:</span><br><span class="line">            self.count += <span class="number">1</span></span><br><span class="line">        self.dfs1(root.left, <span class="built_in">sum</span>)</span><br><span class="line">        self.dfs1(root.right, <span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure><p>988.从叶结点开始的最小字符串</p><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/20210709215401.PNG" alt=""></p><p>换汤不换药，套用模板1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">path = []</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">smallestFromLeaf</span>(<span class="params">root</span>):</span></span><br><span class="line"></span><br><span class="line">    dfs(root, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    path = path.sort() <span class="comment"># 升序排序</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> path[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span>(<span class="params">root, s</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span></span><br><span class="line">    s += <span class="built_in">chr</span>(<span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) + root.val)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root.left <span class="keyword">and</span> <span class="keyword">not</span> root.right:</span><br><span class="line">        </span><br><span class="line">        s = s[::-<span class="number">1</span>]  <span class="comment"># 题目要求从叶子节点到根节点，因此反转</span></span><br><span class="line">        path.append(s)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    dfs(root.left, s)</span><br><span class="line">    dfs(root.right, s)</span><br></pre></td></tr></table></figure><p>整体代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.path = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">smallestFromLeaf</span>(<span class="params">self, root</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        self.dfs(root, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    </span><br><span class="line">        self.path.sort() <span class="comment"># 升序排序</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.path[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span>(<span class="params">self, root, s</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span></span><br><span class="line">        s += <span class="built_in">chr</span>(<span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) + root.val)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root.left <span class="keyword">and</span> <span class="keyword">not</span> root.right:</span><br><span class="line">            </span><br><span class="line">            s = s[::-<span class="number">1</span>]  <span class="comment"># 题目要求从叶子节点到根节点，因此反转</span></span><br><span class="line">            self.path.append(s)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        self.dfs(root.left, s)</span><br><span class="line">        self.dfs(root.right, s)</span><br></pre></td></tr></table></figure><h4 id="二、非自顶向下"><a href="#二、非自顶向下" class="headerlink" title="二、非自顶向下"></a>二、非自顶向下</h4><p>124.二叉树中的最大路径和right分别为根节点左右子树最大路径和,</p><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/20210709215415.PNG" alt=""></p><p>注意：如果最大路径和&lt;0,意味着该路径和对总路径和做负贡献，因此不要计入到总路径中，将它设置为0</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">res = -<span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>) <span class="comment"># 注意节点值可能为负数，因此要设置为最小值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxPathSum</span>(<span class="params">root</span>):</span></span><br><span class="line">    maxPath(root)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxPath</span>(<span class="params">root</span>):</span> <span class="comment"># 以root为路径起始点的最长路径</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    left = <span class="built_in">max</span>(maxPath(root.left), <span class="number">0</span>)</span><br><span class="line">    right = <span class="built_in">max</span>(maxPath(root.right), <span class="number">0</span>)</span><br><span class="line">    res = <span class="built_in">max</span>(res, left + right + root.val)  <span class="comment"># 比较当前最大路径和与左右子树最长路径加上根节点值的较大值，更新全局变量</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(left + root.val, right + root.val) <span class="comment"># 返回左右子树较大的路径和加上根节点值</span></span><br></pre></td></tr></table></figure><p>完整代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.res = -<span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxPathSum</span>(<span class="params">self, root</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        self.maxPath(root)</span><br><span class="line">        <span class="keyword">return</span> self.res</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxPath</span>(<span class="params">self, root</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        left = <span class="built_in">max</span>(self.maxPath(root.left), <span class="number">0</span>)</span><br><span class="line">        right = <span class="built_in">max</span>(self.maxPath(root.right), <span class="number">0</span>)</span><br><span class="line">        self.res = <span class="built_in">max</span>(self.res, left + right + root.val)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(left + root.val, right + root.val)</span><br></pre></td></tr></table></figure><p>687.最长同值路径</p><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/20210709215433.PNG" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">res = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">longestUnivaluePath</span>(<span class="params">root</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    longestPath(root)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">longestPath</span>(<span class="params">root</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    left = longestPath(root.left) </span><br><span class="line">    right = longestPath(root.right)</span><br><span class="line">    <span class="comment"># 如果存在左子节点和根节点同值，更新左最长路径;否则左最长路径为0</span></span><br><span class="line">    <span class="keyword">if</span> root.left <span class="keyword">and</span> root.val == root.left.val:</span><br><span class="line">        left += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> root.right <span class="keyword">and</span> root.val == root.right.val:</span><br><span class="line">        right += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        right = <span class="number">0</span></span><br><span class="line">    res = <span class="built_in">max</span>(res, left + right)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(left, right)</span><br></pre></td></tr></table></figure><p>完整代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.res = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestUnivaluePath</span>(<span class="params">self, root</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        self.longestPath(root)</span><br><span class="line">        <span class="keyword">return</span> self.res</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestPath</span>(<span class="params">self, root</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        left = self.longestPath(root.left)</span><br><span class="line">        right = self.longestPath(root.right)</span><br><span class="line">        <span class="keyword">if</span> root.left <span class="keyword">and</span> root.left.val == root.val:</span><br><span class="line">            left += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            left = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> root.right <span class="keyword">and</span> root.right.val == root.val:</span><br><span class="line">            right += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            right = <span class="number">0</span></span><br><span class="line">        self.res = <span class="built_in">max</span>(self.res, left + right)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(left, right)</span><br></pre></td></tr></table></figure><p>543.二叉树的直径</p><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/20210709215446.PNG" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">res = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">diameterOfBinaryTree</span>(<span class="params">root</span>):</span></span><br><span class="line">    maxPath(root)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxPath</span>(<span class="params">root</span>):</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里递归结束条件要特别注意：不能是not root(而且不需要判断root为空,因为只有非空才会进入递归)，因为单个节点路径长也是0</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root.left <span class="keyword">and</span> <span class="keyword">not</span> root.right: </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 判断左子节点是否为空，从而更新左边最长路径</span></span><br><span class="line">    <span class="keyword">if</span> root.left:</span><br><span class="line">        left = maxPath(root.left) + <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> root.right:</span><br><span class="line">        right = maxPath(root.right) + <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        right = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    res = <span class="built_in">max</span>(res, left + right) <span class="comment"># 更新全局变量</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(left, right)      <span class="comment"># 返回左右路径较大者</span></span><br></pre></td></tr></table></figure><p>完整代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.res = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">diameterOfBinaryTree</span>(<span class="params">self, root</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.maxPath(root)</span><br><span class="line">        <span class="keyword">return</span> self.res</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxPath</span>(<span class="params">self, root</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root.left <span class="keyword">and</span> <span class="keyword">not</span> root.right: </span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 判断左子节点是否为空，从而更新左边最长路径</span></span><br><span class="line">        <span class="keyword">if</span> root.left:</span><br><span class="line">            left = self.maxPath(root.left) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            left = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> root.right:</span><br><span class="line">            right = self.maxPath(root.right) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            right = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        self.res = <span class="built_in">max</span>(self.res, left + right) <span class="comment"># 更新全局变量</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(left, right)                <span class="comment"># 返回左右路径较大者</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;二叉树的路径问题&quot;&gt;&lt;a href=&quot;#二叉树的路径问题&quot; class=&quot;headerlink&quot; title=&quot;二叉树的路径问题&quot;&gt;&lt;/a&gt;二叉树的路径问题&lt;/h2&gt;&lt;p&gt;对于刚刚接触树的问题的新手而言，路径问题是一个比较棘手的问题。题解中关于二叉树路径问题的总结</summary>
      
    
    
    
    <category term="二叉树" scheme="https://xxren8218.github.io/categories/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
    
  </entry>
  
  <entry>
    <title>02-推荐系统实战之根据用户行为数据创建ALS模型并召回商品</title>
    <link href="https://xxren8218.github.io/20210709/02-%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E5%AE%9E%E6%88%98%E4%B9%8B%E6%A0%B9%E6%8D%AE%E7%94%A8%E6%88%B7%E8%A1%8C%E4%B8%BA%E6%95%B0%E6%8D%AE%E5%88%9B%E5%BB%BAALS%E6%A8%A1%E5%9E%8B%E5%B9%B6%E5%8F%AC%E5%9B%9E%E5%95%86%E5%93%81.html"/>
    <id>https://xxren8218.github.io/20210709/02-%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E5%AE%9E%E6%88%98%E4%B9%8B%E6%A0%B9%E6%8D%AE%E7%94%A8%E6%88%B7%E8%A1%8C%E4%B8%BA%E6%95%B0%E6%8D%AE%E5%88%9B%E5%BB%BAALS%E6%A8%A1%E5%9E%8B%E5%B9%B6%E5%8F%AC%E5%9B%9E%E5%95%86%E5%93%81.html</id>
    <published>2021-07-08T17:00:30.000Z</published>
    <updated>2021-07-08T17:03:25.325Z</updated>
    
    <content type="html"><![CDATA[<h2 id="根据用户行为数据创建ALS模型并召回商品"><a href="#根据用户行为数据创建ALS模型并召回商品" class="headerlink" title="根据用户行为数据创建ALS模型并召回商品"></a>根据用户行为数据创建ALS模型并召回商品</h2><ul><li>打开HDFS，Hadoop下的sbin目录下的./start-dfs.sh</li><li>打开Spark, <ul><li>Spark下的sbin目录下的./start-master.sh -h 192.168.19.2</li><li>Spark下的sbin目录下的./start-slave.sh spark://192.168.19.2:7077</li><li>可以使用192.168.19.2:8080进行可视化查看</li></ul></li><li>进入虚拟环境 workon 虚拟环境名字（有所需的工具包：如jupyter notebook）<ul><li>jupyter notebook —ip 0.0.0.0</li></ul></li></ul><h3 id="0-用户行为数据拆分"><a href="#0-用户行为数据拆分" class="headerlink" title="0. 用户行为数据拆分"></a>0. 用户行为数据拆分</h3><ul><li><p>海量数据处理应该怎么办？2T数据的处理，不至于在Excel中处理吧。</p><ul><li>这里说一个面试题：给你2T的邮箱数据，如何去重排序？</li><li>外排序：分成多块，去重排序，然后再合并。</li></ul></li><li><p>方便练习可以对数据做拆分处理</p><ul><li>pandas的数据分批读取  chunk 厚厚的一块 相当大的数量或部分</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">reader = pd.read_csv(<span class="string">&#x27;behavior_log.csv&#x27;</span>,chunksize=<span class="number">100</span>,iterator=<span class="literal">True</span>) </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">chunksize  一次数据读多少条。</span></span><br><span class="line"><span class="string">iterator   是否返回可迭代对象。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> chunk <span class="keyword">in</span> reader:</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> count == <span class="number">1</span>:</span><br><span class="line">        chunk.to_csv(<span class="string">&#x27;test4.csv&#x27;</span>,index = <span class="literal">False</span>)</span><br><span class="line">        <span class="comment"># index = False 去掉自动添加行索引。保留列索引</span></span><br><span class="line">    <span class="keyword">elif</span> count &gt; <span class="number">1</span> <span class="keyword">and</span> count &lt; <span class="number">1000</span>:</span><br><span class="line">        chunk.to_csv(<span class="string">&#x27;test4.csv&#x27;</span>,index = <span class="literal">False</span>, mode = <span class="string">&#x27;a&#x27;</span>, header = <span class="literal">False</span>)</span><br><span class="line">        <span class="comment"># mode = ‘a’ 表示追加模式，去掉自动添加行索引，去掉列索引。</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">pd.read_csv(<span class="string">&#x27;test4.csv&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="1-预处理behavior-log数据集"><a href="#1-预处理behavior-log数据集" class="headerlink" title="1. 预处理behavior_log数据集"></a>1. 预处理behavior_log数据集</h3><p>创建Spark的连接，通过SparkSQL将数据加载进来，进行简单分析。</p><ul><li>创建spark session</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># 配置spark driver和pyspark运行时，所使用的python解释器路径</span></span><br><span class="line">PYSPARK_PYTHON = <span class="string">&quot;/home/hadoop/miniconda3/envs/datapy365spark23/bin/python&quot;</span></span><br><span class="line">JAVA_HOME=<span class="string">&#x27;/home/hadoop/app/jdk1.8.0_191&#x27;</span></span><br><span class="line"><span class="comment"># 当存在多个版本时，不指定很可能会导致出错</span></span><br><span class="line">os.environ[<span class="string">&quot;PYSPARK_PYTHON&quot;</span>] = PYSPARK_PYTHON</span><br><span class="line">os.environ[<span class="string">&quot;PYSPARK_DRIVER_PYTHON&quot;</span>] = PYSPARK_PYTHON</span><br><span class="line">os.environ[<span class="string">&#x27;JAVA_HOME&#x27;</span>]=JAVA_HOME</span><br><span class="line"><span class="comment"># spark配置信息</span></span><br><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkConf</span><br><span class="line"><span class="keyword">from</span> pyspark.sql <span class="keyword">import</span> SparkSession</span><br><span class="line"></span><br><span class="line">SPARK_APP_NAME = <span class="string">&quot;preprocessingBehaviorLog&quot;</span></span><br><span class="line">SPARK_URL = <span class="string">&quot;spark://192.168.19.2:7077&quot;</span></span><br><span class="line"></span><br><span class="line">conf = SparkConf()    <span class="comment"># 创建spark config对象</span></span><br><span class="line">config = (</span><br><span class="line">(<span class="string">&quot;spark.app.name&quot;</span>, SPARK_APP_NAME),    <span class="comment"># 设置启动的spark的app名称，没有提供，将随机产生一个名称</span></span><br><span class="line">(<span class="string">&quot;spark.executor.memory&quot;</span>, <span class="string">&quot;6g&quot;</span>),    <span class="comment"># 设置该app启动时占用的内存用量，默认1g</span></span><br><span class="line">(<span class="string">&quot;spark.master&quot;</span>, SPARK_URL),    <span class="comment"># spark master的地址</span></span><br><span class="line">    (<span class="string">&quot;spark.executor.cores&quot;</span>, <span class="string">&quot;4&quot;</span>),    <span class="comment"># 设置spark executor使用的CPU核心数</span></span><br><span class="line">    <span class="comment"># 以下三项配置，可以控制执行器数量</span></span><br><span class="line"><span class="comment">#     (&quot;spark.dynamicAllocation.enabled&quot;, True),</span></span><br><span class="line"><span class="comment">#     (&quot;spark.dynamicAllocation.initialExecutors&quot;, 1),    # 1个执行器</span></span><br><span class="line"><span class="comment">#     (&quot;spark.shuffle.service.enabled&quot;, True)</span></span><br><span class="line"><span class="comment"># (&#x27;spark.sql.pivotMaxValues&#x27;, &#x27;99999&#x27;),  # 当需要pivot DF，且值很多时，需要修改，默认是10000</span></span><br><span class="line">)</span><br><span class="line"><span class="comment"># 查看更详细配置及说明：https://spark.apache.org/docs/latest/configuration.html</span></span><br><span class="line"></span><br><span class="line">conf.setAll(config)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用config对象，创建spark session</span></span><br><span class="line">spark = SparkSession.builder.config(conf=conf).getOrCreate()</span><br></pre></td></tr></table></figure><ul><li>从hdfs中加载csv文件为DataFrame</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从hdfs加载CSV文件为DataFrame</span></span><br><span class="line">df = spark.read.csv(<span class="string">&quot;hdfs://localhost:9000/datasets/behavior_log.csv&quot;</span>, header=<span class="literal">True</span>)</span><br><span class="line">df.show()    <span class="comment"># 查看dataframe，默认显示前20条</span></span><br><span class="line"><span class="comment"># 大致查看一下数据类型</span></span><br><span class="line">df.printSchema()    <span class="comment"># 打印当前dataframe的结构</span></span><br></pre></td></tr></table></figure><p>显示结果:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">+------+----------+----+-----+------+</span><br><span class="line">|  user|time_stamp|btag| cate| brand|</span><br><span class="line">+------+----------+----+-----+------+</span><br><span class="line">|558157|1493741625|  pv| 6250| 91286|</span><br><span class="line">|558157|1493741626|  pv| 6250| 91286|</span><br><span class="line">|558157|1493741627|  pv| 6250| 91286|</span><br><span class="line">|728690|1493776998|  pv|11800| 62353|</span><br><span class="line">|332634|1493809895|  pv| 1101|365477|</span><br><span class="line">|857237|1493816945|  pv| 1043|110616|</span><br><span class="line">|619381|1493774638|  pv|  385|428950|</span><br><span class="line">|467042|1493772641|  pv| 8237|301299|</span><br><span class="line">|467042|1493772644|  pv| 8237|301299|</span><br><span class="line">|991528|1493780710|  pv| 7270|274795|</span><br><span class="line">|991528|1493780712|  pv| 7270|274795|</span><br><span class="line">|991528|1493780712|  pv| 7270|274795|</span><br><span class="line">|991528|1493780712|  pv| 7270|274795|</span><br><span class="line">|991528|1493780714|  pv| 7270|274795|</span><br><span class="line">|991528|1493780765|  pv| 7270|274795|</span><br><span class="line">|991528|1493780714|  pv| 7270|274795|</span><br><span class="line">|991528|1493780765|  pv| 7270|274795|</span><br><span class="line">|991528|1493780764|  pv| 7270|274795|</span><br><span class="line">|991528|1493780633|  pv| 7270|274795|</span><br><span class="line">|991528|1493780764|  pv| 7270|274795|</span><br><span class="line">+------+----------+----+-----+------+</span><br><span class="line">only showing top 20 rows</span><br><span class="line"></span><br><span class="line">root</span><br><span class="line"> |-- user: string (nullable = true)</span><br><span class="line"> |-- time_stamp: string (nullable = true)</span><br><span class="line"> |-- btag: string (nullable = true)</span><br><span class="line"> |-- cate: string (nullable = true)</span><br><span class="line"> |-- brand: string (nullable = true)</span><br></pre></td></tr></table></figure><ul><li>从hdfs加载数据为dataframe，并设置结构—schema </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark.sql.types <span class="keyword">import</span> StructType, StructField, StringType, IntegerType, LongType</span><br><span class="line"><span class="comment"># 构建结构对象</span></span><br><span class="line">schema = StructType([</span><br><span class="line">    StructField(<span class="string">&quot;userId&quot;</span>, IntegerType()),</span><br><span class="line">    StructField(<span class="string">&quot;timestamp&quot;</span>, LongType()),</span><br><span class="line">    StructField(<span class="string">&quot;btag&quot;</span>, StringType()),</span><br><span class="line">    StructField(<span class="string">&quot;cateId&quot;</span>, IntegerType()),</span><br><span class="line">    StructField(<span class="string">&quot;brandId&quot;</span>, IntegerType())</span><br><span class="line">])</span><br><span class="line"><span class="comment"># 从hdfs加载数据为dataframe，并设置结构</span></span><br><span class="line">behavior_log_df = spark.read.csv(<span class="string">&quot;hdfs://localhost:8020/datasets/behavior_log.csv&quot;</span>, header=<span class="literal">True</span>, schema=schema)</span><br><span class="line">behavior_log_df.show()</span><br><span class="line">behavior_log_df.count() </span><br></pre></td></tr></table></figure><p>显示结果:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">+------+----------+----+------+-------+</span><br><span class="line">|userId| timestamp|btag|cateId|brandId|</span><br><span class="line">+------+----------+----+------+-------+</span><br><span class="line">|558157|1493741625|  pv|  6250|  91286|</span><br><span class="line">|558157|1493741626|  pv|  6250|  91286|</span><br><span class="line">|558157|1493741627|  pv|  6250|  91286|</span><br><span class="line">|728690|1493776998|  pv| 11800|  62353|</span><br><span class="line">|332634|1493809895|  pv|  1101| 365477|</span><br><span class="line">|857237|1493816945|  pv|  1043| 110616|</span><br><span class="line">|619381|1493774638|  pv|   385| 428950|</span><br><span class="line">|467042|1493772641|  pv|  8237| 301299|</span><br><span class="line">|467042|1493772644|  pv|  8237| 301299|</span><br><span class="line">|991528|1493780710|  pv|  7270| 274795|</span><br><span class="line">|991528|1493780712|  pv|  7270| 274795|</span><br><span class="line">|991528|1493780712|  pv|  7270| 274795|</span><br><span class="line">|991528|1493780712|  pv|  7270| 274795|</span><br><span class="line">|991528|1493780714|  pv|  7270| 274795|</span><br><span class="line">|991528|1493780765|  pv|  7270| 274795|</span><br><span class="line">|991528|1493780714|  pv|  7270| 274795|</span><br><span class="line">|991528|1493780765|  pv|  7270| 274795|</span><br><span class="line">|991528|1493780764|  pv|  7270| 274795|</span><br><span class="line">|991528|1493780633|  pv|  7270| 274795|</span><br><span class="line">|991528|1493780764|  pv|  7270| 274795|</span><br><span class="line">+------+----------+----+------+-------+</span><br><span class="line">only showing top 20 rows</span><br><span class="line"></span><br><span class="line">root</span><br><span class="line"> |-- userId: integer (nullable = true)</span><br><span class="line"> |-- timestamp: long (nullable = true)</span><br><span class="line"> |-- btag: string (nullable = true)</span><br><span class="line"> |-- cateId: integer (nullable = true)</span><br><span class="line"> |-- brandId: integer (nullable = true)</span><br></pre></td></tr></table></figure><ul><li>分析数据集字段的类型和格式<ul><li>查看是否有空值</li><li>查看每列数据的类型</li><li>查看每列数据的类别情况</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">&quot;查看userId的数据情况：&quot;</span>, behavior_log_df.groupBy(<span class="string">&quot;userId&quot;</span>).count().count()) <span class="comment"># 第一个count是将相同的用户放在同一组内。，再count数数。</span></span><br><span class="line"><span class="comment"># 约113w用户</span></span><br><span class="line"><span class="comment">#注意：behavior_log_df.groupBy(&quot;userId&quot;).count()  返回的是一个dataframe，这里的count计算的是每一个分组的个数，但当前还没有进行计算</span></span><br><span class="line"><span class="comment"># 当调用df.count()时才开始进行计算，这里的count计算的是dataframe的条目数，也就是共有多少个分组</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">查看user的数据情况： 1136340</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">&quot;查看btag的数据情况：&quot;</span>, behavior_log_df.groupBy(<span class="string">&quot;btag&quot;</span>).count().collect())    <span class="comment"># collect会把计算结果全部加载到内存，谨慎使用</span></span><br><span class="line"><span class="comment"># 只有四种类型数据：pv、fav、cart、buy</span></span><br><span class="line"><span class="comment"># 这里由于类型只有四个，所以直接使用collect，把数据全部加载出来</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">查看btag的数据情况： [Row(btag=&#x27;buy&#x27;, count=9115919), Row(btag=&#x27;fav&#x27;, count=9301837), Row(btag=&#x27;cart&#x27;, count=15946033), Row(btag=&#x27;pv&#x27;, count=688904345)]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">&quot;查看cateId的数据情况：&quot;</span>, behavior_log_df.groupBy(<span class="string">&quot;cateId&quot;</span>).count().count())</span><br><span class="line"><span class="comment"># 约12968类别id</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">查看cateId的数据情况： 12968</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">&quot;查看brandId的数据情况：&quot;</span>, behavior_log_df.groupBy(<span class="string">&quot;brandId&quot;</span>).count().count())</span><br><span class="line"><span class="comment"># 约460561品牌id</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">查看brandId的数据情况： 460561</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">&quot;判断数据是否有空值：&quot;</span>, behavior_log_df.count(), behavior_log_df.dropna().count())</span><br><span class="line"><span class="comment"># 约7亿条目723268134 723268134</span></span><br><span class="line"><span class="comment"># 本数据集无空值条目，可放心处理</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">判断数据是否有空值： 723268134 723268134</span><br></pre></td></tr></table></figure><ul><li>pivot透视操作，把某列里的字段值转换成行并进行聚合运算(pyspark.sql.GroupedData.pivot)<ul><li>如果透视的字段中的不同属性值超过10000个，则需要设置spark.sql.pivotMaxValues，否则计算过程中会出现错误。<a href="https://spark.apache.org/docs/latest/api/python/pyspark.sql.html?highlight=pivot#pyspark.sql.GroupedData.pivot">文档介绍</a>。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 统计每个用户对各类商品的pv、fav、cart、buy数量</span></span><br><span class="line">cate_count_df = behavior_log_df.groupBy(behavior_log_df.userId, behavior_log_df.cateId).pivot(<span class="string">&quot;btag&quot;</span>,[<span class="string">&quot;pv&quot;</span>,<span class="string">&quot;fav&quot;</span>,<span class="string">&quot;cart&quot;</span>,<span class="string">&quot;buy&quot;</span>]).count() <span class="comment"># 默认按照字典排序的，想要按重要程度排序，在里面穿值。此处已经传了。[&quot;pv&quot;,&quot;fav&quot;,&quot;cart&quot;,&quot;buy&quot;]</span></span><br><span class="line">cate_count_df.printSchema()    <span class="comment"># 此时还没有开始计算</span></span><br></pre></td></tr></table></figure><p>显示效果:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root</span><br><span class="line"> |-- userId: integer (nullable = true)</span><br><span class="line"> |-- cateId: integer (nullable = true)</span><br><span class="line"> |-- pv: long (nullable = true)</span><br><span class="line"> |-- fav: long (nullable = true)</span><br><span class="line"> |-- cart: long (nullable = true)</span><br><span class="line"> |-- buy: long (nullable = true)</span><br></pre></td></tr></table></figure><ul><li>统计每个用户对各个品牌的pv、fav、cart、buy数量并保存结果</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 统计每个用户对各个品牌的pv、fav、cart、buy数量</span></span><br><span class="line">brand_count_df = behavior_log_df.groupBy(behavior_log_df.userId, behavior_log_df.brandId).pivot(<span class="string">&quot;btag&quot;</span>,[<span class="string">&quot;pv&quot;</span>,<span class="string">&quot;fav&quot;</span>,<span class="string">&quot;cart&quot;</span>,<span class="string">&quot;buy&quot;</span>]).count()</span><br><span class="line"><span class="comment"># brand_count_df.show()    # 同上</span></span><br><span class="line"><span class="comment"># 113w * 46w</span></span><br><span class="line"><span class="comment"># 由于运算时间比较长，所以这里先将结果存储起来，供后续其他操作使用</span></span><br><span class="line"><span class="comment"># 写入数据时才开始计算</span></span><br><span class="line">cate_count_df.write.csv(<span class="string">&quot;hdfs://localhost:9000/preprocessing_dataset/cate_count.csv&quot;</span>, header=<span class="literal">True</span>)</span><br><span class="line">brand_count_df.write.csv(<span class="string">&quot;hdfs://localhost:9000/preprocessing_dataset/brand_count.csv&quot;</span>, header=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="2-根据用户对类目偏好打分训练ALS模型"><a href="#2-根据用户对类目偏好打分训练ALS模型" class="headerlink" title="2. 根据用户对类目偏好打分训练ALS模型"></a>2. 根据用户对类目偏好打分训练ALS模型</h3><ul><li>根据您统计的次数 + 打分规则 ==&gt; 偏好打分数据集 ==&gt; ALS模型</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># spark ml的模型训练是基于内存的，如果数据过大，内存空间小，迭代次数过多的化，可能会造成内存溢出，报错</span></span><br><span class="line"><span class="comment"># 设置Checkpoint的话，会把所有数据落盘，这样如果异常退出，下次重启后，可以接着上次的训练节点继续运行</span></span><br><span class="line"><span class="comment"># 但该方法其实指标不治本，因为无法防止内存溢出，所以还是会报错</span></span><br><span class="line"><span class="comment"># 如果数据量大，应考虑的是增加内存、或限制迭代次数和训练数据量级等</span></span><br><span class="line">spark.sparkContext.setCheckpointDir(<span class="string">&quot;/checkPoint/&quot;</span>)</span><br><span class="line"><span class="keyword">from</span> pyspark.sql.types <span class="keyword">import</span> StructType, StructField, StringType, IntegerType, LongType, FloatType</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建结构对象</span></span><br><span class="line">schema = StructType([</span><br><span class="line">    StructField(<span class="string">&quot;userId&quot;</span>, IntegerType()),</span><br><span class="line">    StructField(<span class="string">&quot;cateId&quot;</span>, IntegerType()),</span><br><span class="line">    StructField(<span class="string">&quot;pv&quot;</span>, IntegerType()),</span><br><span class="line">    StructField(<span class="string">&quot;fav&quot;</span>, IntegerType()),</span><br><span class="line">    StructField(<span class="string">&quot;cart&quot;</span>, IntegerType()),</span><br><span class="line">    StructField(<span class="string">&quot;buy&quot;</span>, IntegerType())</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从hdfs加载CSV文件</span></span><br><span class="line">cate_count_df = spark.read.csv(<span class="string">&quot;hdfs://localhost:9000/preprocessing_dataset/cate_count.csv&quot;</span>, header=<span class="literal">True</span>, schema=schema)</span><br><span class="line">cate_count_df.printSchema()</span><br><span class="line">cate_count_df.first()    <span class="comment"># 第一行数据</span></span><br></pre></td></tr></table></figure><p>显示结果:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root</span><br><span class="line"> |-- userId: integer (nullable = true)</span><br><span class="line"> |-- cateId: integer (nullable = true)</span><br><span class="line"> |-- pv: integer (nullable = true)</span><br><span class="line"> |-- fav: integer (nullable = true)</span><br><span class="line"> |-- cart: integer (nullable = true)</span><br><span class="line"> |-- buy: integer (nullable = true)</span><br><span class="line"></span><br><span class="line">Row(userId=1061650, cateId=4520, pv=2326, fav=None, cart=53, buy=None)</span><br></pre></td></tr></table></figure><ul><li>处理每一行数据：r表示row对象</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_row</span>(<span class="params">r</span>):</span></span><br><span class="line">    <span class="comment"># 处理每一行数据：r表示row对象</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 偏好评分规则：</span></span><br><span class="line"><span class="comment">#     m: 用户对应的行为次数</span></span><br><span class="line">    <span class="comment">#     该偏好权重比例，次数上限仅供参考，具体数值应根据产品业务场景权衡</span></span><br><span class="line"><span class="comment">#     pv: if m&lt;=20: score=0.2*m; else score=4</span></span><br><span class="line"><span class="comment">#     fav: if m&lt;=20: score=0.4*m; else score=8</span></span><br><span class="line"><span class="comment">#     cart: if m&lt;=20: score=0.6*m; else score=12</span></span><br><span class="line"><span class="comment">#     buy: if m&lt;=20: score=1*m; else score=20</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 注意这里要全部设为浮点数，spark运算时对类型比较敏感，要保持数据类型都一致</span></span><br><span class="line">pv_count = r.pv <span class="keyword">if</span> r.pv <span class="keyword">else</span> <span class="number">0.0</span></span><br><span class="line">fav_count = r.fav <span class="keyword">if</span> r.fav <span class="keyword">else</span> <span class="number">0.0</span></span><br><span class="line">cart_count = r.cart <span class="keyword">if</span> r.cart <span class="keyword">else</span> <span class="number">0.0</span></span><br><span class="line">buy_count = r.buy <span class="keyword">if</span> r.buy <span class="keyword">else</span> <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line">pv_score = <span class="number">0.2</span>*pv_count <span class="keyword">if</span> pv_count&lt;=<span class="number">20</span> <span class="keyword">else</span> <span class="number">4.0</span></span><br><span class="line">fav_score = <span class="number">0.4</span>*fav_count <span class="keyword">if</span> fav_count&lt;=<span class="number">20</span> <span class="keyword">else</span> <span class="number">8.0</span></span><br><span class="line">cart_score = <span class="number">0.6</span>*cart_count <span class="keyword">if</span> cart_count&lt;=<span class="number">20</span> <span class="keyword">else</span> <span class="number">12.0</span></span><br><span class="line">buy_score = <span class="number">1.0</span>*buy_count <span class="keyword">if</span> buy_count&lt;=<span class="number">20</span> <span class="keyword">else</span> <span class="number">20.0</span></span><br><span class="line"></span><br><span class="line">rating = pv_score + fav_score + cart_score + buy_score</span><br><span class="line"><span class="comment"># 返回用户ID、分类ID、用户对分类的偏好打分</span></span><br><span class="line"><span class="keyword">return</span> r.userId, r.cateId, rating</span><br></pre></td></tr></table></figure><ul><li>返回一个PythonRDD类型</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 返回一个PythonRDD类型，此时还没开始计算</span></span><br><span class="line"><span class="comment"># 先转化为RDD再进行map，一条数据一条数据算。虽然DF也可以用UDF，但是麻烦！处理好好再转为DF</span></span><br><span class="line"><span class="comment"># 并不是所有的RDD都能转为DF，必须有结构的才行。Schema才可以。此处可以是因为，他就是DF转过去的。</span></span><br><span class="line">cate_count_df.rdd.<span class="built_in">map</span>(process_row).toDF([<span class="string">&quot;userId&quot;</span>, <span class="string">&quot;cateId&quot;</span>, <span class="string">&quot;rating&quot;</span>])</span><br></pre></td></tr></table></figure><p>显示结果:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DataFrame[userId: bigint, cateId: bigint, rating: double]</span><br></pre></td></tr></table></figure><ul><li>用户对商品类别的打分数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用户对商品类别的打分数据</span></span><br><span class="line"><span class="comment"># map返回的结果是rdd类型，需要调用toDF方法转换为Dataframe</span></span><br><span class="line">cate_rating_df = cate_count_df.rdd.<span class="built_in">map</span>(process_row).toDF([<span class="string">&quot;userId&quot;</span>, <span class="string">&quot;cateId&quot;</span>, <span class="string">&quot;rating&quot;</span>])</span><br><span class="line"><span class="comment"># 注意：toDF不是每个rdd都有的方法，仅局限于此处的rdd</span></span><br><span class="line"><span class="comment"># 可通过该方法获得 user-cate-matrix</span></span><br><span class="line"><span class="comment"># 但由于cateId字段过多，这里运算量比很大，机器内存要求很高才能执行，否则无法完成任务</span></span><br><span class="line"><span class="comment"># 请谨慎使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 但好在我们训练ALS模型时，不需要转换为user-cate-matrix，所以这里可以不用运行</span></span><br><span class="line"><span class="comment"># cate_rating_df.groupBy(&quot;userId&quot;).povit(&quot;cateId&quot;).min(&quot;rating&quot;)</span></span><br><span class="line"><span class="comment"># 用户对类别的偏好打分数据</span></span><br><span class="line">cate_rating_df</span><br></pre></td></tr></table></figure><p>显示结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DataFrame[userId: bigint, cateId: bigint, rating: double]</span><br></pre></td></tr></table></figure><ul><li>通常如果USER-ITEM打分数据应该是通过一下方式进行处理转换为USER-ITEM-MATRIX</li></ul><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/20210709010230.png" alt=""></p><p><strong>但这里我们将使用的Spark的ALS模型进行CF推荐，因此注意这里数据输入不需要提前转换为矩阵，直接是 USER-ITEM-RATE的数据</strong></p><ul><li><p>基于Spark的ALS隐因子模型进行CF评分预测</p><ul><li><p>ALS的意思是交替最小二乘法（Alternating Least Squares），是Spark2.*中加入的进行基于模型的协同过滤（model-based CF）的推荐系统算法。</p><p>同SVD，它也是一种矩阵分解技术，对数据进行降维处理。</p></li><li><p>详细使用方法：<a href="https://spark.apache.org/docs/2.2.2/api/python/pyspark.ml.html?highlight=vectors#module-pyspark.ml.recommendation">pyspark.ml.recommendation.ALS</a></p></li><li><p><strong>注意：由于数据量巨大，因此这里也不考虑基于内存的CF算法</strong></p><p>参考：<a href="https://www.cnblogs.com/mooba/p/6539142.html">为什么Spark中只有ALS</a></p></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用pyspark中的ALS矩阵分解方法实现CF评分预测</span></span><br><span class="line"><span class="comment"># 文档地址：https://spark.apache.org/docs/2.2.2/api/python/pyspark.ml.html?highlight=vectors#module-pyspark.ml.recommendation</span></span><br><span class="line"><span class="keyword">from</span> pyspark.ml.recommendation <span class="keyword">import</span> ALS   <span class="comment"># ml：dataframe， mllib：rdd</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用打分数据，训练ALS模型</span></span><br><span class="line">als = ALS(userCol=<span class="string">&#x27;userId&#x27;</span>, itemCol=<span class="string">&#x27;cateId&#x27;</span>, ratingCol=<span class="string">&#x27;rating&#x27;</span>, checkpointInterval=<span class="number">5</span>)   <span class="comment"># 训练五步缓存一次。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 此处训练时间较长</span></span><br><span class="line">model = als.fit(cate_rating_df)</span><br></pre></td></tr></table></figure><ul><li>模型训练好后，调用方法进行使用，<a href="https://spark.apache.org/docs/2.2.2/api/python/pyspark.ml.html?highlight=alsmodel#pyspark.ml.recommendation.ALSModel">具体API查看</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># model.recommendForAllUsers(N) 给所有用户推荐TOP-N个物品</span></span><br><span class="line">ret = model.recommendForAllUsers(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 由于是给所有用户进行推荐，此处运算时间也较长</span></span><br><span class="line">ret.show()</span><br><span class="line"><span class="comment"># 推荐结果存放在recommendations列中，</span></span><br><span class="line">ret.select(<span class="string">&quot;recommendations&quot;</span>).show()</span><br></pre></td></tr></table></figure><p>显示结果:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">+------+--------------------+</span><br><span class="line">|userId|     recommendations|</span><br><span class="line">+------+--------------------+</span><br><span class="line">|   148|[[3347, 12.547271...|</span><br><span class="line">|   463|[[1610, 9.250818]...|</span><br><span class="line">|   471|[[1610, 10.246621...|</span><br><span class="line">|   496|[[1610, 5.162216]...|</span><br><span class="line">|   833|[[5607, 9.065482]...|</span><br><span class="line">|  1088|[[104, 6.886987],...|</span><br><span class="line">|  1238|[[5631, 14.51981]...|</span><br><span class="line">|  1342|[[5720, 10.89842]...|</span><br><span class="line">|  1580|[[5731, 8.466453]...|</span><br><span class="line">|  1591|[[1610, 12.835257...|</span><br><span class="line">|  1645|[[1610, 11.968531...|</span><br><span class="line">|  1829|[[1610, 17.576496...|</span><br><span class="line">|  1959|[[1610, 8.353473]...|</span><br><span class="line">|  2122|[[1610, 12.652732...|</span><br><span class="line">|  2142|[[1610, 12.48068]...|</span><br><span class="line">|  2366|[[1610, 11.904813...|</span><br><span class="line">|  2659|[[5607, 11.699315...|</span><br><span class="line">|  2866|[[1610, 7.752719]...|</span><br><span class="line">|  3175|[[3347, 2.3429515...|</span><br><span class="line">|  3749|[[1610, 3.641833]...|</span><br><span class="line">+------+--------------------+</span><br><span class="line">only showing top 20 rows</span><br><span class="line"></span><br><span class="line">+--------------------+</span><br><span class="line">|     recommendations|</span><br><span class="line">+--------------------+</span><br><span class="line">|[[3347, 12.547271...|</span><br><span class="line">|[[1610, 9.250818]...|</span><br><span class="line">|[[1610, 10.246621...|</span><br><span class="line">|[[1610, 5.162216]...|</span><br><span class="line">|[[5607, 9.065482]...|</span><br><span class="line">|[[104, 6.886987],...|</span><br><span class="line">|[[5631, 14.51981]...|</span><br><span class="line">|[[5720, 10.89842]...|</span><br><span class="line">|[[5731, 8.466453]...|</span><br><span class="line">|[[1610, 12.835257...|</span><br><span class="line">|[[1610, 11.968531...|</span><br><span class="line">|[[1610, 17.576496...|</span><br><span class="line">|[[1610, 8.353473]...|</span><br><span class="line">|[[1610, 12.652732...|</span><br><span class="line">|[[1610, 12.48068]...|</span><br><span class="line">|[[1610, 11.904813...|</span><br><span class="line">|[[5607, 11.699315...|</span><br><span class="line">|[[1610, 7.752719]...|</span><br><span class="line">|[[3347, 2.3429515...|</span><br><span class="line">|[[1610, 3.641833]...|</span><br><span class="line">+--------------------+</span><br><span class="line">only showing top 20 rows</span><br></pre></td></tr></table></figure><ul><li>model.recommendForUserSubset 给部分用户推荐TOP-N个物品</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意：recommendForUserSubset API，2.2.2版本中无法使用</span></span><br><span class="line">dataset = spark.createDataFrame([[<span class="number">1</span>],[<span class="number">2</span>],[<span class="number">3</span>]])</span><br><span class="line"><span class="comment"># 若不指定行索引，会有个默认的&#x27;_1&#x27;,将其改为&#x27;userId&#x27;</span></span><br><span class="line">dataset = dataset.withColumnRenamed(<span class="string">&quot;_1&quot;</span>, <span class="string">&quot;userId&quot;</span>) </span><br><span class="line"><span class="comment"># 指定用户 推荐物品 参数1 要给哪些用户推荐（用户id的dataframe） 参数2 给这些用户推荐几个物品</span></span><br><span class="line">ret = model.recommendForUserSubset(dataset, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只给部分用推荐，运算时间短</span></span><br><span class="line">ret.show()</span><br><span class="line">ret.collect()    <span class="comment"># 注意： collect会将所有数据加载到内存，慎用</span></span><br></pre></td></tr></table></figure><p>显示结果:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+------+--------------------+</span><br><span class="line">|userId|     recommendations|</span><br><span class="line">+------+--------------------+</span><br><span class="line">|     1|[[1610, 25.4989],...|</span><br><span class="line">|     3|[[5607, 13.665942...|</span><br><span class="line">|     2|[[5579, 5.9051886...|</span><br><span class="line">+------+--------------------+</span><br><span class="line"></span><br><span class="line">[Row(userId=1, recommendations=[Row(cateId=1610, rating=25.498899459838867), Row(cateId=5737, rating=24.901548385620117), Row(cateId=3347, rating=20.736785888671875)]),</span><br><span class="line"> Row(userId=3, recommendations=[Row(cateId=5607, rating=13.665942192077637), Row(cateId=1610, rating=11.770171165466309), Row(cateId=3347, rating=10.35690689086914)]),</span><br><span class="line"> Row(userId=2, recommendations=[Row(cateId=5579, rating=5.90518856048584), Row(cateId=2447, rating=5.624575138092041), Row(cateId=5690, rating=5.2555742263793945)])]</span><br></pre></td></tr></table></figure><ul><li>transform中提供userId和cateId可以对打分进行预测，利用打分结果排序后</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># transform中提供userId和cateId可以对打分进行预测，利用打分结果排序后，同样可以实现TOP-N的推荐</span></span><br><span class="line">model.transform</span><br><span class="line"><span class="comment"># 将模型进行存储</span></span><br><span class="line">model.save(<span class="string">&quot;hdfs://localhost:8020/models/userCateRatingALSModel.obj&quot;</span>)</span><br><span class="line"><span class="comment"># 测试存储的模型</span></span><br><span class="line"><span class="keyword">from</span> pyspark.ml.recommendation <span class="keyword">import</span> ALSModel</span><br><span class="line"><span class="comment"># 从hdfs加载之前存储的模型</span></span><br><span class="line">als_model = ALSModel.load(<span class="string">&quot;hdfs://localhost:8020/models/userCateRatingALSModel.obj&quot;</span>)</span><br><span class="line"><span class="comment"># model.recommendForAllUsers(N) 给用户推荐TOP-N个物品</span></span><br><span class="line">result = als_model.recommendForAllUsers(<span class="number">3</span>)</span><br><span class="line">result.show()</span><br></pre></td></tr></table></figure><p>显示结果:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">+------+--------------------+</span><br><span class="line">|userId|     recommendations|</span><br><span class="line">+------+--------------------+</span><br><span class="line">|   148|[[3347, 12.547271...|</span><br><span class="line">|   463|[[1610, 9.250818]...|</span><br><span class="line">|   471|[[1610, 10.246621...|</span><br><span class="line">|   496|[[1610, 5.162216]...|</span><br><span class="line">|   833|[[5607, 9.065482]...|</span><br><span class="line">|  1088|[[104, 6.886987],...|</span><br><span class="line">|  1238|[[5631, 14.51981]...|</span><br><span class="line">|  1342|[[5720, 10.89842]...|</span><br><span class="line">|  1580|[[5731, 8.466453]...|</span><br><span class="line">|  1591|[[1610, 12.835257...|</span><br><span class="line">|  1645|[[1610, 11.968531...|</span><br><span class="line">|  1829|[[1610, 17.576496...|</span><br><span class="line">|  1959|[[1610, 8.353473]...|</span><br><span class="line">|  2122|[[1610, 12.652732...|</span><br><span class="line">|  2142|[[1610, 12.48068]...|</span><br><span class="line">|  2366|[[1610, 11.904813...|</span><br><span class="line">|  2659|[[5607, 11.699315...|</span><br><span class="line">|  2866|[[1610, 7.752719]...|</span><br><span class="line">|  3175|[[3347, 2.3429515...|</span><br><span class="line">|  3749|[[1610, 3.641833]...|</span><br><span class="line">+------+--------------------+</span><br><span class="line">only showing top 20 rows</span><br></pre></td></tr></table></figure><ul><li>召回到redis</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line">host = <span class="string">&quot;192.168.19.8&quot;</span></span><br><span class="line">port = <span class="number">6379</span>    </span><br><span class="line"><span class="comment"># 召回到redis</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recall_cate_by_cf</span>(<span class="params">partition</span>):</span></span><br><span class="line">    <span class="comment"># 建立redis 连接池</span></span><br><span class="line">    pool = redis.ConnectionPool(host=host, port=port)</span><br><span class="line">    <span class="comment"># 建立redis客户端</span></span><br><span class="line">    client = redis.Redis(connection_pool=pool)</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> partition:</span><br><span class="line">        client.hset(<span class="string">&quot;recall_cate&quot;</span>, row.userId, [i.cateId <span class="keyword">for</span> i <span class="keyword">in</span> row.recommendations])</span><br><span class="line"><span class="comment"># 对每个分片的数据进行处理 #mapPartition Transformation   map（一条一条走，和数据库建立链接耗时间）  而此处的partation是多块走，transformer的操作（）</span></span><br><span class="line"><span class="comment"># foreachPartition Action操作             foreachRDD       一块一块的走。是action的操作（一块召回一次）</span></span><br><span class="line">result.foreachPartition(recall_cate_by_cf)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意：这里这是召回的是用户最感兴趣的n个类别</span></span><br><span class="line"><span class="comment"># 总的条目数，查看redis中总的条目数是否一致</span></span><br><span class="line">result.count()</span><br></pre></td></tr></table></figure><p>显示结果:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1136340</span><br></pre></td></tr></table></figure><h3 id="3-根据用户对品牌偏好打分训练ALS模型-与上面的套路一样"><a href="#3-根据用户对品牌偏好打分训练ALS模型-与上面的套路一样" class="headerlink" title="3. 根据用户对品牌偏好打分训练ALS模型(与上面的套路一样)"></a>3. 根据用户对品牌偏好打分训练ALS模型(与上面的套路一样)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark.sql.types <span class="keyword">import</span> StructType, StructField, StringType, IntegerType</span><br><span class="line"></span><br><span class="line">schema = StructType([</span><br><span class="line">    StructField(<span class="string">&quot;userId&quot;</span>, IntegerType()),</span><br><span class="line">    StructField(<span class="string">&quot;brandId&quot;</span>, IntegerType()),</span><br><span class="line">    StructField(<span class="string">&quot;pv&quot;</span>, IntegerType()),</span><br><span class="line">    StructField(<span class="string">&quot;fav&quot;</span>, IntegerType()),</span><br><span class="line">    StructField(<span class="string">&quot;cart&quot;</span>, IntegerType()),</span><br><span class="line">    StructField(<span class="string">&quot;buy&quot;</span>, IntegerType())</span><br><span class="line">])</span><br><span class="line"><span class="comment"># 从hdfs加载预处理好的品牌的统计数据</span></span><br><span class="line">brand_count_df = spark.read.csv(<span class="string">&quot;hdfs://localhost:8020/preprocessing_dataset/brand_count.csv&quot;</span>, header=<span class="literal">True</span>, schema=schema)</span><br><span class="line"><span class="comment"># brand_count_df.show()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_row</span>(<span class="params">r</span>):</span></span><br><span class="line">    <span class="comment"># 处理每一行数据：r表示row对象</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 偏好评分规则：</span></span><br><span class="line"><span class="comment">#     m: 用户对应的行为次数</span></span><br><span class="line">    <span class="comment">#     该偏好权重比例，次数上限仅供参考，具体数值应根据产品业务场景权衡</span></span><br><span class="line"><span class="comment">#     pv: if m&lt;=20: score=0.2*m; else score=4</span></span><br><span class="line"><span class="comment">#     fav: if m&lt;=20: score=0.4*m; else score=8</span></span><br><span class="line"><span class="comment">#     cart: if m&lt;=20: score=0.6*m; else score=12</span></span><br><span class="line"><span class="comment">#     buy: if m&lt;=20: score=1*m; else score=20</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 注意这里要全部设为浮点数，spark运算时对类型比较敏感，要保持数据类型都一致</span></span><br><span class="line">pv_count = r.pv <span class="keyword">if</span> r.pv <span class="keyword">else</span> <span class="number">0.0</span></span><br><span class="line">fav_count = r.fav <span class="keyword">if</span> r.fav <span class="keyword">else</span> <span class="number">0.0</span></span><br><span class="line">cart_count = r.cart <span class="keyword">if</span> r.cart <span class="keyword">else</span> <span class="number">0.0</span></span><br><span class="line">buy_count = r.buy <span class="keyword">if</span> r.buy <span class="keyword">else</span> <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line">pv_score = <span class="number">0.2</span>*pv_count <span class="keyword">if</span> pv_count&lt;=<span class="number">20</span> <span class="keyword">else</span> <span class="number">4.0</span></span><br><span class="line">fav_score = <span class="number">0.4</span>*fav_count <span class="keyword">if</span> fav_count&lt;=<span class="number">20</span> <span class="keyword">else</span> <span class="number">8.0</span></span><br><span class="line">cart_score = <span class="number">0.6</span>*cart_count <span class="keyword">if</span> cart_count&lt;=<span class="number">20</span> <span class="keyword">else</span> <span class="number">12.0</span></span><br><span class="line">buy_score = <span class="number">1.0</span>*buy_count <span class="keyword">if</span> buy_count&lt;=<span class="number">20</span> <span class="keyword">else</span> <span class="number">20.0</span></span><br><span class="line"></span><br><span class="line">rating = pv_score + fav_score + cart_score + buy_score</span><br><span class="line"><span class="comment"># 返回用户ID、品牌ID、用户对品牌的偏好打分</span></span><br><span class="line"><span class="keyword">return</span> r.userId, r.brandId, rating</span><br><span class="line"><span class="comment"># 用户对品牌的打分数据</span></span><br><span class="line">brand_rating_df = brand_count_df.rdd.<span class="built_in">map</span>(process_row).toDF([<span class="string">&quot;userId&quot;</span>, <span class="string">&quot;brandId&quot;</span>, <span class="string">&quot;rating&quot;</span>])</span><br><span class="line"><span class="comment"># brand_rating_df.show()</span></span><br></pre></td></tr></table></figure><ul><li><p>基于Spark的ALS隐因子模型进行CF评分预测</p><ul><li><p>ALS的意思是交替最小二乘法（Alternating Least Squares），是Spark中进行基于模型的协同过滤（model-based CF）的推荐系统算法，也是目前Spark内唯一一个推荐算法。</p><p>同SVD，它也是一种矩阵分解技术，但理论上，ALS在海量数据的处理上要优于SVD。</p><p>更多了解：<a href="https://spark.apache.org/docs/latest/api/python/pyspark.ml.html?highlight=vectors#module-pyspark.ml.recommendation">pyspark.ml.recommendation.ALS</a></p><p>注意：由于数据量巨大，因此这里不考虑基于内存的CF算法</p><p>参考：<a href="https://www.cnblogs.com/mooba/p/6539142.html">为什么Spark中只有ALS</a></p></li></ul></li><li><p>使用pyspark中的ALS矩阵分解方法实现CF评分预测</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用pyspark中的ALS矩阵分解方法实现CF评分预测</span></span><br><span class="line"><span class="comment"># 文档地址：https://spark.apache.org/docs/latest/api/python/pyspark.ml.html?highlight=vectors#module-pyspark.ml.recommendation</span></span><br><span class="line"><span class="keyword">from</span> pyspark.ml.recommendation <span class="keyword">import</span> ALS</span><br><span class="line"></span><br><span class="line">als = ALS(userCol=<span class="string">&#x27;userId&#x27;</span>, itemCol=<span class="string">&#x27;brandId&#x27;</span>, ratingCol=<span class="string">&#x27;rating&#x27;</span>, checkpointInterval=<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 利用打分数据，训练ALS模型</span></span><br><span class="line"><span class="comment"># 此处训练时间较长</span></span><br><span class="line">model = als.fit(brand_rating_df)</span><br><span class="line"><span class="comment"># model.recommendForAllUsers(N) 给用户推荐TOP-N个物品</span></span><br><span class="line">model.recommendForAllUsers(<span class="number">3</span>).show()</span><br><span class="line"><span class="comment"># 将模型进行存储</span></span><br><span class="line">model.save(<span class="string">&quot;hdfs://localhost:9000/models/userBrandRatingModel.obj&quot;</span>)</span><br><span class="line"><span class="comment"># 测试存储的模型</span></span><br><span class="line"><span class="keyword">from</span> pyspark.ml.recommendation <span class="keyword">import</span> ALSModel</span><br><span class="line"><span class="comment"># 从hdfs加载模型</span></span><br><span class="line">my_model = ALSModel.load(<span class="string">&quot;hdfs://localhost:9000/models/userBrandRatingModel.obj&quot;</span>)</span><br><span class="line">my_model</span><br><span class="line"><span class="comment"># model.recommendForAllUsers(N) 给用户推荐TOP-N个物品</span></span><br><span class="line">my_model.recommendForAllUsers(<span class="number">3</span>).first()</span><br></pre></td></tr></table></figure><h3 id="4-小结"><a href="#4-小结" class="headerlink" title="4.小结"></a>4.小结</h3><h3 id="spark-训练-ALS-模型"><a href="#spark-训练-ALS-模型" class="headerlink" title="spark 训练 ALS 模型"></a>spark 训练 ALS 模型</h3><ul><li><p>spark 机器学习相关的库</p><ul><li>spark MLlib<ul><li>最早开发的</li><li><strong>基于RDD 的api</strong></li><li>目前已经停止维护了 （从2.3开始停止维护）</li><li>还可以使用</li></ul></li><li>spark ML<ul><li>目前在更新的是这个库</li><li><strong>基于dataframe</strong></li></ul></li></ul></li><li><p>ALS 模型训练</p><ul><li><p>spark ML的库中封装了 协同过滤的 ALS模型</p></li><li><p>from pyspark.ml.recommendation import ALS</p></li><li><p>需要准备一个dataframe 包含 用户id 物品id 用户-物品评分 这三列，利用这三列数据就可以使用spark ALS模块训练ALS模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark.ml.recommendation <span class="keyword">import</span> ALS</span><br><span class="line">als = ALS(userCol = <span class="string">&#x27;userId&#x27;</span>,itemCol=<span class="string">&#x27;cateId&#x27;</span>,ratingCol = <span class="string">&#x27;rating&#x27;</span>,checkpointInterval = <span class="number">5</span>)</span><br><span class="line">model = als.fit(dataframe)</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>训练出模型之后就可以为用户召回物品</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">model.recommendForAllUsers(<span class="number">3</span>)</span><br><span class="line"><span class="comment">#为指定用户推荐物品</span></span><br><span class="line">dataset = spark.createDataFrame([[<span class="number">1</span>],[<span class="number">2</span>],[<span class="number">3</span>]])</span><br><span class="line">dataset = dataset.withColumnRenamed(<span class="string">&quot;_1&quot;</span>, <span class="string">&quot;userId&quot;</span>)</span><br><span class="line">ret = model.recommendForUserSubset(dataset, <span class="number">3</span>)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;根据用户行为数据创建ALS模型并召回商品&quot;&gt;&lt;a href=&quot;#根据用户行为数据创建ALS模型并召回商品&quot; class=&quot;headerlink&quot; title=&quot;根据用户行为数据创建ALS模型并召回商品&quot;&gt;&lt;/a&gt;根据用户行为数据创建ALS模型并召回商品&lt;/h2&gt;&lt;</summary>
      
    
    
    
    <category term="机器学习" scheme="https://xxren8218.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="大数据的lambda架构" scheme="https://xxren8218.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%9A%84lambda%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="推荐系统基础" scheme="https://xxren8218.github.io/tags/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>01-推荐系统实战之个性化电商广告推荐系统介绍</title>
    <link href="https://xxren8218.github.io/20210708/01%E2%80%94%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E5%AE%9E%E6%88%98%E4%B9%8B%E4%B8%AA%E6%80%A7%E5%8C%96%E7%94%B5%E5%95%86%E5%B9%BF%E5%91%8A%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D.html"/>
    <id>https://xxren8218.github.io/20210708/01%E2%80%94%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E5%AE%9E%E6%88%98%E4%B9%8B%E4%B8%AA%E6%80%A7%E5%8C%96%E7%94%B5%E5%95%86%E5%B9%BF%E5%91%8A%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D.html</id>
    <published>2021-07-07T17:10:24.000Z</published>
    <updated>2021-07-08T17:03:13.109Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-个性化电商广告推荐系统介绍"><a href="#一-个性化电商广告推荐系统介绍" class="headerlink" title="一 个性化电商广告推荐系统介绍"></a>一 个性化电商广告推荐系统介绍</h2><h3 id="1-数据集介绍"><a href="#1-数据集介绍" class="headerlink" title="1 数据集介绍"></a>1 数据集介绍</h3><ul><li><p>Ali_Display_Ad_Click是阿里巴巴提供的一个淘宝展示广告点击率预估数据集</p><p>数据集来源：天池竞赛 <a href="https://tianchi.aliyun.com/dataset/dataDetail?dataId=56">数据集-阿里云天池 (aliyun.com)</a></p></li><li><p>原始样本骨架raw_sample</p><p>淘宝网站中随机抽样了114万用户8天内的广告展示/点击日志（2600万条记录），构成原始的样本骨架。 字段说明如下：</p><ol><li>user_id：脱敏过的用户ID；</li><li>adgroup_id：脱敏过的广告单元ID；</li><li>time_stamp：时间戳；</li><li>pid：资源位；</li><li>noclk：为1代表没有点击；为0代表点击；</li><li>clk：为0代表没有点击；为1代表点击；<ul><li>此处的点与没点通过埋点来实现（JS代码）。</li><li>有两个点和没点数据，是记录展示了什么数据，他没点。（看了没点与压根没看到区别）</li><li>得通过两个埋点对比得到结果，一个记录曝光，一个记录点击的。</li></ul></li></ol><p>用前面7天的做训练样本（20170506-20170512），用第8天的做测试样本（20170513）</p></li><li><p>广告基本信息表ad_feature</p><p>本数据集涵盖了raw_sample中全部广告的基本信息(约80万条目)。字段说明如下：</p><ol><li>adgroup_id：脱敏过的广告ID；</li><li>cate_id：脱敏过的商品类目ID；</li><li>campaign_id：脱敏过的广告计划ID；</li><li>customer_id: 脱敏过的广告主ID；</li><li>brand_id：脱敏过的品牌ID；</li><li>price: 宝贝的价格</li></ol><p>其中一个广告ID对应一个商品（宝贝），一个宝贝属于一个类目，一个宝贝属于一个品牌。</p></li><li><p>用户基本信息表user_profile</p><p>本数据集涵盖了raw_sample中全部用户的基本信息(约100多万用户)。字段说明如下：</p><ol><li>userid：脱敏过的用户ID；</li><li>cms_segid：微群ID；</li><li>cms_group_id：cms_group_id；</li><li>final_gender_code：性别 1:男,2:女；</li><li>age_level：年龄层次； 1234</li><li>pvalue_level：消费档次，1:低档，2:中档，3:高档；</li><li>shopping_level：购物深度，1:浅层用户,2:中度用户,3:深度用户</li><li>occupation：是否大学生 ，1:是,0:否</li><li>new_user_class_level：城市层级</li></ol></li><li><p>用户的行为日志behavior_log</p><p>本数据集涵盖了raw_sample中全部用户22天内的购物行为(共七亿条记录)。字段说明如下：</p><p>user：脱敏过的用户ID；<br>time_stamp：时间戳；<br>btag：行为类型, 包括以下四种：<br>​    类型 | 说明<br>​    pv | 浏览<br>​    cart | 加入购物车<br>​    fav | 收藏<br>​    buy | 购买<br>cate_id：脱敏过的商品类目id；<br>brand_id: 脱敏过的品牌id；<br>这里以user + time_stamp为key，会有很多重复的记录；这是因为我们的不同的类型的行为数据是不同部门记录的，在打包到一起的时候，实际上会有小的偏差（即两个一样的time_stamp实际上是差异比较小的两个时间）</p></li></ul><h3 id="2-项目效果展示"><a href="#2-项目效果展示" class="headerlink" title="2. 项目效果展示"></a>2. 项目效果展示</h3><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/20210708011249.png" alt=""></p><h3 id="3-项目实现分析"><a href="#3-项目实现分析" class="headerlink" title="3. 项目实现分析"></a>3. 项目实现分析</h3><ul><li><p>主要包括</p><ul><li>一份广告点击的样本数据raw_sample.csv：体现的是用户对不同位置广告点击、没点击的情况</li><li>一份广告基本信息数据ad_feature.csv：体现的是每个广告的类目(id)、品牌(id)、价格特征</li><li>一份用户基本信息数据user_profile.csv：体现的是用户群组、性别、年龄、消费购物档次、所在城市级别等特征</li><li>一份用户行为日志数据behavior_log.csv：体现用户对商品类目(id)、品牌(id)的浏览、加购物车、收藏、购买等信息</li></ul><p>我们是在对非搜索类型的广告进行点击率预测和推荐(没有搜索词、没有广告的内容特征信息)</p><ol><li>推荐业务处理主要流程： 召回 ===&gt; 排序 ===&gt; 过滤<ul><li>离线处理业务流（<strong>①训练逻辑回归模型，②为每个用户召回感兴趣的广告</strong>）<ul><li>raw_sample.csv ==&gt; 历史样本数据</li><li>ad_feature.csv ==&gt; 广告特征数据</li><li>user_profile.csv ==&gt; 用户特征数据</li><li>raw_sample.csv + ad_feature.csv + user_profile.csv ==&gt; CTR点击率预测模型</li><li>behavior_log.csv ==&gt; 评分数据 ==&gt; user-cate/brand评分数据 ==&gt; 协同过滤 ==&gt; top-N cate/brand ==&gt; 关联广告（找到感兴趣的广告）</li><li>协同过滤召回 ==&gt; top-N cate/brand ==&gt; 关联对应的广告完成召回</li></ul></li><li>在线处理业务流<ul><li>数据处理部分：<ul><li>实时行为日志 ==&gt; 实时特征 ==&gt; 缓存</li><li>实时行为日志 ==&gt; 实时商品类别/品牌 ==&gt; 实时广告召回集 ==&gt; 缓存</li></ul></li><li>推荐任务部分：<ul><li>CTR点击率预测模型 + 广告/用户特征(缓存) + 对应的召回集(缓存) ==&gt; 点击率排序 ==&gt; top-N 广告推荐结果</li></ul></li></ul></li></ul></li><li>涉及技术：Flume、Kafka、Spark-streming\HDFS、Spark SQL、Spark ML、Redis<ul><li>Flume：日志数据收集</li><li>Kafka：实时日志数据处理队列</li><li>HDFS：存储数据</li><li>Spark SQL：离线处理</li><li>Spark ML：模型训练</li><li>Redis：缓存</li></ul></li></ol></li></ul><h3 id="4-点击率预测-CTR—Click-Through-Rate-概念"><a href="#4-点击率预测-CTR—Click-Through-Rate-概念" class="headerlink" title="4. 点击率预测(CTR—Click-Through-Rate)概念"></a>4. 点击率预测(CTR—Click-Through-Rate)概念</h3><ul><li><p>电商广告推荐通常使用广告点击率(CTR—Click-Through-Rate)预测来实现</p><p><strong>点击率预测 VS 推荐算法</strong></p><p>点击率预测需要给出精准的点击概率，比如广告A点击率0.5%、广告B的点击率0.12%等；而推荐算法很多时候只需要得出一个最优的次序A&gt;B&gt;C即可。</p><p>点击率预测使用的算法通常是如逻辑回归(Logic Regression)这样的机器学习算法，而推荐算法则是一些基于协同过滤推荐、基于内容的推荐等思想实现的算法</p><p><strong>点击率 VS 转化率</strong></p><p>点击率预测是对每次广告的点击情况做出预测，可以判定这次为点击或不点击，也可以给出点击或不点击的概率</p><p>转化率指的是从状态A进入到状态B的概率，电商的转化率通常是指到达网站后，进而有成交记录的用户比率，如用户成交量/用户访问量</p><p><strong>搜索和非搜索广告点击率预测的区别</strong></p><p>搜索中有很强的搜索信号-“查询词(Query)”，查询词和广告内容的匹配程度很大程度影响了点击概率，<strong>搜索广告的点击率普遍较高</strong></p><p>非搜索广告（例如展示广告，信息流广告）的点击率的计算很多就来源于用户的兴趣和广告自身的特征，以及上下文环境。通常好<strong>位置能达到百分之几的点击率</strong>（5%左右就很不错了）。对于很多底部的广告，点击率非常低，常常是千分之几，甚至更低。</p></li></ul><h2 id="5-小结："><a href="#5-小结：" class="headerlink" title="5.小结："></a>5.小结：</h2><h3 id="数据集分析"><a href="#数据集分析" class="headerlink" title="数据集分析"></a>数据集分析</h3><ul><li><p>召回</p><ul><li>采用用户的行为日志 behavior_log 创建召回模型</li><li>协同过滤   <strong>ALS</strong>——Spark有封装<ul><li>协同过滤需需要用户对物品的评分。</li><li>用户-物品 评分<ul><li>这里没有。只有对品类、品牌的数据。</li><li>用户-品类 评分</li><li>用户-品牌 评分</li></ul></li><li>pv  cart fav buy通过四种行为转化成 -&gt; 评分<ul><li>评分的设定是根据具体的业务来的。如买给的评分最高，看最低。以及不同行为的上限，看了100次，那最多评分50.</li></ul></li></ul></li></ul></li><li><p>排序</p><ul><li>LR 逻辑回归</li><li>以  <strong>raw_sample</strong>  为骨架 把ad_feature 广告信息和user_profile用户信息拼接过来 训练逻辑回归模型</li><li>训练逻辑回归模型时 ：<ul><li>用到user_profile中会影响到用户是否会点击广告的用户特征 </li></ul></li><li>用到ad_feature会影响到用户是否会点击广告的特征 <ul><li>点/不点作为目标值</li></ul></li></ul></li><li>预测的是点击的概率<ul><li>若预测是0,1的话全部都是0.（实际广告100个人，有5个人点，正负样本极度不均衡，那我模型直接预测成全部不点也很好。所以需要调整阈值，概率不能以0.5划分了。得到结果处理：如果几个物品不点的概率分别为，0.87 0.88 0.91），那我先推荐的是点的概率大的0.13那个物品。</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一-个性化电商广告推荐系统介绍&quot;&gt;&lt;a href=&quot;#一-个性化电商广告推荐系统介绍&quot; class=&quot;headerlink&quot; title=&quot;一 个性化电商广告推荐系统介绍&quot;&gt;&lt;/a&gt;一 个性化电商广告推荐系统介绍&lt;/h2&gt;&lt;h3 id=&quot;1-数据集介绍&quot;&gt;&lt;a h</summary>
      
    
    
    
    <category term="机器学习" scheme="https://xxren8218.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="大数据的lambda架构" scheme="https://xxren8218.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%9A%84lambda%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="推荐系统基础" scheme="https://xxren8218.github.io/tags/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>33-Spark Streaming的状态操作</title>
    <link href="https://xxren8218.github.io/20210707/33-Spark-Streaming%E7%9A%84%E7%8A%B6%E6%80%81%E6%93%8D%E4%BD%9C.html"/>
    <id>https://xxren8218.github.io/20210707/33-Spark-Streaming%E7%9A%84%E7%8A%B6%E6%80%81%E6%93%8D%E4%BD%9C.html</id>
    <published>2021-07-06T16:39:56.000Z</published>
    <updated>2021-07-06T16:42:23.690Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、Spark-Streaming的状态操作"><a href="#1、Spark-Streaming的状态操作" class="headerlink" title="1、Spark Streaming的状态操作"></a>1、Spark Streaming的状态操作</h2><p>在Spark Streaming中存在两种状态操作</p><ul><li>UpdateStateByKey</li><li>Windows操作</li></ul><p>使用有状态的transformation，需要开启Checkpoint</p><ul><li>spark streaming 的容错机制</li><li>它将足够多的信息checkpoint到某些具备容错性的存储系统如hdfs上，以便出错时能够迅速恢复</li></ul><h3 id="1-1-updateStateByKey"><a href="#1-1-updateStateByKey" class="headerlink" title="1.1 updateStateByKey"></a>1.1 updateStateByKey</h3><p>Spark Streaming实现的是一个实时批处理操作，每隔一段时间将数据进行打包，封装成RDD，是无状态的。</p><p>无状态：指的是每个时间片段的数据之间是没有关联的。</p><p>需求：想要将一个大时间段（1天），即多个小时间段的数据内的数据持续进行累积操作</p><p>一般超过一天都是用RDD或Spark SQL来进行离线批处理</p><p>如果没有UpdateStateByKey，我们需要将每一秒的数据计算好放入mysql中取，再用mysql来进行统计计算</p><p>Spark Streaming中提供这种状态保护机制，即updateStateByKey</p><p>步骤：</p><ul><li>首先，要定义一个state，可以是任意的数据类型</li><li>其次，要定义state更新函数—指定一个函数如何使用之前的state和新值来更新state</li><li>对于每个batch，Spark都会为每个之前已经存在的key去应用一次state更新函数，无论这个key在batch中是否有新的数据。如果state更新函数返回none，那么key对应的state就会被删除</li><li>对于每个新出现的key，也会执行state更新函数</li></ul><p>举例：词统计。</p><h3 id="案例：updateStateByKey"><a href="#案例：updateStateByKey" class="headerlink" title="案例：updateStateByKey"></a>案例：updateStateByKey</h3><p>需求：监听网络端口的数据，获取到每个批次的出现的单词数量，并且需要把每个批次的信息保留下来</p><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># 配置spark driver和pyspark运行时，所使用的python解释器路径</span></span><br><span class="line">PYSPARK_PYTHON = <span class="string">&quot;/home/hadoop/miniconda3/envs/datapy365spark23/bin/python&quot;</span></span><br><span class="line">JAVA_HOME=<span class="string">&#x27;/home/hadoop/app/jdk1.8.0_191&#x27;</span></span><br><span class="line">SPARK_HOME = <span class="string">&quot;/home/hadoop/app/spark-2.3.0-bin-2.6.0-cdh5.7.0&quot;</span></span><br><span class="line"><span class="comment"># 当存在多个版本时，不指定很可能会导致出错</span></span><br><span class="line">os.environ[<span class="string">&quot;PYSPARK_PYTHON&quot;</span>] = PYSPARK_PYTHON</span><br><span class="line">os.environ[<span class="string">&quot;PYSPARK_DRIVER_PYTHON&quot;</span>] = PYSPARK_PYTHON</span><br><span class="line">os.environ[<span class="string">&#x27;JAVA_HOME&#x27;</span>]=JAVA_HOME</span><br><span class="line">os.environ[<span class="string">&quot;SPARK_HOME&quot;</span>] = SPARK_HOME</span><br><span class="line"><span class="keyword">from</span> pyspark.streaming <span class="keyword">import</span> StreamingContext</span><br><span class="line"><span class="keyword">from</span> pyspark.sql.session <span class="keyword">import</span> SparkSession</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建SparkContext</span></span><br><span class="line">spark = SparkSession.builder.master(<span class="string">&quot;local[2]&quot;</span>).getOrCreate()</span><br><span class="line">sc = spark.sparkContext</span><br><span class="line"></span><br><span class="line">ssc = StreamingContext(sc, <span class="number">3</span>)</span><br><span class="line"><span class="comment">##### 开启检查点 #####</span></span><br><span class="line">ssc.checkpoint(<span class="string">&quot;checkpoint&quot;</span>) <span class="comment"># 默认会在Hadoop的/user/root下有个Chekpoint</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义state更新函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">updateFunc</span>(<span class="params">new_values, last_sum</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>(new_values) + (last_sum <span class="keyword">or</span> <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">lines = ssc.socketTextStream(<span class="string">&quot;localhost&quot;</span>, <span class="number">9999</span>)</span><br><span class="line"><span class="comment"># 对数据以空格进行拆分，分为多个单词</span></span><br><span class="line">counts = lines.flatMap(<span class="keyword">lambda</span> line: line.split(<span class="string">&quot; &quot;</span>)) \</span><br><span class="line">    .<span class="built_in">map</span>(<span class="keyword">lambda</span> word: (word, <span class="number">1</span>)) \</span><br><span class="line">    .updateStateByKey(updateFunc=updateFunc) <span class="comment"># 应用updateStateByKey函数</span></span><br><span class="line">    </span><br><span class="line">counts.pprint()</span><br><span class="line"></span><br><span class="line">ssc.start()</span><br><span class="line">ssc.awaitTermination()</span><br></pre></td></tr></table></figure><h3 id="1-2-Windows"><a href="#1-2-Windows" class="headerlink" title="1.2 Windows"></a>1.2 Windows</h3><ul><li><p>实时热搜</p></li><li><p>窗口长度L：运算的数据量</p></li><li>滑动间隔G：控制每隔多长时间做一次运算</li><li>两个函数：<ul><li>删除的数据怎么处理</li><li>新加入的数据怎么处理</li></ul></li></ul><p>每隔G秒，统计最近L秒的数据</p><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/20210707004109.png" alt=""></p><p><strong>操作细节</strong></p><ul><li>Window操作是基于窗口长度和滑动间隔来工作的</li><li>窗口的长度控制考虑前几批次数据量</li><li>默认为批处理的滑动间隔来确定计算结果的频率</li></ul><p><strong>相关函数</strong></p><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/20210707004126.png" alt=""></p><ul><li>Smart computation</li><li>invAddFunc</li></ul><p>reduceByKeyAndWindow(func,invFunc,windowLength,slideInterval,[num,Tasks])</p><ul><li>func:正向操作，类似于updateStateByKey</li><li>invFunc：反向操作，移除的数据如何处理</li><li>windowLength 窗口长度，统计一小时的热搜关键词，窗口长度就是1h。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/20210707004144.png" alt=""></p><p>例如在热词时，在上一个窗口中可能是热词，这个一个窗口中可能不是热词，就需要在这个窗口中把该次剔除掉</p><p>典型案例：热点搜索词滑动统计，每隔10秒，统计最近60秒钟的搜索词的搜索频次，并打印出最靠前的3个搜索词出现次数。</p><p><img src="https://cdn.jsdelivr.net/gh/xxren8218/blogimages/img/20210707004200.png" alt=""></p><p><strong>案例</strong></p><p>监听网络端口的数据，每隔3秒统计前6秒出现的单词数量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># 配置spark driver和pyspark运行时，所使用的python解释器路径</span></span><br><span class="line">PYSPARK_PYTHON = <span class="string">&quot;/home/hadoop/miniconda3/envs/datapy365spark23/bin/python&quot;</span></span><br><span class="line">JAVA_HOME=<span class="string">&#x27;/home/hadoop/app/jdk1.8.0_191&#x27;</span></span><br><span class="line">SPARK_HOME = <span class="string">&quot;/home/hadoop/app/spark-2.3.0-bin-2.6.0-cdh5.7.0&quot;</span></span><br><span class="line"><span class="comment"># 当存在多个版本时，不指定很可能会导致出错</span></span><br><span class="line">os.environ[<span class="string">&quot;PYSPARK_PYTHON&quot;</span>] = PYSPARK_PYTHON</span><br><span class="line">os.environ[<span class="string">&quot;PYSPARK_DRIVER_PYTHON&quot;</span>] = PYSPARK_PYTHON</span><br><span class="line">os.environ[<span class="string">&#x27;JAVA_HOME&#x27;</span>]=JAVA_HOME</span><br><span class="line">os.environ[<span class="string">&quot;SPARK_HOME&quot;</span>] = SPARK_HOME</span><br><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkContext</span><br><span class="line"><span class="keyword">from</span> pyspark.streaming <span class="keyword">import</span> StreamingContext</span><br><span class="line"><span class="keyword">from</span> pyspark.sql.session <span class="keyword">import</span> SparkSession</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_countryname</span>(<span class="params">line</span>):</span></span><br><span class="line">    country_name = line.strip()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> country_name == <span class="string">&#x27;usa&#x27;</span>:</span><br><span class="line">        output = <span class="string">&#x27;USA&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> country_name == <span class="string">&#x27;ind&#x27;</span>:</span><br><span class="line">        output = <span class="string">&#x27;India&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> country_name == <span class="string">&#x27;aus&#x27;</span>:</span><br><span class="line">        output = <span class="string">&#x27;Australia&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        output = <span class="string">&#x27;Unknown&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (output, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"><span class="comment"># 定义处理的时间间隔</span></span><br><span class="line">    batch_interval = <span class="number">1</span> <span class="comment"># base time unit (in seconds)</span></span><br><span class="line">    <span class="comment"># 定义窗口长度</span></span><br><span class="line">    window_length = <span class="number">6</span> * batch_interval</span><br><span class="line">    <span class="comment"># 定义滑动时间间隔</span></span><br><span class="line">    frequency = <span class="number">3</span> * batch_interval</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取StreamingContext</span></span><br><span class="line">    spark = SparkSession.builder.master(<span class="string">&quot;local[2]&quot;</span>).getOrCreate()</span><br><span class="line">sc = spark.sparkContext</span><br><span class="line">ssc = StreamingContext(sc, batch_interval)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 需要设置检查点</span></span><br><span class="line">    ssc.checkpoint(<span class="string">&quot;checkpoint&quot;</span>)</span><br><span class="line"></span><br><span class="line">    lines = ssc.socketTextStream(<span class="string">&#x27;localhost&#x27;</span>, <span class="number">9999</span>)</span><br><span class="line">    addFunc = <span class="keyword">lambda</span> x, y: x + y</span><br><span class="line">    invAddFunc = <span class="keyword">lambda</span> x, y: x - y</span><br><span class="line">    <span class="comment"># 调用reduceByKeyAndWindow，来进行窗口函数的调用</span></span><br><span class="line">    window_counts = lines.<span class="built_in">map</span>(get_countryname) \</span><br><span class="line">        .reduceByKeyAndWindow(addFunc, invAddFunc, window_length, frequency)</span><br><span class="line"><span class="comment"># 输出处理结果信息</span></span><br><span class="line">    window_counts.pprint()</span><br><span class="line"></span><br><span class="line">    ssc.start()</span><br><span class="line">    ssc.awaitTermination()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1、Spark-Streaming的状态操作&quot;&gt;&lt;a href=&quot;#1、Spark-Streaming的状态操作&quot; class=&quot;headerlink&quot; title=&quot;1、Spark Streaming的状态操作&quot;&gt;&lt;/a&gt;1、Spark Streaming的状态</summary>
      
    
    
    
    <category term="机器学习" scheme="https://xxren8218.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="大数据的lambda架构" scheme="https://xxren8218.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%9A%84lambda%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="推荐系统基础" scheme="https://xxren8218.github.io/tags/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
</feed>
